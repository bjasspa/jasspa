.\"*-*- nroff -*-*************************************************************
.\"
.\"			Copyright 1998 Jon Green.
.\"			      All Rights Reserved
.\"
.\"
.\"  System        :
.\"  Module        :
.\"  Object Name   : m2cmd066.2
.\"  Created By    : Jon Green
.\"  Created       : Thu Jul 16 23:13:14 1998
.\"  Last Modified : <000719.1013>
.\"
.\"  Description
.\"
.\"  Notes
.\"
.\"  History
.\"
.\"***************************************************************************
.\"
.\"  Copyright (c) 1998 Jon Green.
.\"
.\"  All Rights Reserved.
.\"
.\"  This  document  may not, in  whole  or in part, be  copied,  photocopied,
.\"  reproduced,  translated, or reduced to any  electronic  medium or machine
.\"  readable form without prior written consent from Jon Green.
.\"
.\"***************************************************************************
.\"
.Id $Id: m2cmd066.2,v 2.4 2001-07-14 10:10:24 jon Exp $
.Im MicroEmacs command|osd
.so me.tni
.TH osd 2
.XI osd - "Manage the On-Screen Display"
.SH NAME
osd \- Manage the On-Screen Display
.Me $a
.SH SYNOPSIS
.na
\fBosd\fR
.br
\fI-1\fR \fBosd\fR
.br
\fI-2\fR \fBosd\fR
.br
\fIn\fR \fBosd\fR
.br
\fB\-1\fR \fBosd\fR \fIn\fR
.br
\fBosd\fR \fB\-1\fR \fIflag\fR
.br
\fBosd\fR \fIn\fR \fB0\fR
\fIflags\fR
["\fIscheme\fR"]
["\fIx-pos\fR"
"\fIy-pos\fR"]
["\fImin-width\fR"
"\fImin-depth\fR"
"\fImax-wid\fR"
"\fImax-dep\fR"]
["\fIdefault\fR"]
[["\fItitle-bar-scheme\fR"]
["\fIText\fR"]]
["\fIresize-command\fR"]
["\fIcontrol-command\fR"]
["\fIinit-command\fR"]
.br
\fBosd\fR \fIn\fR \fIi\fR \fIflags\fR
["\fItab-no\fR"]
["\fIitem-scheme\fR"]
["\fIwidth\fR"\ "\fIdepth\fR"]
["\fItext\fR"]
["\fIargument\fR"\ "\fIcommand\fR"]
.ad
.SH DESCRIPTION
The \fBosd\fR  command  manages the  On-Screen  Display, menu and dialogs. The
command takes various forms as defined by the arguments.  Each of the argument
configurations is defined as follows:-
.SS "Main Menu-Bar Status"
.na
\fBosd\fR \fB\-1\fR \fIflag\fR
.ad
.PP
This  invocation  determines  the state of the top main menu bar. The state is
set by the argument \fIflag\fR defined as:-
.RS
.IP
\fC\ 1\fR \- enable.
.br
\fC\ 0\fR \- disable.
.br
\fC\-1\fR \- disable and destroy.
.RE
.SS "Dialog Creation and Redefinition"
.na
\fBosd\fR \fIn\fR \fB0\fR
\fIflags\fR
["\fIscheme\fR"]
["\fIx-pos\fR"
"\fIy-pos\fR"]
["\fImin-width\fR"
"\fImin-depth\fR"
"\fImax-wid\fR"
"\fImax-dep\fR"]
["\fIdefault\fR"]
[["\fItitle-bar-scheme\fR"]
["\fIText\fR"]]
["\fIresize-command\fR"]
["\fIcontrol-command\fR"]
["\fIinit-command\fR"]
.ad
.PP
This invocation creates or resets the base properties of dialog \fIn\fR.
The \fIflags\fR argument determines the arguments and are defined as follows:
.RS
.IP \fBA\fR
Defines  dialog as an alpha type dialog,  items are added  according  to their
string text value. Alpha dialogs may not have separator or child items.
.IP \fBi\fR
Used with the \fBA\fR flag, sets the alpha ordering to be case insensitive.
.IP \fBG\fR
Create a Grid  dialog.  Every  item in the dialog is given a single  character
boarder around it. If one of the dialogs items is also given a '\fBG\fR' flag,
the boarder is drawn as a box around it, otherwise spaces are used.
.IP \fBN\fR
Create a Note-Book  (or tabs)  dialog. The dialog can only  contain one dialog
inclusion item ('\fBI\fR') and Note-Book pages ('\fBP\fR'). Pages added before
the  Inclusion  item (page item  number is lass than the  inclusion  page item
number) will be drawn at the top of the  note-book,  those added after will be
drawn at the bottom.
.IP \fBb\fR
Draw  boarder,  draws a boarder  around the  outside of the  dialog.  See also
\fIflag\fR \fBt\fR (title) as flag effects the boarder.
.IP \fBa\fR
Defines  the  absolute  start-up  position  of  the  dialog  in the  arguments
\fIx-pos\fR   and  \fIy-pos\fR,   which  are  the  column  and  row  positions
respectively  of the dialog from the top left-hand  corner of the display. The
arguments  must be  specified.  e.g. the main menu is defined with an absolute
position  of (0,0). If the dialog can not be fully  drawn on the screen at the
given position it will be moved to a position which shows the most.
.IP \fBo\fR
Specifies  an  offset  to the  dialog  position  calculated  by  \*(mS  in the
arguments  \fIx-pos\fR and \fIy-pos\fR,  which are the column and row offsets.
This flag is ignored  when flag \fBa\fR is also  specified.  If the dialog can
not be fully  drawn on the  screen at the new  position  it will be moved to a
position which shows the most.
.IP \fBs\fR
Sets the size of the dialog. \fBosd\fR  automatically  resizes a dialog to fit
the contents, this flag should be considered as a size hint for \fBosd\fR, and
is not  guaranteed  to be honored. If the dialog has a boarder  (flag \fBb\fR)
the size given should include the boarder size.
.IP
The   arguments,   \fImin-width\fR,   \fImin-depth\fR,   \fImax-width\fR   and
\fImax-depth\fR must be specified, as
.RS
.IP \fB+ve\fR
The actual size of the dialog, minimum and maximum sizes.
.IP \fB0\fR
\fImin\fR  value should be specified as desired  window size, \fImax\fR may be
0 which specifies the screen size.
.IP \fB\-ve\fR
\fImin\fR defines the maximum size.
\fImax\fR is unlimited.
.LP
The following  table shows  possible  combination  of the sing  parameters and
their effect:-
.IP "\fImin\fR=0, \fImax\fR=0"
Default setting, makes dialog as small as possible,
with a maximum size of the screen.
.IP "\fImin\fR=0, \fImax\fR=50"
Make dialog as small as possible with a max of 50 characters.
.IP "\fImin\fR=50, \fImax\fR=0"
Make dialog as small as possible,  but make it
at least 50 characters  big and no larger  than the
screen.
.IP "\fImin\fR=30, \fImax\fR=-1"
Make  dialog  at  least  30 characters  big with no
upper  limit, very  useful for  dialogs  being
used as scrolled children.
.IP "\fImin\fR=\-1, \fImax\fR=50"
Make dialog 50 characters big.
.IP "\fImin\fR=-1, \fImax\fR=0"
Make dialog the same size as the screen.
.IP "\fImin\fR=\-1, \fImax\fR=\-1"
Make dialog as big as possible  (do not do this
unless  you have a large  amount  of memory to throw away).
.RE
.IP \fBS\fR
Sets the main  dialog  scheme,  The default  scheme  when not specified is
.Ht $osd-scheme 5
See macro file \fCfileopen.emf\fR for an example.
.IP \fBd\fR
Sets default item to select to "\fIdefault\fR". This item is selected when the
dialog is first opened, if this item is an automatically  opened sub-menu then
the child menu will also be opened.
.IP \fBt\fR
Title bar is present \- draws the title bar. The \fItext\fR argument is
optional
.\"   (but   strikes   me  now   that   if  not   given   and
.\"resize-command  or init-command  are then things go wrong (help)).
Also see flags \fBH\fR, \fBc\fR and \fBr\fR.
.IP \fBH\fR
Defines the title bar color scheme if flag \fBt\fR is specified.
If \fIt\fR is absent the  option is ignored.
.IP \fBc\fR
Centers the title bar text if  specified.  Option  \fBt\fR must be  specified,
otherwise the option is ignored.
.IP \fBr\fR
Right  justifies  the  title bar text if  specified.  Option  \fBt\fR  must be
specified, otherwise the option is ignored.
.IP \fBR\fR
Defines the dialog as re-sizable.  The  \fIresize-command\fR  argument must be
specified and the command should resize the dialog to the sizes given in
.Ht $result 5
in the format  "\fCwwwwdddd\fR", where \fCw\fR is width and \fCd\fR the depth.
If  the   \fIresize-command\fR  is  aborted  then  that  resize  operation  is
abandoned.
.IP \fBM\fR
Identifies the dialog as the main menu dialog.
.IP \fBC\fR
Binds a command to the dialog, which is automatically executed when the dialog
is opened. When the dialog with a \fBC\fR  attribute is opened, it is rendered
on the screen and then a command, defined by \fIcontrol-command\fR is invoked,
when the command completes the dialog is closed.
.IP
The  command  dialog  is  typically  used to create  status  messages.  e.g. a
"\fCBusy - Please  Wait\fR" dialog box, such a dialog may be implemented  when
saving  the  current  buffer  then  create  the  simple  dialog  and  sent the
\fIcontrol-command\fR to
.Ht save-buffer 2 .
The dialog would be defined as:-
.RS
.Me $emf-scheme
.CS
osd 200 0 "btcHC" %osd-title-scheme "Saving Buffer" save-buffer
osd 200 1 ""
osd 200 2 "" "Busy - Please Wait"
osd 200 3 ""
200 osd
.CE 0
.Me $ehf-scheme
.RE
.IP
If the dialog has buttons which need to become active then
control can be returned to \fBosd\fR by calling \fBosd\fR with no  arguments,
e.g. in the above  example  the dialog can be made to stay on the screen
until the  user selects \fCokay\fR by:
.RS
.Me $emf-scheme
.CS
define-macro test-osd
    save-buffer
    osd 200 2 "" "Save Complete"
    osd 200 4 "BcfH" %osd-ebtt-scheme "  &Okay  " f void
    osd
!emacro

osd 200 0 "btcHC" %osd-title-scheme "Saving Buffer" test-osd
osd 200 1 ""
osd 200 2 "" "Busy - Please Wait"
osd 200 3 ""
osd 200 4 "BcfHS" %osd-dbtt-scheme "  Okay  "

200 osd
.CE 0
.Me $ehf-scheme
.RE
.IP
The above mechanism is how
.Ht spell-buffer 3
operates.
.IP \fBk\fR
Disables  hot-keys for the dialog. All text strings are copied literally. This
is useful for dialogs like the tags child dialog as many tags have  '\fC&\fR's
in them.
.IP \fBB\fR
Makes the mouse right  Button have the same  behaviour as the left, by default
the right  mouse  button  simply  closes the  dialog.  This is useful for some
dialogs which are opened using the right mouse button.
.IP \fBf\fR
Automatically  uses the first  letter of an item's test as the hot key. Unlike
the normal hot keys, the letter is not  hi-lighted  and when typed by the user
the item is only  selected, not executed.  This flag also  disables the normal
hot-keys for the dialog, so all text strings are copied literally.
.IP \fBn\fR
Disables '\\n'  characters in text fields leading to multi lines. By default a
text item of "Hello\\nWorld" will create an item 5 by 2 characters big.
.LP
If  "\fIinit-command\fR"  is given then this  function  is always  called just
prior to the dialog being displayed so it can be used to configure the dialog.
.RE
.SS "Dialog Destruction"
.na
\fB\-1\fR \fBosd\fR \fIn\fR
.ad
.PP
This invocation destructs a dialog \fIn\fR. The dialog is only destroyed if it
is not currently being displayed.
.SS "Dialog Item Creation and Redefinition"
.na
\fBosd\fR \fIn\fR \fIi\fR \fIflags\fR
["\fItab-no\fR"]
["\fIitem-scheme\fR"]
["\fIwidth\fR"\ "\fIdepth\fR"]
["\fItext\fR"]
["\fIargument\fR"\ "\fIcommand\fR"]
.ad
.PP
This  invocation  type  adds a new  item  \fIi\fR  to a  dialog  \fIn\fR,  the
operation of the invocation is controlled by the \fIflags\fR as follows:-
.RS
.IP \fBD\fR
Disable item \fIi\fR, the item is ignored and is not rendered in the dialog.
.IP \fBI\fR
Include  dialog  "\fIargument\fR"  into this  dialog.  If  "\fIcommand\fR"  is
specified  then it is called prior to the child being  constructed  and can be
used to define the child. This is similar to the  \fBM\fRs  command.  See also
flag \fBb\fR.
.IP \fBP\fR
Item is a Note-Book  page, the item must have text and have an argument  which
is the osd dialog to be show when the page is activated.
.IP \fBM\fR
Item is a sub-menu,  The argument "\fIargument\fR"
specifies the sub-menus osd dialog
number. A "\fIcommand\fR" may also be specified which is executed first, this can
actually re-define the item and set the dialog number, e.g.
.RS
.Me $emf-scheme
.CS
; To start with the dialog number is unknown
osd 1 1 "M" f submenu-setup

define-macro submenu-setup
    osd 200 0 ....
    \....
    ; Now the sub-menu number is known redefine parent item,
    ; note the setup  command  is not given as we have now set
    ; it up!
    osd 1 1 "M" 200
!emacro
.CE 0
.Me $ehf-scheme
.RE
.IP
See also options \fBm\fR, \fBn\fR, \fBe\fR, \fBs\fR, \fBw\fR and \fBd\fR.
.IP \fBm\fR
Sub-menu must be manually  opened, using  hot-key,  the return key or the left
mouse button.
.IP "\fBn\fR, \fBe\fR, \fBs\fR, \fBw\fR"
Specify  where a sub-menu  is to be placed  relative  to the parent  item. The
letter indicates the direction as points on a compass,
North, East, South and West, respectively. The default when omitted is East.
.IP \fBd\fR
Display  sub-menu  type, i.e. "\fC..\fR" for auto opening and "\fC >\fR" for a
manual opening sub-menu.
.IP \fB\-\fR
Fill a  non-defined  chars with '\fC-\fR's instead of '\fC \fR's, used to draw
the lines across menus, typically with no text given, e.g.
.RS
.Me $emf-scheme
.CS
osd 200 5 "-"
.CE
.Me $ehf-scheme
But could also be specified as:
.Me $emf-scheme
.CS
osd 200 5 "-c" "Lined"
.CE 0
.Me $ehf-scheme
.RE
.IP \fBC\fR
Item is a check-box.  The setting of the  check-box  is  evaluated
when the dialog is first drawn,  re-draw and  whenever  any item is
executed. A "\fIcommand\fR"  must be specified which must  both  return
the  current  setting  when  the  given  argument  (of 1) is given
(!abort  if false,  !return if true) and  change  the value if the
argument value is negated. The text string must also be specified, the first 6
characters  are used in the  drawing of the check box. The format can be shown
as follows:-
.RS
.CS
String\\State       Off         On  
"123456"            "12356"     "12456"
" (-+)^"            " (-)"      " (+)"
"^[ *] "            "[ ] "      "[*] "
"^^NY^^"            "N"         "Y"
"^^^^^^"            ""          ""
.CE 0
.RE
.IP
Note that no character is rendered when a '\fC^\fR' character is used. See also
\fBp\fR for prepending the check-box.
.IP \fBp\fR
Prepend the check-box box. By default a check box is drawn as:
.RS
.CS
"Check box12?56"
.CE
This option changes it to:
.CS
"12?56Check box"
.CE 0
.RE
.IP \fBx\fR
When the item is  executed  do not exit the dialog.  Often used with
Check-boxes.
.IP \fBi\fR
The  command  given is a command  line  string  which is executed in a similar
fashion to
.Ht execute-line 2 .
Note that if an argument is required it is usually specified in the string, i.e.
.RS
.Me $emf-scheme
.CS
osd "i" "text" 5 "1000 ml-write @#"
.CE
.Me $ehf-scheme
writes the argument (i.e. 5) for 1 second.
.Me $emf-scheme
.CS
osd "i" "text" 5 "my-command"
.CE
.Me $ehf-scheme
in this case \fImy-command\fR will not be given an argument,
.Me $emf-scheme
.CS
osd "i" "text" 5 "10 my-command"
.CE
.Me $ehf-scheme
in this case \fImy-command\fR will be given an argument of 10,
.Me $emf-scheme
.CS
osd "i" "text" 5 "@# my-command"
.CE
.Me $ehf-scheme
in this case \fImy-command\fR will be given an argument of 5.
.RE
.IP \fBh\fR
Horizontally add the next item, e.g.
.RS
.Me $emf-scheme
.CS
osd "h" "1st on line "
osd ""  "2nd on line"
.CE 0
.Me $ehf-scheme
.RE
.IP
Will  produce  "\fC1st on line 2nd on  line\fR". If there is not  enough
room on a single dialog line to display all the horizontally added
items then the line is split and as many lines as needed are used.
.IP \fBc\fR
Center the text for the item in the middle of the dialog.
.IP \fBr\fR
Right hand justify the text for the item.
.IP \fBt\fR
Set the items tab order in the dialog.
.IP \fBb\fR
Child inclusion is a scroll box type. By default a child inclusion
simply draws the whole child dialog at the  position. If this flag
is specified then arguments  "\fIwidth\fR" and "\fIdepth\fR" must also be supplied
and a  window  displaying  "\fIwidth\fR"  by  "\fIdepth\fR"  of the  child  is
created.   The  size  of  this  item  will  be   "\fIwidth\fR"+1+\fIss\fR   by
"\fIdepth\fR"+1+\fIss\fR  where  \fIss\fR is the  scroll  bar  size  which is 1 or 2
depending on the setting of
.Ht $scroll-bar 5 .
It is up to the user to
ensure that the child  dialog being  displayed is at least "\fIwidth\fR"
by "\fIdepth\fR" characters in size, if this is not true then the effect is undefined,  (a crash
dump is not out of the question).
.IP \fBf\fR
Fix  the  item  size to the  given  "\fIsize\fR",  by  default  an item is
expanded to the width of the dialog.
.IP \fBE\fR
Item  is an  entry  box  type.  Use a  string  of \fC#\fR's to set  the
position and size of the entry text box. Similar to Check-boxes,  the command
given must both return and set the value depending on value of the
argument given. The value must be returned in
.Ht $result 5
if the given argument  (or 1 for  '\fCf\fR') is  given,  and  the  value  must be set
(usually  using
.Ht @ml 4
or
.Ht @mc 4 )
if the  argument  is  negated.  The
absolute value of the argument is maintained.
.RS
.Me $emf-scheme
.CS
set-variable %entry-value "Hello world"

define-macro my-entry-set
    !if &equ @# -1
        set-variable %entry-value @ml "" %entry-value
    !else
        set-variable $result %entry-value
    !endif
!emacro

osd 200 1  "S" " &Enter text" 2
osd 200 2  "ExHf" %osd-entry-scheme "########" 1 my-entry-set
.CE 0
.Me $ehf-scheme
.RE
.IP \fBB\fR
Item is a Button  type. Add the last 2 characters of
.Ht $window-chars 5
to the text  string  given,  one on each  side, i.e. if the last two chars are
"[]" then:
.RS
.Me $emf-scheme
.CS
osd "B" " Okay "
.CE
.Me $ehf-scheme
will be drawn as "\fC[ Okay ]\fR". See also flag \fBT\fR.
.RE
.IP \fBT\fR
Item is a repeat type, this is typically  used with  buttons,  altering  their
execution  behavior. By default an item is only  executed  when the left mouse
button is released  while over the item.  However  when this flag is specified
the item is  executed  as soon as the left  mouse  button  is  pressed  and is
repeatedly  executed  until the  button is release or the mouse  moves off the
item. The delay between repeated executions is determined by the variables
.Ht $delay-time 5
and
.Ht $repeat-time 5 .
.IP \fBS\fR
Item is a  separator  type.  This is not often  required  as any item  without
anything to execute is  automatically  set to be a separator.  Occasionally  a
mouse-insensitive  item which can be  executed is  required,  typically a text
string with a hot key, e.g.
.RS
.Me $emf-scheme
.CS
osd 200 1  "S" " &Enter text" 2
osd 200 2  "ExHf" %osd-entry-scheme "########" 1 my-entry-set
.CE 0
.Me $ehf-scheme
will be drawn as "\fC[ Okay ]\fR"
.RE
.IP
Item 1 will have a hot-key which executes item 2 (as no command is given), but
it will not hi-light if the mouse is placed over it.
.IP \fBR\fR
Redraw  dialog.  Forces a redraw of the dialog when the item is executed. This
is not usually required as \fBosd\fR  generally works out for itself whether a
redraw is needed,  however,  sometimes it does not, most notably when the item
sets a variable that is displayed by another item as an entry, e.g.
.RS
.Me $emf-scheme
.CS
set-variable %entry-value "Hello world"

define-macro my-entry-set
    !if &equ @# -1
        set-variable %entry-value @ml "" %entry-value
    !else
        set-variable $result %entry-value
    !endif
!emacro

osd 200 1  "S" " &Enter text" 2
osd 200 2  "ExHf" %osd-entry-scheme "########" 1 my-entry-set
osd 200 3  "BxHcfiR" %osd-ebtt-scheme  " &Reset " f "set-variable %entry-value\\"\\""
.CE 0
.Me $ehf-scheme
.RE
.IP
If item 3 did not have flag  \fBR\fR set when  executed,  \fBosd\fR  would not
realize  that the change to value  \fC%entry-value\fR  affects the display and
the button would not appear to operate.
.IP \fBH\fR
Sets the item color scheme. Note that for scrolled  child items this only sets
the  scroll-box  color  scheme, the dialog  scheme is used for the rest of the
boarder.
.IP \fBG\fR
This flag is only  applicable  in grid  dialogs  (see flag  \fBG\fR  in dialog
creation). The current item will be drawn with a box around it using
.Ht $box-chars 5 . 
.IP \fBz\fR
Sets the item size, arguments "\fIwidth\fR" and "\fIdepth\fR" must be given.
.IP \fBN\fR
This flag only has an effect on entry item types, it selects  'New-line' style
text  entry  which  allows the user to enter  multiple  line of text using the
return key and to end the input using the tab key.
.LP
Note  that for a  non-sub-menu  item  type, if an  argument  is given  with no
command  then it is  assumed  that the number  given is the item  number to be
executed, see flag \fBS\fR for an example.
.RE
.SS "Dialog Exacution"
.na
\fIn\fR \fBosd\fR
.ad
.PP
This invocation with a single positive numeric argument executes the \fIn\fRth
dialog.
.SS "Returning Command Control"
.na
\fBosd\fR
.ad
.PP
An invocation of \fBosd\fR with no arguments
returns  control back to the \fBosd\fR from a  \fIcontrol-command\fR. Refer to
the \fBC\fR flag in the  create/reset  dialog  property for information and an
example.
.SS "Current Dialog Redraw"
.na
\fI-1\fR \fBosd\fR
.ad
.PP
Calling  osd  with  an  argument  of \-1  forces  the  complete  redrawing  of
current dialog and any sub-dialogs.  This is very useful when the execution of
one item may effect the appearance of another.
.SS "Redraw All Active Dialogs"
.na
\fI-2\fR \fBosd\fR
.ad
.PP
Calling  osd with an  argument  of \-2 forces the  complete  redrawing  of all
currently active osd dialogs. This is better than calling
.Ht screen-update 2
when only the osd dialogs need updating as it suffers less from flickering. 
.SH EXAMPLE
Refer to \fCosd.emf\fR, \fCuserstp.emf\fR,  \fCsearch.emf\fR,  \fCspell.emf\fR
and \fCorganize.emf\fR for examples of the OSD.
.SH "SEE ALSO"
.na
.Ht $osd-scheme 5 ,
.Ht $result 5 ,
.Ht $scroll-bar 5 .
.Ht $window-chars 5 .
.ad
.FH
