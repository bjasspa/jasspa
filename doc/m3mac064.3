.\" -*- nroff -*-
.\" This is part of the JASSPA MicroEmacs documentation files.
.\" Copyright (c) 2004 JASSPA (www.jasspa.com)
.\" See the file "me.nrs" for copying and conditions.
.\"
.Id $Id: m3mac064.3,v 1.3 2004-01-06 07:47:18 jon Exp $
.Im MicroEmacs command|macrodevelop
.so me.tni
.TH buffer-init 3
.XI buffer-init - "Initialize a buffer language template"
.XI buffer-init-hooks - "Initialize the buffer language template hooks"
.XI buffer-init-fhook - "Initialize the buffer file hooks"
.SH NAME
.Me "|buffer-init"
buffer-init \- Initialize a buffer language template.
.br
.Me "|buffer-init-hooks"
buffer-init-hooks \- Initialize the buffer language template hooks.
.br
.Me "|buffer-init-fhook"
buffer-init-fhook \- Initialize the buffer file hooks.
.Me $a
.SH SYNOPSIS
.na
.I n
.B buffer-init
.I name 
[\|\fIetf\fR\|]
.br 
.B buffer-init-hooks
.br
.B buffer-init-fhook
.I name
.ad
.SH DESCRIPTION
The 
.B buff-init
commands  prepare  the  operating  modes of a buffer for a language  template.
These   commands   operate  with   variables   defined  in  the  template  and
automatically  configure \*(mS to use the template. 
.PP
The commands are used in the hook files (hkXXX.emf - see 
.Hl "File Hooks" fileHooks 2 )
and simply the setting up of 
.Hl "File Language Templates" languageTemplates 2 
by automating common actions and integrating the configuration settings
made via 
.Ht buffer-setup 3 .
.PP
The hook file is declared from  \fCme.emf\fR or the user start up file binding
a file extension or magic string association with the hook file. i.e.
.RS
.Me $emf-scheme
.CS
-1 add-file-hook "-[*!]-[ \\t]*XXX.*-[*!]-"    fhook-XXX
 1 add-file-hook "^#!/.*XXX"                  fhook-XXX
.CE 
.Me $ehf-scheme
.RE
On loading a file which matches the 
.Ht add-file-hook 2 
definition  then the  \fChkXXX.emf\fR  file is  executed  and the  template is
applied to the file.
.PP
A basic template framework to be used with the \fBbuff-init\fR commands may be
defined as follows for a language template called \fIXXX\fR:-
.Me $emf-scheme
.CS
; File hook - initialize buffer on loading the file.
define-macro fhook-XXX
    set-variable $buffer-mask "luh1"
    @# buffer-init "XXX"
    buffer-init-hooks
!emacro

; buffer-init variables
set-variable .fhook-XXX.name "XXX Macro"
set-variable .fhook-XXX.setup &reg "/history" "fhook/XXX" "bdfghnopx"
set-variable .fhook-XXX.setup-mask "abdefghikmnoptux"
; Commenting configuration -- omit if not defined.
set-variable .fhook-XXX.comment "|#||#|# | #||"
; Additional commands -- omit if not defined.
set-variable .fhook-XXX.command-flag  "||"
set-variable .fhook-XXX.command-name  "||"
set-variable .fhook-XXX.command-nbind "||"
set-variable .fhook-XXX.command-kbind "||"
set-variable .fhook-XXX.command-desc  "||"
; Set up collapse or folding for XXX -- omit if not defined
set-variable .fhook-XXX.collapse-open  "^{"
set-variable .fhook-XXX.collapse-close "^}"
set-variable .fhook-XXX.collapse-mopen  "-1"
set-variable .fhook-XXX.collapse-mclose "1"
set-variable .fhook-XXX.collapse-mnext "-1"
; setup XXX item-list -- omit if not defined 
set-variable .fhook-XXX.item-list-s1 "^[ \\t]*func\\\\(\\\\w+\\\\)"
set-variable .fhook-XXX.item-list-r1 "^[ \\t]*end"
; Set up hilighting
!if &and &sin "h" .fhook-XXX.setup &band .hilight.flags 0x02 
    ; Hi-light XXX Mode
    !if &not &exi .hilight.XXX
        set-variable .hilight.XXX &pinc .hilight.next 1
    !endif

    0 hilight .hilight.XXX  2 50
    hilight .hilight.XXX 0 "#.*"          .scheme.comment
    hilight .hilight.XXX 1 "end"          .scheme.keyword
    hilight .hilight.XXX 1 "^[ \\t]*func" .scheme.function
    ; ... more ...

    ; Hilight numbers.            
    !if &band .hilight.flags 0x08
        ; hilight constants, e.g. numbers
        hilight .hilight.XXX 1 "[[:digit:]]+"       .scheme.constant
        hilight .hilight.XXX 1 "-[[:digit:]]+"      .scheme.constant
        hilight .hilight.XXX 1 "0[xX][[:xdigit:]]+" .scheme.constant
        hilight .hilight.XXX 1 "[[:digit:]]+\\.[[:digit:]]+"  .scheme.constant
        hilight .hilight.XXX 1 "-[[:digit:]]+\\.[[:digit:]]+" .scheme.constant
        hilight .hilight.XXX 1 "[[:digit:]]+\\.[[:digit:]]+f"  .scheme.constant
        hilight .hilight.XXX 1 "-[[:digit:]]+\\.[[:digit:]]+f" .scheme.constant
    !endif
!endif

; End the initialisation - call user extensions i.e. myXXX.emf
buffer-init-fhook "XXX"
.CE
.Me $ehf-scheme
.B buffer-init
is invoked from the buffer file hook 
.Hl fhook fileHooks 2
and is invoked with the numerical  argument  passed to the  \fIfhook\fR  macro
(specified  as  \fC$#\fR).  The call  takes  two  arguments,  the first is the
\fIname\fR  of the  template or hook, in the example  this is  \fIXXX\fR.  The
second argument is the \fIetf\fR template name (see 
.Ht etf 8 ).
The  command  initializes  the  buffer,  using the  \fI.fhook-XXX\fR  variable
information defined in the file. 
.PP
.B buffer-init-fhooks
is invoked from the buffer file hook 
.Hl fhook fileHooks 2
typically following the 
.B buffer-init
call  this  macro   invokes   any  user   defined   file  hooks  of  the  form
\fBmy-fhook-xx\fR. User defined  \fBmy-bhook-XXX\fR and \fBmy-ehook-XXX\fR are
configured into the buffer space ready for execution. 
.PP
.B buffer-init-fhook
is  placed at the end of the hook file  definition  and  retrieves  additional
configuration  information  from the  registry and the user  settings, it will
also locate and load any user additions to the template by loading the file 
\fCmyXXX.emf\fR.
.SS "Execution Sequence"
It is important to understand the execution sequence of the buffer hook files.
On identifying a new file hook then the  \fChkXXX.emf\fR  file is fetched from
the file system and  executed.  Execution  causes all of the  variables  to be
defined and finally, when all definitions have been made,
.B buffer-init-fhook 
is executed to load in any user defined extensions. At this point then 
the macro  \fBfhook-XXX\fR  (in our example  \fIfhook-XXX\fR\|)  has ONLY been
defined it has NOT been executed. This load  operation is performed  once only
and is performed on demand.
.PP
The  \fBfhook-XXX\fR  macro  must  be  defined  BEFORE  any  of the  variables
associated with the hook as all subsequent variables are command variables and
are defined in the context of the macro definition. See 
.Ht Variables 4 
for more information on macro variables.
.PP
Once  all  of  the  user   information   has  been   loaded   then  the  macro
\fBfhook-XXX\fR  is invoked,  this applies  hilighting,  buffer key  bindings,
indentation etc. to the newly loaded buffer.
.SS "Configuration Masks"
Buffer   initialization  is  controlled  by  the  settings  of  the  variables
\fB.fhook-XXX.setup\fR and \fBfhook-c.setup-mask\fR, for the 'C' language then
this is defined as:-
.Me $emf-scheme
.CS
set-variable .fhook-c.setup &reg "/history" "fhook/c" "bdfghnopx"
set-variable .fhook-c.setup-mask "abdefghikmnoptux>"
.CE 
.Me $ehf-scheme
The variables use an ASCII  configuration  string that identifies the modes of
operation that are required. Upper and lower case  alternatives are presented,
an uppercase flag disables the mode, lower case enables. Where the flag is not
specified then the mode is not changed.
.TP
\fCa\fR \- Auto mode
.\"
Automatic 
.Ht auto 2m
mode for automatic source file line type detection. Typically enabled for text
files. 
.TP
\fCb\fR \- Abbreviation mode
.\"
Configures the abbreviation mode using
.Ht buffer-abbrev-file 2 
for the buffer. 
.TP
\fCc\fR \- View / Author mode
.\"
Viewing
.Ht view 2m
mode for read only or authoring.
.TP
\fCd\fR \- Auto indentation operation.
.\"
Automatic indent is enabled. Where electric-c is required
then the flag \fC>\fR should be used in conjunction with 
the \fCd\fR flag, otherwise the indentation should be defined 
in the template using 
.Ht indent 2 .
.IP
Where 
.Ht indent 2m
mode is required then omit the \fCd\fR flag and use flag \fCi\fR instead.
.TP
\fCe\fR \- Exact or case sensitivity operation
.\"
Exact 
.Ht exact 2m 
case sensitive mode. \fCe\fR enable exact, \fCE\fR disable exact.
.TP
\fCf\fR \- Folding/Collapsing operation
.\"
Configures folding support, if enabled then the variables
\fI.fhook-XXX.collapse-OPERATION\fR, should be defined to declare the folding
points.
.TP
\fCg\fR \- Fence matching operation
.\"
Fence matching mode with 
.Ht fence 2m .
Note that fence matching is now typically  performed in the macro  environment
using 
.Ht display-matching-fence 3
rather than the in-built  fence  matching.  This colorizes the fences that are
matched. \fCg\fR enable fence matching, \fCG\fR disable fence matching.
.TP
\fCh\fR \- Hilighting
.\"
Support syntax hilighting, when defined then the hilighting scheme defined 
by \fI.hilight.XXX\fR is attached to the buffer.
.TP
\fCi\fR \- Automatic indentation
.\"
Support indentation using
.Ht indent 2m .
Automatic indentation defined with the \fCd\fR and optionally the \fC>\fR flag
where the in-built  electric-c is required.  \fCi\fR  enable  indent,  \fCJ\fR
disable indent.
.TP
\fCj\fR \- Justify
Support paragraph justification using
.Ht justify 2m . 
\fCj\fR enable justify, \fCJ\fR disable justify.
.TP
\fCk\fR \- Backup mode
.\"
Enable backups with
.Ht backup 2m 
mode. \fCk\fR enable backup, \fCK\fR disable backup.
.TP
\fCm\fR \- Magic mode
.\"
Regular expression 
.Ht magic 2m
mode. \fCm\fR enable magic, \fCM\fR disable magic.
.TP
\fCn\fR \- New buffer header
.\"
Enable the insertion of a buffer header from the 
.Ht etf 8 
template file.
.TP
\fCo\fR \- Tool menu
.\"
Enable the tool menu for the buffer.
.TP
\fCp\fR \- Help page
.\"
Produce a help page for the buffer describing the bindings.
.TP
\fCs\fR \- Auto spell
.\"
Enable automatic spelling for the buffer using
.Ht auto-spell 3 .
.TP
\fCt\fR \- Tab mode
.\"
Allow insertion of literal tabs by enabling
.Ht tab 2m 
mode. \fCt\fR enable tab, \fCT\fR disable tab.
.TP
\fCu\fR \- Undo
.\"
Maintain an undo/redo history using
.Ht undo 2m 
mode. \fCu\fR enable undo, \fCU\fR disable undo.
.TP
\fCw\fR \- Wrap
.\"
Enable wrapping using
.Ht wrap 2m 
mode. \fCw\fR enable wrap, \fCW\fR disable wrap.
.TP 
\fCx\fR \- Time stamping
.\"
Enable time stamping as defined by 
.Ht time 2m .
.TP
\fC>\fR \- Electric-c indentation.
.\"
A special internal flag indicating that indentation is
to be performed using 
.Ht cmode 2m .
This option 
should only be used when the \fCd\fR flag is also defined. 
The flag should only be present in the \fI.setup-mask\fR\|. 
.TP
\fC1\fR \- Reformatting hilighting
.\"
A special internal flag indicating that hilighting is used
for reformatting purposes, i.e. to make readable and hide control text.
.TP 
\fC#\fR \- Commenting
Special flag used to indicate commenting is supported. The comment format
should be defined with the \fI.fhook-XXX.comment\fR variable within the
template.
.LP
\fB.fhook-XXX.setup\fR is the default set-up, this is normally defined to take
settings  from the  registry  and  provides  defaults  when not defined.  This
is the only mask that is  allowed  to carry the  uppercase  flags. All  values
defined in  \fB.fhook-XXX.setup\fR  are  explicitly  enabled  or disabled by
default.  The  setup set  should  contain  the  configuration  flags  that are
required to make the template operate correctly, but should not include modes 
that the user may set up i.e. \fIexact\fR or \fImagic\fR etc. 
.PP
\fB.fhook-xx.setup-mask\fR  defines the set of flags that are allowed  with the
template. The configuration defined in  
.Ht buffer-setup 3 
is tested  against  the mask, if the mask  allows it then the mode is enabled.
\fB.fhook-XXX.setup\fR  is  generally a subset of  \fB.fhook-xx.setup-mask\fR.
.PP
.Ht buffer-setup 3 
operates    with   the   vales   defined   by    \fB.fhook-XXX.setup\fR    and
\fB.fhook-xx.setup-mask\fR.  The initialization of  \fB.fhook-XXX.setup\fR  is
performed using the registry as follows:-
.Me $emf-scheme
.CS
set-variable .fhook-XXX.setup &reg "/history" "fhook/XXX" "bdfghnopx"
.CE
.Me $ehf-scheme
This allows the user to configure over-ridding modes  via 
.Ht buffer-setup 3 .
The user configuration is saved to the
.Hl "Registry" Registry -
and restored using 
.Ht &reg 4 ,
when the variable is defined. The flags that are defined by 
.Ht buffer-setup 3 
include   \fCa\fR,  \fCb\fR,  \fCc\fR,  \fCd\fR,  \fCe\fR,  \fCf\fR,  \fCg\fR,
\fCh\fR,  \fCi\fR,  \fCj\fR,  \fCk\fR,  \fCm\fR,  \fCn\fR,  \fCo\fR,  \fCp\fR,
\fCs\fR, \fCt\fR, \fCu\fR, \fCw\fR, and \fCx\fR.
.SS Tags
Some language templates include a \fItags\fR  facility to generate a tags file
(See 
.Ht emftags 3f 
\- \fCemftags.emf\fR,
.Ht ctags 3f 
\- \fCctags.emf\fR,
.Ht ntags 3f 
\- \fCntags.emf\fR).
The buffer setup may be configured to add a tags generator to the language
template,this is added to the menu. A tag generator should be written for the
given language template and is declared to the template by assignment of the
\fB.fhook-XXX.tags\fR
variable .i.e for the 'C' Programming Language:-
.Me $emf-scheme
.CS
set-variable .fhook-c.tags "ctags"
.CE 
.Me $ehf-scheme
The  presence  of a  tags  generator  is  not  flagged  in  the  setup  flags,
declaration  of the  \fB.fhook-XXX.tags\fR  variable is  sufficient to declare
that a tags generator exists.
.SS Comments
The  format  of   comments   may  be  defined  in  the   template   using  the
\fB.fhook-XXX.comment\fR  variable.  Definition of the comment form allows the
comment  formatting to be  automatically  set up. Where the comment  format is
defined  then  the  following  key  bindings  are  automatically  added to the
template:-
.IP
\fCC-c C-s\fR \fBcomment-start\fR \- start a new comment.
.br
\fCC-c C-c\fR \fBcomment-line\fR \- comment out the current line.
.br
\fCC-c C-d\fR \fBuncomment-line\fR \- remove commenting from current line.
.br
\fCC-c C-e\fR \fBcomment-to-end-of-line\fR \- comment to end of line.
.br
\fCC-c C-r\fR \fBcomment-restyle\fR \- format/re-style comment.
.LP
Help  information  is  automatically  added to the buffer to describe  the key
bindings if help information is enabled.
.PP
The comment format is defined with the variable  \fB.fhook-XXX.comment\fR with
an argument string in the form "\fB|\fR
.I "<comment-start>"
.B |
.I "<comment-end>"
.B |
.I "<comment-pad>"
.B |
.I "<mid-box-left>"
.B |
.I "<mid-box-right>"
.B |
.I "<comment-flags>"
\fB|\fR".
Where the fields are defined as follows:-
.IP "<comment-start>"
The format of the start of the comment or comment open syntax.
.IP "<comment-end>"
The format of the closing  comment, where the comment exists to the end of the
line then the field is defined as empty.
.IP "<comment-pad>"
The  character  to use to pad a comment  between the  \fIcomment-start\fR and
\fI<comment-end>\fR characters when creating a line or a box formation.
.IP "<mid-box-left>"
The start of a comment continuation line when creating a box comment.
.IP "<mid-box-right>"
The end of a comment  continuation  line when  creating a box  comment and the
comment is not closed and continues on the next line.
.IP "<comment-flags>"
The comment flags define how the comment  should be formatted when  re-styled.
The flags are defined as single characters that describe the attributes.
Re-styling may include the following attributes:-
.RS
.BP "b"
Box format required, create a left and right edge for the comment.
.BP "f"
A footer line is required, a new line is created following the comment text to
contain  the with a closing  comment  \fI<comment-end>\fR  string.  The end of
comment is not padded.
.BP "F"
As \fBf\fR except the footer line is left padded with 
\fI<comment-pad>\fR strings.
.BP "h"
A header line is required, a new line is created before the comment text to
contain  the opening  comment  \fI<comment-start>\fR  string.  The end of
comment is not padded.
.BP "H"
As \fBh\fR except the header line is right padded with 
\fI<comment-pad>\fR strings.
.BP "j"
Enable justification mode in the *comment* buffer and re-style.
.RE
.PP
Examples of the comments format are shown below.
.BP "'C' Programming language"
Format: \fC/* ... */\fR
.LP
.RS
.Me $emf-scheme
.CS 0
set-variable .fhook-c.comment "|/*|*/|*| * | * |f|"
.CE 0
.RE
.Me $ehf-scheme
.IP
The comment output is defined as:-
.LP
.RS
.ne 6
.CS 0
/***************************************************************
 * This is a box comment                                       *
 ***************************************************************/

/* Comment to end of line **************************************/
.CE 0
.RE
.BP "C++ Programming language"
Format: \fC// ... <EOL>\fR
.LP
.RS
.Me $emf-scheme
.CS 0
set-variable .fhook-cpp.comment "|//||/|// | //||"
.CE 0
.Me $ehf-scheme
.RE
.IP
The comment output is defined as:-
.LP
.RS
.ne 6
.CS 0
/////////////////////////////////////////////////////////////////
// This is a box comment                                       //
/////////////////////////////////////////////////////////////////

// Comment to end of line ///////////////////////////////////////
.CE 0
.RE
.BP "MicroEmacs macro language"
Format: \fC; ... <EOL>\fR
.LP
.RS
.Me $emf-scheme
.CS 0
set-variable .fhook-emf.comment "|;||;|; | ;||"
.CE 0
.Me $ehf-scheme
.RE
.IP
The comment output is defined as:-
.LP
.RS
.ne 6
.CS 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Box Comment                                                   ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Comment to end of line ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
.CE 0
.RE
.BP "Shell script"
Format: \fC# ... <EOL>\fR
.LP
.RS
.Me $emf-scheme
.CS 0
set-variable .fhook-shell.comment "|#||#|# | #||"
.CE 0
.Me $ehf-scheme
.RE
.IP
The comment output is defined as:-
.LP
.RS
.ne 6
.CS 0
#################################################################
# Box Comment                                                   #
#################################################################

# Comment to end of line ########################################
.CE 0
.RE
.BP "MS-DOS Batch file"
Format: \fCrem ... <EOL>\fR
.LP
.RS
.Me $emf-scheme
.CS 0
set-variable .fhook-dos.comment "|rem |||rem |||"
.CE 0
.Me $ehf-scheme
.RE
.IP
The comment output is defined as:-
.LP
.RS
.ne 6
.CS 0
rem
rem Box Comment                                                             
rem                                                                           

rem Comment to end of line
.CE 0
.RE
.SH "SEE ALSO"
.na
.Ht add-file-hook 2 ,
.Ht buffer-abbrev-file 2 ,
.Ht $buffer-hilight 5 ,
.Ht $buffer-indent 5 ,
.Ht buffer-setup 3 ,
.Ht eaf 8 ,
.Ht etf 8 ,
.Ht etfinsrt 3 ,
.Ht execute-buffer 2 ,
.Ht expand-abbrev 2 ,
.Ht global-abbrev-file 2 ,
.Ht hilight 2 ,
.Ht indent 2 ,
.Ht indent 2m ,
.Ht restyle-buffer 3 ,
.Ht restyle-region 3 ,
.Ht scheme-editor 3 ,
.Ht time 2m ,
.br
.Hl "File Hooks" fileHooks 2 ,
.br
.Hl "File Language Templates" languageTemplates 2 .
.ad
.FH
