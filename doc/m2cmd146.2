.\" -*- nroff -*-
.Id $Id: m2cmd146.2,v 2.2 2001-07-14 10:10:46 jon Exp $
.Im MicroEmacs command|insert
.ds C0 "(\fB\*cy\fR)\ \&
.so me.tni
.TH yank 2
.XI yank - "\*(C0Paste (copy) kill buffer contents into buffer"
.SH NAME
yank \- Paste (copy) kill buffer contents into buffer
.Me $a
.SH SYNOPSIS
.na
.I n
\fByank\fR \*(C0
.ad
.SH DESCRIPTION
When a non negative argument is supplied to \fByank\fR, the command copies the
contents  of the kill  buffer  \fIn\fR  times into the  current  buffer at the
current  cursor  position.  This does not clear the kill buffer, and therefore
may be used to make multiple copies of a section of text. On windowing systems
which support clip-boards, such as windows and X-terms, \*(mS will also cut to
and paste from the global clip-board.
.PP
If \fIyank\fR is IMMEDIATELY followed by a
.Ht reyank 2
then the  \fIyanked\fR  text is replaced by text of the next entry in the kill
ring. (another  \fBreyank\fR  replaces the text with the previous  reyank text
and so on).
.PP
If an \-ve argument is given, \fByank\fR removes the last 0-\fIn\fR items from
the kill ring. 
.PP
Text is inserted into the kill buffer by one of the following commands:-
.IP
.na
.Ht backward-kill-word 2 ,
.Ht copy-region 2 ,
.Ht forward-kill-word 2 ,
.Ht kill-line 2 ,
.Ht kill-paragraph 2 ,
.Ht kill-region 2 ,
.Ht forward-delete-char 2 ,
.Ht backward-delete-char 2 .
.ad
.LP
All the above commands (except \fBcopy-region\fR) cut text out of the buffer,
the last 2 commands require the
.Ht letter 2m
mode enabled to add the text to the kill buffer. If any of these  commands are
executed immediately after any other (including itself) or the
.Ht @cl 4
variable is set to one of these  command, the new kill text is appended to the
last kill buffer text.
.SH NOTES
Windowing  systems such as X-Windows  and Microsoft  Windows  utilize a global
windowing kill buffer allowing data to be moved between windowing applications
.\"
(\fIcut   buffer\fR   and   \fIclipboard\fR,   respectively).   Within   these
environments  \*(mE  automatically  interacts with the windowing  systems kill
buffer,  the last  \*(mE kill  buffer  entry is  immediately  available  for a
\fIpaste\fR  operation  into  another  application  (regardless  of how it was
inserted into the kill buffer).  Conversely, data placed in the windowing kill
buffer  is  available  to  \*(mE,  via  \fByank\fR,  until a new item has been
inserted into the kill buffer (the data may still be available via
.Ht reyank 2 ).
.SH EXAMPLE
The  following  example is a basic macro code implementation of the
.Ht transpose-lines 2
command, 
.Me $emf-scheme
.CS
beginning-of-line
kill-line
forward-line
yank
-1 yank
backward-line
.CE
.Me $ehf-scheme
Note that similar to  \fBtranspose-lines\fR it does not leave the moved line in
the kill buffer, effectively tidying up after itself.
.SH "SEE ALSO"
.na
.Ht yank-rectangle 2 ,
.Ht copy-region 2 ,
.Ht kill-region 2 ,
.Ht letter 2m ,
.Ht reyank 2 ,
.Ht @cc 4 .
.ad
.rm C0
.FH
