.\"*-*- nroff -*-*************************************************************
.\"
.\"			Copyright 1999 Samsung (SERI) Ltd.
.\"			      All Rights Reserved
.\"
.\"
.\"  System        :
.\"  Module        :
.\"  Object Name   : m2nar006.2
.\"  Created By    : Jon Green
.\"  Created       : Thu Jun 17 22:26:42 1999
.\"  Last Modified : <000719.1013>
.\"
.\"  Description
.\"
.\"  Notes
.\"
.\"  History
.\"
.\"***************************************************************************
.\"
.\"  Copyright (c) 1999 Samsung (SERI) Ltd.
.\"
.\"  All Rights Reserved.
.\"
.\"  This  document  may not, in  whole  or in part, be  copied,  photocopied,
.\"  reproduced,  translated, or reduced to any  electronic  medium or machine
.\"  readable form without prior written consent from Samsung (SERI) Ltd.
.\"
.\"***************************************************************************
.\"
.Id $Id: m2nar006.2,v 1.2 2000-10-09 22:42:05 jon Exp $
.Im MicroEmacs search
.so me.tni
.TH "RegularExpressions" 2
.XI "RegularExpressions" - "Regular Expressions"
.SH "REGULAR EXPRESSIONS"
Regular  Expressions  are used in the search  (and  replace)  operations.  The
following notes are applicable when
.Ht magic 2m
mode is enabled.
.SS Overview
A "\fIregular  expression\fR" (or "\fIregex\fR", or "\fIpattern\fR") is a text
string that  describes  some  (mathematical)  set of strings. A regex  \fBR\fR
"\fImatches\fR" a string \fBS\fR if \fBS\fR is in the set of strings described
by \fBR\fR.
.PP
\*(mE includes the GNU \fBreg\fRular \fBexp\fRression pattern matcher library,
\fBregex\fR  which provides a powerful search engine, using the search engine
you can:
.BS
see if a string matches a specified pattern as a whole, and
.BU
search within a string for a substring matching a specified pattern.
.BE
Some regular  expressions  match only one string, i.e., the set they  describe
has only one member. For example, the regular expression  \'\fCfoo\fR' matches
the string  '\fCfoo\fR'  and no others. Other regular  expressions  match more
than one  string,  i.e., the set they  describe  has more than one member. For
example, the regular expression  '\fCf*\fR' matches the set of strings made up
of any number  (including zero) of '\fCf\fR's. As you can see, some characters
in regular  expressions  match  themselves  (such as '\fCf\fR') and some don't
(such as  '\fC*\fR');  the ones that do not match  themselves  instead let you
specify patterns that describe many different strings.
.SS "Syntax of Regular Expressions"
Regular  expressions  have a  syntax  in which a few  characters  are  special
constructs  and the rest are  "\fIordinary\fR".  An  ordinary  character  is a
simple regular  expression which matches that same character and nothing else.
The  special  characters  are  '\fC$\fR',   '\fC^\fR',  '\fC.\fR',  '\fC*\fR',
\'\fC+\fR',   '\fC?\fR',   '\fC[\fR',  '\fC]\fR'  and  '\fC\\\fR'.  Any  other
character  appearing in a regular  expression is ordinary, unless a '\fC\\\fR'
precedes it.
.PP
For  example,  '\fCf\fR' is not a special  character,  so it is ordinary,  and
therefore  '\fCf\fR' is a regular expression that matches the string '\fCf\fR'
and no  other  string.  (It  does  \fBnot\fR  match  the  string  '\fCff\fR'.)
Likewise, '\fCo\fR' is a regular expression that matches only '\fCo\fR'. (When
case  distinctions  are being ignored, these regexs also match  '\fCF\fR' and
\'\fCO\fR', but we consider this a generalization  of "\fIthe same string\fR",
rather than an exception.)
.PP
Any two  regular  expressions  \fCA\fR  and \fCB\fR can be  concatenated.  The
result is a regular  expression which matches a string if \fCA\fR matches some
amount of the  beginning  of that  string and \fCB\fR  matches the rest of the
string.
.PP
As a simple example, we can concatenate the regular expressions  '\fCf\fR' and
\'\fCo\fR' to get the regular  expression  '\fCfo\fR',  which matches only the
string '\fCfo\fR'. Still trivial. To do something  nontrivial, you need to use
one of the special characters. Here is a list of them.
.TP
\fB.\fR (Period)
.\"
is a special  character  that matches any single  character  except a newline.
Using  concatenation, we can make regular  expressions like '\fCa.b\fR', which
matches any  three-character  string that begins with  '\fCa\fR' and ends with
\'\fCb\fR'.
.TP
\fB*\fR (asterisk)
.\"
is not a construct by itself; it is a postfix operator that means to match the
preceding  regular  expression  repetitively  as many times as possible. Thus,
\'\fCo*\fR' matches any number of '\fCo\fR's (including no '\fCo\fR's).
.IP
\'\fC*\fR' always applies to the \fBsmallest\fR possible preceding expression.
Thus,  '\fCfo*\fR' has a repeating  '\fCo\fR', not a repeating  '\fCfo\fR'. It
matches '\fCf\fR', '\fCfo\fR', '\fCfoo\fR', and so on.
.IP
The matcher processes a '\fC*\fR' construct by matching,  immediately, as many
repetitions  as can be found. Then it continues  with the rest of the pattern.
If that fails,  backtracking  occurs,  discarding  some of the  matches of the
\'\fC*\fR'-modified construct in case that makes it possible to match the rest
of the  pattern.  For  example, in matching  '\fCca*ar\fR'  against the string
\'\fCcaaar\fR',  the '\fCa*\fR' first tries to match all three '\fCa\fR's; but
the rest of the  pattern is  '\fCar\fR'  and there is only  '\fCr\fR'  left to
match, so this try fails. The next alternative is for '\fCa*\fR' to match only
two '\fCa\fR's. With this choice, the rest of the regex matches successfully.
.IP
\fB+\fR (plus)
.\"
is a postfix  operator,  similar to  '\fC*\fR'  except  that it must match the
preceding  expression at least once. So, for example, '\fCca+r\fR' matches the
strings  '\fCcar\fR' and '\fCcaaaar\fR' but not the string '\fCcr\fR', whereas
\'\fCca*r\fR' matches all three strings.
.TP
\'\fB?\fR' (question mark)
.\"
is a postfix  operator,  similar  to  '\fC*\fR'  except  that it can match the
preceding  expression  either once or not at all. For  example,  \'\fCca?r\fR'
matches '\fCcar\fR' or '\fCcr\fR'; nothing else.
.TP
\fB[\fR ... \fB]\fR
.\"
is a  "character  set", which  begins  with  '\fC[\fR'  and is  terminated  by
\'\fC]\fR'. In the simplest case, the characters  between the two brackets are
what this set can match.
.IP
Thus,  '\fC[ad]\fR'  matches  either  one  '\fCa\fR'  or  one  '\fCd\fR',  and
\'\fC[ad]*\fR'  matches any string  composed of just '\fCa\fR's and '\fCd\fR's
(including  the empty  string),  from  which it follows  that  '\fCc[ad]*r\fR'
matches '\fCcr\fR', '\fCcar\fR', '\fCcdr\fR', '\fCcaddaar\fR', etc.
.IP
You can also  include  character  ranges in a  character  set, by writing  the
starting  and  ending   characters  with  a  '\fC-\fR'   between  them.  Thus,
\'\fC[a-z]\fR'  matches any lower-case  ASCII letter. Ranges may be intermixed
freely with individual characters, as in \'\fC[a-z$%.]\fR',  which matches any
lower-case ASCII letter or '\fC$\fR', '\fC%\fR' or period.
.IP
Note  that the  usual  regex  special  characters  are not  special  inside a
character set. A completely  different set of special characters exists inside
character sets: '\fC]\fR', '\fC-\fR' and '\fC^\fR'.
.IP
To  include  a  '\fC]\fR'  in a  character  set, you  must  make it the  first
character.  For  example,  '\fC[]a]\fR'  matches  '\fC]\fR' or  '\fCa\fR'.  To
include a \'\fC-\fR',  write  '\fC-\fR' as the first or last  character of the
set, or put it after a range. Thus,  '\fC[]-]\fR'  matches both  '\fC]\fR' and
\'\fC-\fR'.
.IP
To include  '\fC^\fR' in a set, put it anywhere  but at the  beginning  of the
set.
.IP
When you use a range in case-insensitive search, you should write both ends of
the range in upper case, or both in lower case, or both should be non-letters.
The  behavior  of  a  mixed-case   range  such  as   '\fCA-z\fR'  is  somewhat
ill-defined, and it may change in future Emacs versions.
.TP
\fB[^\fR ... \fB]\fR
.\"
\'\fC[^\fR'  begins a  "\fIcomplemented  character  set\fR", which matches any
character  except the ones specified. Thus,  '\fC[^a-z0-9A-Z]\fR'  matches all
characters *\fBexcept\fR* letters and digits.
.IP
\'\fC^\fR' is not special in a character set unless it is the first character.
The character following the '\fC^\fR' is treated as if it were first (in other
words, '\fC-\fR' and '\fC]\fR' are not special there).
.IP
A complemented  character set can match a newline, unless newline is mentioned
as one of the  characters not to match. This is in contrast to the handling of
regexs in programs such as
.Hr grep 1 .
.TP
\fB^\fR (caret)
.\"
is a  special  character  that  matches  the  empty  string,  but  only at the
beginning  of a line in the text being  matched.  Otherwise  it fails to match
anything.  Thus,  '\fC^foo\fR'  matches  a  '\fCfoo\fR'  that  occurs  at  the
beginning of a line.
.TP
\fB$\fR (dollar)
.\"
is  similar  to  '\fC^\fR'  but  matches  only  at the  end of a  line.  Thus,
\'\fCx+$\fR' matches a string of one '\fCx\fR' or more at the end of a line.
.TP
\fB\\\fR (backslash)
.\"
has two functions: it quotes the special  characters  (including  '\fC\\\fR'),
and it introduces additional special constructs.
.IP
Because  '\fC\\\fR'  quotes  special  characters,  '\fC\\$\fR'  is  a  regular
expression   that  matches  only  '\fC$\fR',  and  '\fC\\[\fR'  is  a  regular
expression that matches only '\fC[\fR', and so on.
.IP
\fBNote:\fR for historical  compatibility,  special  characters are treated as
ordinary  ones if they are in contexts  where their  special  meanings make no
sense. For example,  '\fC*foo\fR'  treats '\fC*\fR' as ordinary since there is
no preceding expression on which the '\fC*\fR' can act. It is poor practice to
depend on this behavior; it is better to quote the special  character  anyway,
regardless of where it appears.
.IP
For the most part,  '\fC\\\fR'  followed by any  character  matches  only that
character.  However,  there are several  exceptions:  two-character  sequences
starting with '\fC\\\fR' that have special  meanings. The second  character in
the sequence is always an ordinary  character  when used on its own. Here is a
table of '\fC\\\fR' constructs.
.RS
.TP
\fB\\|\fR (bar)
.\"
specifies an  alternative.  Two regular  expressions  \fCA\fR and \fCB\fR with
\'\fC\\|\fR'  in between form an  expression  that matches some text if either
\fCA\fR matches it or \fCB\fR matches it. It works by trying to match \fCA\fR,
and if that fails, by trying to match \fCB\fR.
.IP
Thus, '\fCfoo\\|bar\fR' matches either 'foo' or 'bar' but no other string.
.IP
\'\fC\\|\fR' applies to the largest possible  surrounding  expressions. Only a
surrounding  '\fC\\(  ... \\)\fR'  grouping  can limit the  grouping  power of
\'\fC\\|\fR'.
.IP
Full backtracking capability exists to handle multiple uses of '\fC\\|\fR'.
.TP
\fB\\(\fR ... \fB\\)\fR
.\"
is a grouping construct that serves three purposes:
.RS
.BS
To  enclose a set of  '\fC\\|\fR'  alternatives  for other  operations.  Thus,
\'\fC\\(foo\\|bar\\)x\fR' matches either '\fCfoox\fR' or '\fCbarx\fR'.
.BU
To enclose a  complicated  expression  for the postfix  operators  \'\fC*\fR',
\'\fC+\fR'  and  '\fC?\fR'  to operate on. Thus,  '\fCba\\(na\\)*\fR'  matches
\'\fCbananana\fR', etc., with any (zero or more) number of '\fCna\fR' strings.
.BU
To record a matched  substring for future  reference. This last application is
not a consequence  of the idea of a  parenthetical  grouping; it is a separate
feature  that is assigned as a second  meaning to the same '\fC\\( ... \\)\fR'
construct. In practice there is no conflict between the two meanings.
.BE 0
.RE
.TP
\'\fB\\D\fR'
matches the same text that matched the Dth occurrence of a `\fC\\(\fR ...
\fC\\)\fR' construct.
.IP
After the end of a '\fC\\( ... \\)\fR'  construct,  the matcher  remembers the
beginning and end of the text matched by that construct. Then, later on in the
regular  expression,  you can use '\fC\\\fR'  followed by the digit \fCD\fR to
mean "match the same text matched the \fCD\fRth  time by the  \'\fC\\(\fR  ...
\fC\\)\fR' construct."
.IP
The strings  matching  the first nine  '\fC\\(\fR  ...  \fC\\)\fR'  constructs
appearing  in a regular  expression  are  assigned  numbers 1 through 9 in the
order that the  open-parentheses  appear in the regular expression. So you can
use  '\fC\\1\fR'  through  '\fC\\9\fR'  to  refer to the text  matched  by the
corresponding '\fC\\(\fR ... \fC\\)\fR' constructs.
.IP
For  example,  '\fC\\(.*\\)\\1\fR'  matches  any  newline-free  string that is
composed of two identical halves. The '\fC\\(.*\\)\fR' matches the first half,
which may be anything,  but the  '\fC\\1\fR'  that follows must match the same
exact text.
.IP
If a particular  '\fC\\( ... \\)\fR'  construct  matches more than once (which
can easily  happen if it is  followed  by  '\fC*\fR'),  only the last match is
recorded.
.TP
\fC\\`\fR
.\"
matches the empty  string, but only at the  beginning  of the buffer or string
being matched against.
.IP
.B NOTE:
This  currently only matches the start of the current line - it does not match
the start of the buffer.
.TP
\fC\\'\fR
.\"
matches  the empty  string, but only at the end of the buffer or string  being
matched against.
.IP
.B NOTE:
This  currently  only  matches the end of the current line - it does not match
the end of the buffer.
.TP
\fC\\=\fR
.\"
matches the empty string, but only at point.
.TP
\fC\\b\fR
.\"
matches the empty  string, but only at the  beginning  or end of a word. Thus,
\'\fC\\bfoo\\b\fR'  matches any  occurrence of '\fCfoo\fR' as a separate word.
\'\fC\\bballs?\\b\fR'  matches  '\fCball\fR'  or  '\fCballs\fR'  as a separate
word.
.IP
\'\fC\\b\fR'  matches at the beginning or end of the buffer regardless of what
text appears next to it.
.IP
\fC\\B\fR
.\"
matches the empty string, but *not* at the beginning or end of a word.
.TP
\fC\\<\fR
.\"
matches the empty  string, but only at the  beginning of a word.  \'\fC\\<\fR'
matches at the  beginning of the buffer only if a  word-constituent  character
follows.
.TP
\fC\\>\fR
.\"
matches the empty string, but only at the end of a word.  '\fC\\>\fR'  matches
at the end of the  buffer  only if the  contents  end with a  word-constituent
character.
.TP
\fC\\w\fR
.\"
matches any  word-constituent  character.  The syntax table  determines  which
characters these are.
.TP
\fC\\W\fR
.\"
matches any character that is not a word-constituent.
.TP
\fC\\sC\fR
.\"
matches any  character  whose  syntax is \fCC\fR.  Here \fCC\fR is a character
that represents a syntax code: thus, '\fCw\fR' for word constituent, '\fC-\fR'
for whitespace,  '\fC(\fR' for open parenthesis, etc. Represent a character of
whitespace (which can be a newline) by either '\fC-\fR' or a space character.
.TP
\fC\\SC\fR
.\"
matches any character whose syntax is not \fCC\fR.
.TP
\fC\\{N,M\\}\fR
.\"
Matches an integer  number of the previous item, where \fCN\fR and \fCM\fR are
integer constants interpreted as follows:-
.RS
.TP
\fC\\{N\\}\fR
.\"
The preceeding item is matched exactly \fCN\fR times.
.TP
\fC\\{N,\\}\fR
The preceeding item is matched \fCN\fR or more times.
.TP
\fC\\{N,M\\}\fR
.\"
The  preceeding  item is  matched  at least  \fCN\fR  times, but no more than
\fCM\fR times.
.TP
\fC\\{,M\\}\fR
.\"
The preceeding item is optional and is matched at most \fCM\fR times.
.RE
.RE
.LP
The constructs  that pertain to words and syntax are controlled by the setting
of the syntax table.
.SS "Syntax of Replacement Expressions"
A regular expression replacement,
.Ht query-replace-string 2
command (with
.Ht magic 2m
mode  enabled),  replaces  exact  matches for a single  string or pattern. The
replacement  pattern  may be a  constant;  it may also refer to all or part of
what is matched by the regular expression search string.
.TP
\fB\\&\fR
.\"
In the  replacement  pattern,  \fB\\&\fR  stands  for the entire  match  being
replaced. (as does \fC\\0\fR).
.TP
\fB\\D\fR
.\"
In the replacement  pattern, where \fBD\fR is a digit 1-9, stands for whatever
matched the Dth  parenthesized  grouping (\fC\\( .. \\)\fR) in search pattern.
To  include  a  '\fC\\\fR'  in the  text  to  replace  with,  you  must  enter
\'\fC\\\\\fR'. For example,
.RS
.CS
M-x query-replace-string<RET> c[ad]+r <RET> \\&-safe <RET>
.CE 0
.RE
.IP
replaces (for example)  "\fCcadr\fR" with  "\fCcadr-safe\fR"  and "\fCcddr\fR"
with "\fCcddr-safe\fR".
.RS
.CS
M-x query-replace-string<RET> \\(c[ad]+r\\)-safe <RET> \\1 <RET>
.CE 0
.RE
.IP
performs the inverse transformation.
.IP
\fB\\0\fR is a special case, this  represents the whole of the search pattern,
it is equivalent to \fB\\&\fR.
.SS "Searching and Case"
Searching may be either case sensitive or case  insensitive, and is controlled
by the
.Ht exact 2m
mode. When  \fIexact\fR  mode is enabled  (default) the then searches are case
sensitive; disabled then case is ignored. The
.Ht exact 2m
mode is set on a per-buffer basis.
.SH "NOTES"
The  search  engine  searches  for the  longest  string  that  matches a given
pattern, the longest  pattern is  sometimes  the pattern  that is not actually
required.  For instance,  consider  searching  for an  HTML  bracket  set.  The
simplest search is:-
.CS
M-x search-forward "<.*>"
.CE
Unfortunately, this pattern is not specific enough, given an HTML line:-
.CS
<a href="www.jasspa.com">Jasspa Site</a>
.CE
Then the pattern  matched is actually  the whole line as the \fC.*\fR  matches
everything  to the last  \fC>\fR,  this is the longest  string. To rectify the
pattern then we must be more  specific, the correct  search  pattern to use in
this instance is:-
.CS
M-x search-forward "<[^>]*>"
.CE
In this case we match any  character  excluding  the closing  character,  this
guarantees that we always find the shortest string match. A search of our HTML
line   locates   two   separate    instances   of   the   regular   expression
\fC<a\ href="www.jasspa.com">\fR and \fC</a>\fR.
.SH "SEE ALSO"
.na
.Ht search-forward 2 ,
.Ht search-backward 2 ,
.Ht buffer-mode 2  ,
.Ht exact 2m ,
.Ht hunt-backward 2 ,
.Ht hunt-forward 2 ,
.Ht isearch-forward 2 ,
.Ht magic 2m ,
.Ht replace-string 2 .
.ad
.FH
