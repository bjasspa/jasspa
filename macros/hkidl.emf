;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;  Created By    : Jon Green
;  Created       : Fri Oct 22 16:44:08 1999
;  Last Modified : <010228.0956>
;
;  Description   : OMG IDL Syntax hilighting.
;
;  Notes         : This is based on the C++ template to perform
;                  hilighting of OMG's IDL. Restyle and folding
;                  are enabled.
;
;  Copyright (c) 1999 JASSPA
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; buffer-setup flags
set-variable #l0 &reg "/history" "fhook/idl" "dfhnopx"
set-variable #l1 "adefhikmnoptux>"

!if &and &sin "h" #l0 &band .hilight.flags 0x02 
    !if &not &exist .hilight.idl
        set-variable .hilight.idl &pinc .hilight.next 1
    !endif
    ;
    ; High-light IDL Mode
    ;
    0 hilight .hilight.idl  3 50             $global-scheme
    hilight .hilight.idl 0x3a "#" "\\"       .scheme.prepro
    hilight .hilight.idl   18 "//"           .scheme.comment
    hilight .hilight.idl   20 "/\\*" "*/" "" .scheme.comment
    hilight .hilight.idl    4 "\"" "\"" "\\" .scheme.string
    hilight .hilight.idl    4 "<" ">" ""     .scheme.keyword
    hilight .hilight.idl    0 "'.'"          .scheme.quote
    hilight .hilight.idl    0 "'\\\\.'"      .scheme.quote
    hilight .hilight.idl    0 "'\\\\'"       .scheme.error
    hilight .hilight.idl    0 "'\\\\''"      .scheme.quote
    !if &band .hilight.flags 0x04
        hilight .hilight.idl    0 "^[[:alpha:]][0-9a-zA-Z_:]*\\}\\s (" .scheme.function
        hilight .hilight.idl    0 "^[[:alpha:]][0-9a-zA-Z_:]*\\}(" .scheme.function
    !endif
    hilight .hilight.idl    0 "^\\w+\\}:"    .scheme.link
    ; keywords
    hilight .hilight.idl    1 "attribute"    .scheme.keyword
    hilight .hilight.idl    1 "case"         .scheme.keyword
    hilight .hilight.idl    1 "context"      .scheme.keyword
    hilight .hilight.idl    1 "default"      .scheme.keyword
    hilight .hilight.idl    1 "else"         .scheme.keyword
    hilight .hilight.idl    1 "exception"    .scheme.keyword
    hilight .hilight.idl    1 "fixed"        .scheme.keyword
    hilight .hilight.idl    1 "goto"         .scheme.keyword
    hilight .hilight.idl    1 "if"           .scheme.keyword
    hilight .hilight.idl    1 "in"           .scheme.keyword
    hilight .hilight.idl    1 "inout"        .scheme.keyword
    hilight .hilight.idl    1 "interface"    .scheme.keyword
    hilight .hilight.idl    1 "module"       .scheme.keyword
    hilight .hilight.idl    1 "oneway"       .scheme.keyword
    hilight .hilight.idl    1 "operator"     .scheme.keyword
    hilight .hilight.idl    1 "out"          .scheme.keyword
    hilight .hilight.idl    1 "raises"       .scheme.keyword
    hilight .hilight.idl    1 "readonly"     .scheme.keyword
    hilight .hilight.idl    1 "sequence"     .scheme.keyword
    hilight .hilight.idl    1 "string"       .scheme.keyword
    hilight .hilight.idl    1 "switch"       .scheme.keyword
    hilight .hilight.idl    1 "union"        .scheme.keyword
    hilight .hilight.idl    1 "wstring"      .scheme.keyword
    ; types
    hilight .hilight.idl    1 "any"          .scheme.type
    hilight .hilight.idl    1 "boolean"      .scheme.type
    hilight .hilight.idl    1 "char"         .scheme.type
    hilight .hilight.idl    1 "complex"      .scheme.type
    hilight .hilight.idl    1 "const"        .scheme.type
    hilight .hilight.idl    1 "double"       .scheme.type
    hilight .hilight.idl    1 "enum"         .scheme.type
    hilight .hilight.idl    1 "float"        .scheme.type
    hilight .hilight.idl    1 "long"         .scheme.type
    hilight .hilight.idl    1 "object"       .scheme.type
    hilight .hilight.idl    1 "octet"        .scheme.type
    hilight .hilight.idl    1 "short"        .scheme.type
    hilight .hilight.idl    1 "signed"       .scheme.type
    hilight .hilight.idl    1 "struct"       .scheme.type
    hilight .hilight.idl    1 "template"     .scheme.type
    hilight .hilight.idl    1 "typedef"      .scheme.type
    hilight .hilight.idl    1 "union"        .scheme.type
    hilight .hilight.idl    1 "unsigned"     .scheme.type
    hilight .hilight.idl    1 "void"         .scheme.type
    hilight .hilight.idl    1 "wchar"        .scheme.type
    ; Pre-processor directives
    hilight .hilight.idl    0 "TRUE"         .scheme.prepro
    hilight .hilight.idl    0 "FALSE"        .scheme.prepro
!endif
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Bunch of idl macros we may need.
;
; setup fuctions to auto-load from cmacros & cbox
define-macro-file cmacros c-start-comment
define-macro-file cbox c-box

define-macro fhook-idl
    ; if arg is 0 this is a new file so add template
    !if &not @#
        etfinsrt "idl"
    !endif
    set-variable $buffer-mask "luh1"
    buffer-initialize
    ; execute user extensions if enabled
    !if &exist my-fhook-idl
        my-fhook-idl
    !endif
!emacro
set-variable .fhook-idl.setup #l0
set-variable .fhook-idl.setup-mask #l1
set-variable .fhook-idl.comment "|//||*|"
set-variable .fhook-idl.command-flag  "|thb|thb|thbo|bo|"
set-variable .fhook-idl.command-name  "|normal-tab|c-start-comment|c-box|c-box|"
set-variable .fhook-idl.command-nbind "|||||"
set-variable .fhook-idl.command-kbind "|A-tab|esc C-c|esc q|esc o|"
set-variable .fhook-idl.command-desc  "|&Insert tab|Start co&mment|Restyle c&omment||"

set-variable .fhook-idl.fold-open  "^{"
set-variable .fhook-idl.fold-close "^}"

ml-write "[OMG IDL file hook loaded]"

; load in user extensions if found
!force execute-file "myidl"
