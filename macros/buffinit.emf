;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;  Created By    : Steven Phillips
;  Created       : Fri Nov 24 00:09:57 2000
;
;  Description   : Buffer initialization routines
;
;  Notes
;      By setting a few .fhook-foo.??? variables most features and tools
;      can be setup generically using the routines in this macro file
;      and buffstp.emf. See the header of buffstp.emf for more info.
;
;  Copyright (c) 2000-2001 JASSPA.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

define-macro-file spellaut auto-spell auto-spell-buffer auto-spell-reset
define-macro-file fold fold-current fold-all

0 define-macro buffer-initialize-modes
    set-variable #l1 &ind &spr ".%s.setup" $buffer-fhook
    ; setup buffer modes
    !if &sin "e" #l1
        1 buffer-mode "exact"
    !elif &sin "E" #l1
        -1 buffer-mode "exact"
    !endif
    !if &sin "m" #l1
        1 buffer-mode "magic"
    !elif &sin "M" #l1
        -1 buffer-mode "magic"
    !endif
    !if &sin "d" #l1
        ; if auto-indent enabled don't enable indent mode
        !if &sin ">" &ind &spr ".%s.setup-mask" $buffer-fhook
            1 buffer-mode "cmode"
        !else
            set-variable $buffer-indent &ind &cat ".hilight." &rig $buffer-fhook 6
        !endif
    !elif &sin "i" #l1
        1 buffer-mode "indent"
    !elif &sin "I" #l1
        -1 buffer-mode "indent"
    !endif
    !if &sin "j" #l1
        1 buffer-mode "justify"
    !elif &sin "J" #l1
        -1 buffer-mode "justify"
    !endif
    !if &sin "w" #l1
        1 buffer-mode "wrap"
    !elif &sin "W" #l1
        -1 buffer-mode "wrap"
    !endif
    !if &sin "t" #l1
        1 buffer-mode "tab"
    !elif &sin "T" #l1
        -1 buffer-mode "tab"
    !endif
    !if &sin "x" #l1
        1 buffer-mode "time"
    !elif &sin "X" #l1
        -1 buffer-mode "time"
    !endif
    !if &sin "a" #l1
        1 buffer-mode "auto"
    !elif &sin "A" #l1
        -1 buffer-mode "auto"
    !endif
    !if &sin "k" #l1
        1 buffer-mode "backup"
    !elif &sin "K" #l1
        -1 buffer-mode "backup"
    !endif
    ; setup fence displaying - is the dmf extension being used?
    !if .display-matching-fence.dmf
        set-variable &ind &spr ".%s.dmf" $buffer-fhook &cond &sin "G" #l1 0 .display-matching-fence.dmf
    !elif &sin "G" #l1
        -1 buffer-mode "fence"
    !endif
    !if &sin "u" #l1
        1 buffer-mode "undo"
    !elif &sin "U" #l1
        -1 buffer-mode "undo"
    !endif
!emacro

; setup buffer bindings
; Create a buffer binding
;     buffer-bind-create <flag> <kbind> <narg> <command>
0 define-macro buffer-bind-create
    set-variable #l1 @1
    set-variable #l2 @2
    !if &not &sin "i" #l1
        !if &exi .buffer-bind-key.map-from
            !if &not &set #l0 &lfind .buffer-bind-key.map-from #l2
                !return
            !elif &seq &set #l2 &lget .buffer-bind-key.map-to #l0 ""
                !return
            !endif
        !endif
    !endif
    !if &not &sin "o" #l1
        !if &not &seq &cbind #l2 "ERROR"
            !return
        !endif
    !endif
    set-variable #l3 @3
    set-variable #l4 @4
    !if &seq #l3 ""
        buffer-bind-key #l4 #l2
    !else
        #l3 buffer-bind-key #l4 #l2
    !endif
!emacro

0 define-macro buffer-initialize
    set-variable #l0 &ind &spr ".%s.setup" $buffer-fhook
    set-variable #l1 &ind &spr ".%s.command-flag"  $buffer-fhook
    set-variable #l2 &ind &spr ".%s.command-kbind" $buffer-fhook
    set-variable #l3 &ind &spr ".%s.command-nbind" $buffer-fhook
    set-variable #l4 &ind &spr ".%s.command-name"  $buffer-fhook
    buffer-initialize-modes
    set-variable #l7 0
    !if &sin "h" #l0
        !if &band .hilight.flags 0x02 
            !jump 2
        !else &and &band .hilight.flags 0x01 &sin "1" &ind &spr ".%s.setup-mask" $buffer-fhook
            set-variable #l7 1
            set-variable $buffer-hilight &ind &cat ".hilight." &rig $buffer-fhook 6
        !endif
    !endif
    !if &sin "b" #l0
        !force buffer-abbrev-file &rig $buffer-fhook 6
    !endif
    set-variable #l6 0
    !while &not &seq "" &set #l5 &lget #l1 &inc #l6 1
        !if &sin "b" #l5
            !if &not &sin "H" #l5
                !jump 2
            !elif #l7
                !force buffer-bind-create #l5 &lget #l2 #l6 &lget #l3 #l6 &lget #l4 #l6
            !endif
        !endif
    !done
    !if &sin "d" #l0
        buffer-bind-create "bi" "C-tab" "" normal-tab
    !endif
    set-variable #l5 &ind &spr ".%s.comment" $buffer-fhook
    !if &not &seq &lget #l5 1 ""
        buffer-bind-create "b" "C-c C-s" "" comment-start
        buffer-bind-create "b" "C-c C-c" "" comment-line
        buffer-bind-create "b" "C-c C-d" "" uncomment-line
        buffer-bind-create "b" "C-c C-e" "" comment-to-end-of-line
        buffer-bind-create "b" "C-c C-r" "" comment-restyle
    !endif
    !if &sin "f" #l0
        buffer-bind-create "b" "f2" "" fold-current 
        buffer-bind-create "b" "f3" "" fold-all 
    !endif
    !if &sin "s" #l0
        !if &not &seq %language "Default"
            buffer-bind-create "b" "f5"   0  auto-spell
            buffer-bind-create "b" "S-f5" "" auto-spell-buffer 
            buffer-bind-create "b" "f6"   "" auto-spell-reset 
            !if &reg "/history" "spell/autospell" "0"
                1 auto-spell
            !endif
        !endif
    !endif
!emacro

0 define-macro buffer-initialize-hooks
    ; execute user extensions if defined
    set-variable #l0 &rig $buffer-fhook 6
    !if &exist &cat "my-fhook-" #l0
        execute-named-command &cat "my-fhook-" #l0
    !endif
    !if &exist &cat "my-bhook-" #l0
        !if &seq $buffer-bhook ""
            set-variable $buffer-bhook &cat "my-bhook-" #l0
        !endif
    !endif
    !if &exist &cat "my-ehook-" #l0
        !if &seq $buffer-ehook ""
            set-variable $buffer-ehook &cat "my-ehook-" #l0
        !endif
    !endif
!emacro
