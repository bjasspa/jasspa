; -!- emf -!-
; This is part of the JASSPA MicroEmacs macro files
; Copyright (C) 2002 JASSPA (www.jasspa.com)
; See the file me.emf for copying and conditions.
;
; Created:     Mon Jan 14 2002
; Synopsis:    JST export macros
; Authors:     Steven Phillips
;
define-macro jst-prepare-header
    -1 buffer-mode "exact"
    beginning-of-buffer
    search-forward "^[^>]"
    !if $window-line
        set-variable #l0 &sub 1 $window-line
        beginning-of-buffer
        !force #l0 search-forward "^>[ \t]*title:[ \t]*\\(.+\\)"
        !if $status
            set-variable :title @s1
        !endif
        beginning-of-buffer
        !force #l0 search-forward "^>[ \t]*authors?:[ \t]*\\(.+\\)"
        !if $status
            set-variable :author @s1
        !endif
        beginning-of-buffer
        !force #l0 search-forward "^>[ \t]*created:[ \t]*\\(.+\\)"
        !if $status
            set-variable :created @s1
        !endif
    !endif        
!emacro

define-macro jst-insert-bullet-string
    set-variable #l0 &add @1 1
    set-variable @1 #l0
    set-variable #l1 @2
    !if &seq &lef #l1 1 "D"
        insert-string &cat "\bB" #l1
    !elif &seq &lef #l1 1 "N"
        insert-string &spr "\bB%s%d\bB)" #l1 #l0
    !elif &iseq &lef #l1 1 "R"
        ; roman numberals
        set-variable #l2 &spr "%n%s" &div #l0 10 "X" &lget "|I|II|III|IV|V|VI|VII|VIII|IX|" &mod #l0 10
        !if &sgr &lef #l1 1 "Z"
            set-variable #l2 &slo #l2
        !endif
        insert-string &spr "\bB%s%s\bB)" #l1 #l2
    !else
        set-variable #l2 &itoa &add #l0 64
        !if &sgr &lef #l1 1 "Z"
            set-variable #l2 &slo #l2
        !endif
        insert-string &spr "\bB%s%s\bB)" #l1 #l2 
    !endif
!emacro

define-macro jst-prepare-section
    ; Identify bullet lists
    ; indent tolerance
    set-variable #l9 &div $tabsize 2
    set-variable $window-line #p0
    !force &sub $window-line #p1 search-forward "^\n[ \t]*\\(\\*\\|[0-9]+[]).]\\|[a-zA-Z][]).]\\|[ivxlc]+[]).]\\)[ \t]+\\S "
    !while $status
        set-variable #l3 @s1
        !if &seq &lef #l3 1 "*"
            set-variable #l4 "D" 
            set-variable #l3 "^[ \t]*\\*[ \t]+\\S "
        !elif &xse &lef #l3 1 "[0-9]"
            set-variable #l4 &cat "N" &xir #l3 "[0-9]+\\(.\\).*" "\\1"
            set-variable #l3 "^[ \t]*[0-9]+[]).][ \t]+\\S "
        !else
            !if &isin "i" #l3
                ; roman numberals?
                set-variable #l4 "R"
            !else
                set-variable #l4 "A"
            !endif
            !if &sgr &lef #l3 1 "Z"
                set-variable #l4 &slo #l4
            !endif
            set-variable #l4 &cat #l4 &xir #l3 "[A-Za-z]+\\(.\\).*" "\\1"
            set-variable #l3 "^[ \t]*[A-Za-z]+[]).][ \t]+\\S "
        !endif
        set-variable #l0 $window-line
        backward-char
        set-variable #l5 $window-col
        beginning-of-line
        search-forward "^[ \t]*"
        set-variable #l1 $window-acol
        &sub #l5 $window-col forward-delete-char
        -1 yank
        set-variable #l7 0
        insert-string "\bBE"
        jst-insert-bullet-string #l7 #l4
        set-variable #l2 0
        !repeat
            forward-line
            !if &not &seq @wl ""
                beginning-of-line
                !force -1 search-forward #l3
                !if $status
                    backward-char
                    set-variable #l5 $window-col
                !else
                    set-variable #l5 -1
                !endif
                beginning-of-line
                search-forward "^[ \t]*"
                !if &gre #l5 -1
                    !if &gre &sub #l1 $window-acol #l9
                        ; end of these bullets
                        set-variable #l2 1
                    !elif &gre &sub $window-acol #l1 #l9
                        ; a sub bullet list - ignore
                    !else
                        &sub #l5 $window-col forward-delete-char
                        -1 yank
                        jst-insert-bullet-string #l7 #l4
                        set-variable #l6 $window-line
                        beginning-of-line
                        search-backward "\\S "
                        forward-char
                        insert-string &cat "\bb" &lef #l4 1
                        set-variable $window-line #l6
                    !endif
                !elif &les &sub $window-acol #l1 2
                    ; very close to the starting indent - end bullets
                    set-variable #l2 1
                !endif
            !endif
            !if &not &gre #p1 $window-line
                set-variable #l2 1
            !endif
        !until #l2
        beginning-of-line
        search-backward "\\S "
        forward-char
        insert-string &spr "\bb%s\bbE" &lef #l4 1
        ; find the next set of bullets
        set-variable $window-line #l0
        end-of-line
        !force &sub $window-line #p1 search-forward "^\n[ \t]*\\(\\*\\|[0-9]+[]).]\\|[a-zA-Z][]).]\\|[ivxlc]+[]).]\\)[ \t]+\\S "
    !done
    
    ; find the indent of the first non-blank line (possibly a header) and use
    ; this as a base line 
    set-variable $window-line #p0
    !force &sub $window-line #p1 search-forward "^[ \t]*\\S "
    !if $status
        backward-char
        set-variable #l3 $window-acol
    !else
        set-variable #l3 0
    !endif
    
    set-variable $window-line #p0
    !if #p2
        search-forward "^[ \t]*"
        $window-col backward-delete-char
        -1 yank
        search-forward "^[0-9.]*"
        set-variable #l2 @s0
        !if &seq &rig #l2 &sub &len #l2 2 ".0"
            backward-delete-char
            backward-delete-char
            set-variable #l2 &lef #l2 &sub &len #l2 2
            !if &seq #l2 "0"
                ; === header line 
                backward-delete-char
                forward-delete-char
            !elif &seq #l2 "0.0"
                ; --- header line 
                backward-delete-char
                backward-delete-char
                backward-delete-char
                forward-delete-char
            !endif
        !endif
        beginning-of-line
        !if &gre &len #l2 &len &rep #l2 "." ""
            insert-string "\bS3"
            end-of-line
            insert-string "\bs3"
        !else
            insert-string "\bS2"
            end-of-line
            insert-string "\bs2"
        !endif
        forward-line
    !endif
    set-variable #l2 0
    set-variable #l4 #l3
    !while &les $window-line #p1
        !if &not &seq @wl ""
            beginning-of-line
            search-forward "^[ \t]*"
            set-variable #l5 $window-acol
            $window-col backward-delete-char
            -1 yank
            !if &not &les &sub #l5 #l4 $tabsize
                set-variable #l4 #l5
                set-variable #l2 &add #l2 1
                insert-string "\bLT"
            !elif &not #l2
                ; can't negative indent
            !elif &not &less &sub #l4 #l5 $tabsize
                set-variable #l4 #l5
                set-variable #l6 $window-line
                search-backward "\\S "
                forward-char
                insert-string "\blT"
                set-variable $window-line #l6
                set-variable #l2 &sub #l2 1
            !endif
            forward-line
            !if &seq @wl ""
                ; a one line paragraph
                backward-line
                beginning-of-line
                search-forward "^\\(\bLT\\)*"
                insert-string "\bLP"
                end-of-line
                insert-string "\blP"
            !else
                ; a no-format paragraph
                backward-line
                beginning-of-line
                search-forward "^\\(\b..\\)*"
                insert-string "\bLC"
                !repeat
                    search-forward "^[ \t]*"
                    !if &gre $window-acol #l5
                        set-variable $window-acol #l5
                    !endif
                    $window-col backward-delete-char
                    -1 yank
                    forward-line
                !until &seq @wl ""
                search-backward "\\S "
                forward-char
                insert-string "\blC"
            !endif
            forward-line
        !endif
        forward-line
    !done
    !if #l2
        ; rebalance the indents
        beginning-of-line
        search-backward "\\S "
        forward-char
        #l2 insert-string "\blT"
    !endif
!emacro

define-macro jst-prepare-doc
    1 buffer-mode "magic"
    ; clean the buffer
    1 clean
    ; Get the header
    jst-prepare-header
    ; must use exact
    1 buffer-mode "exact"
    ; Find any dividing lines
    beginning-of-buffer
    replace-string "^\n___+\n\n?" "\n\bLL\n\n"
    beginning-of-buffer
    replace-string "^\n---+\n\n?" "\n\bLL\n\n"
    ; replace any === & --- header lines with 0.0 & 0.0.0 sections
    beginning-of-buffer
    replace-string "^\\(.*\\S .*\\)\n===+\n\n?" "0.0 \\1\n\n"
    beginning-of-buffer
    replace-string "^\\(.*\\S .*\\)\n---+\n\n?" "0.0.0 \\1\n\n"
    ; change bold *....* to easily found labels
    beginning-of-buffer
    replace-string "\\([^*]\\)\\*\\([^ \t*]\\([^*\n]\\|\\*\\*\\)*\\)\\*" "\\1\bFB\\2\bfB"
    ; change italic ~....~ to easily found labels
    beginning-of-buffer
    replace-string "\\([^~]\\)~\\([^ \t~]\\([^~\n]\\|~~\\)*\\)~" "\\1\bFI\\2\bfI"
    ; change underline _...._ to easily found labels
    beginning-of-buffer
    replace-string "\\([^_]\\)_\\([^ \t_]\\([^_\n]\\|__\\)*\\)_" "\\1\bFU\\2\bfU"
    ; change hilight `....' to easily found labels
    beginning-of-buffer
    replace-string "\\([^`]\\)`\\(\\([^']\\|''\\)*\\)'" "\\1\bFH\\2\bfH"
    ; format all paragraphs to a single line
    beginning-of-buffer
    65536 paragraph-to-line
    ; remove any 'don't format paragraph tokens
    beginning-of-buffer
    replace-string "^>\\." "  "
    beginning-of-buffer
    replace-string "^>_" "  "
    beginning-of-buffer
    replace-string "^>@" "  "
    ; remove any comment lines
    beginning-of-buffer
    replace-string "^>.*\n" ""
    ; loop through each section trying to normalize the indentation
    beginning-of-buffer
    ; delete-blank-lines - doesn't work!
    set-mark
    search-forward "\\S "
    beginning-of-line
    kill-region
    -1 yank
    ; is the first line a section or normal line
    set-variable #l0 1
    set-variable #l2 &xse @wl "^[ \t]*[0-9]+\\.[0-9.]*[ \t]+\\S .*"
    !repeat
        end-of-line
        !force search-forward "^\n[ \t]*[0-9]+\\.[0-9.]*[ \t]+\\S "
        !if $status
            beginning-of-line
        !else
            end-of-buffer
        !endif
        set-variable #l1 $window-line
        jst-prepare-section
        set-variable #l0 #l1
        set-variable $window-line #l0
    !until &seq @wc ""
!emacro

define-macro jst-to-html
    set-position "\x83"
    set-variable #l0 @ml01 "Export to htm file"
    set-variable #l1 $buffer-bname
    beginning-of-buffer
    set-mark
    end-of-buffer
    copy-region
    !force 0 delete-buffer "*jst-tmp*"
    find-buffer "*jst-tmp*"
    yank
    -1 yank
    jst-prepare-doc
    beginning-of-buffer
    replace-string "&" "&amp;"
    beginning-of-buffer
    replace-string "<" "&lt;"
    beginning-of-buffer
    replace-string ">" "&gt;"
    beginning-of-buffer
    replace-string "\bLL" "<HR>"
    beginning-of-buffer
    replace-string "\bFB" "<B>"
    beginning-of-buffer
    replace-string "\bfB" "</B>"
    beginning-of-buffer
    replace-string "\bFI" "<I>"
    beginning-of-buffer
    replace-string "\bfI" "</I>"
    beginning-of-buffer
    replace-string "\bFU" "<U>"
    beginning-of-buffer
    replace-string "\bfU" "</U>"
    beginning-of-buffer
    replace-string "\bFH" "<B><I>"
    beginning-of-buffer
    replace-string "\bfH" "</I></B>"
    beginning-of-buffer
    replace-string "\bLT" "<DIR>"
    beginning-of-buffer
    replace-string "\blT" "</DIR>"
    beginning-of-buffer
    replace-string "\bLP" "<P>"
    beginning-of-buffer
    replace-string "\blP" "</P>"
    beginning-of-buffer
    replace-string "\bLC" "<PRE>"
    beginning-of-buffer
    replace-string "\blC" "</PRE>"
    beginning-of-buffer
    replace-string "\bBE\bBD" "<UL>\bBD"
    beginning-of-buffer
    replace-string "\bbD\bbE" "\bbD</UL>"
    beginning-of-buffer
    replace-string "\bBD" "<LI>"
    beginning-of-buffer
    replace-string "\bbD" "</LI>"
    beginning-of-buffer
    replace-string "\bBE\bBA" "<OL TYPE=\"A\">\bBA"
    beginning-of-buffer
    replace-string "\bbA\bbE" "\bbA</OL>"
    beginning-of-buffer
    replace-string "\bBA[^\b]*\bB)" "<LI>"
    beginning-of-buffer
    replace-string "\bbA" "</LI>"
    beginning-of-buffer
    replace-string "\bBE\bBa" "<OL TYPE=\"a\">\bBa"
    beginning-of-buffer
    replace-string "\bba\bbE" "\bba</OL>"
    beginning-of-buffer
    replace-string "\bBa[^\b]*\bB)" "<LI>"
    beginning-of-buffer
    replace-string "\bba" "</LI>"
    beginning-of-buffer
    replace-string "\bBE\bBR" "<OL TYPE=\"I\">\bBR"
    beginning-of-buffer
    replace-string "\bbR\bbE" "\bbR</OL>"
    beginning-of-buffer
    replace-string "\bBR[^\b]*\bB)" "<LI>"
    beginning-of-buffer
    replace-string "\bbR" "</LI>"
    beginning-of-buffer
    replace-string "\bBE\bBr" "<OL TYPE=\"i\">\bBr"
    beginning-of-buffer
    replace-string "\bbr\bbE" "\bbr</OL>"
    beginning-of-buffer
    replace-string "\bBr[^\b]*\bB)" "<LI>"
    beginning-of-buffer
    replace-string "\bbr" "</LI>"
    beginning-of-buffer
    replace-string "\bBE\bBN" "<OL>\bBN"
    beginning-of-buffer
    replace-string "\bbN\bbE" "\bbN</OL>"
    beginning-of-buffer
    replace-string "\bBN[^\b]*\bB)" "<LI>"
    beginning-of-buffer
    replace-string "\bbN" "</LI>"
    beginning-of-buffer
    replace-string "\bS2" "<H2><P>"
    beginning-of-buffer
    replace-string "\bs2" "</P></H2>"
    beginning-of-buffer
    replace-string "\bS3" "<H3><P>"
    beginning-of-buffer
    replace-string "\bs3" "</P></H3>"
    beginning-of-buffer
    insert-string "<HTML>\n<HEAD>\n"
    !if &exi :title
        insert-string &spr "<TITLE>%s</TITLE>\n" :title
    !else
        insert-string &spr "<TITLE>%s</TITLE>\n" #l1
    !endif
    !if &exi :author
        insert-string &spr "<META NAME=\"Author\" CONTENT=\"%s\">\n" :author
    !endif
    insert-string "<META NAME=\"Generator\" CONTENT=\"MicroEmacs EFT\">\n</HEAD>\n<BODY>\n"
    !if &exi :title
        insert-string &spr "<H1><CENTER>%s</CENTER></A></H1>\n" :title
    !endif
    end-of-buffer
    insert-string "</BODY>\n</HTML>"
    !force !force write-buffer #l0 @mna
    set-variable #l3 $status
    0 delete-buffer $buffer-bname
    goto-position "\x83"
    !if &not #l3
        !abort
    !endif
    ml-write &spr "[Export to %s complete]" #l0
!emacro

define-macro jst-to-text
    set-position "\x83"
    set-variable #l0 @ml01 "Export to txt file"
    set-variable #l1 $buffer-bname
    beginning-of-buffer
    set-mark
    end-of-buffer
    copy-region
    !force 0 delete-buffer "*jst-tmp*"
    find-buffer "*jst-tmp*"
    yank
    -1 yank
    jst-prepare-header
    ; must use exact
    1 buffer-mode "exact"
    ; Find any dividing lines
    beginning-of-buffer
    replace-string "^\n___+\n\n?" &spr "\n%n\n\n" $fill-col "_"
    beginning-of-buffer
    replace-string "^\n---+\n\n?" &spr "\n%n\n\n" $fill-col "_"
    ; remove bold *....* labels
    beginning-of-buffer
    replace-string "\\([^*]\\)\\*\\([^ \t*]\\([^*\n]\\|\\*\\*\\)*\\)\\*" "\\1\\2"
    ; remove italic ~....~ labels
    beginning-of-buffer
    replace-string "\\([^~]\\)~\\([^ \t~]\\([^~\n]\\|~~\\)*\\)~" "\\1\\2"
    ; remove underline _...._ labels
    beginning-of-buffer
    replace-string "\\([^_]\\)_\\([^ \t_]\\([^_\n]\\|__\\)*\\)_" "\\1\\2"
    ; remove hilight `....' labels
    beginning-of-buffer
    replace-string "\\([^`]\\)`\\(\\([^']\\|''\\)*\\)'" "\\1\\2"
    ; remove any 'don't format paragraph tokens
    beginning-of-buffer
    replace-string "^>\\." "  "
    beginning-of-buffer
    replace-string "^>_" "  "
    beginning-of-buffer
    replace-string "^>@" "  "
    ; remove any comment lines
    beginning-of-buffer
    replace-string "^>.*\n" ""
    !if &exi :title
        beginning-of-buffer
        insert-string &spr "%n%s\n" &div &sub $fill-col &len :title 2 " " :title
    !endif
    !force !force write-buffer #l0 @mna
    set-variable #l3 $status
    0 delete-buffer $buffer-bname
    goto-position "\x83"
    !if &not #l3
        !abort
    !endif
    ml-write &spr "[Export to %s complete]" #l0
!emacro

