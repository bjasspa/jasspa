; -!- emf -!-
; This is part of the JASSPA MicroEmacs macro files
; Copyright (C) 2002-2004 JASSPA (www.jasspa.com)
; See the file me.emf for copying and conditions.
;
; Created:     Mon Jan 14 2002
; Synopsis:    JST export macros
; Authors:     Steven Phillips
;
0 define-macro jst-prepare-header
    -1 buffer-mode "exact"
    beginning-of-buffer
    search-forward "^[^>]"
    !if $window-line
        set-variable #l0 &sub 1 $window-line
        beginning-of-buffer
        !force #l0 search-forward "^>[ \t]*title:[ \t]*\\(.+\\)"
        !if $status
            set-variable :title @s1
        !endif
        beginning-of-buffer
        !force #l0 search-forward "^>[ \t]*authors?:[ \t]*\\(.+\\)"
        !if $status
            set-variable :author @s1
        !endif
        beginning-of-buffer
        !force #l0 search-forward "^>[ \t]*created:[ \t]*\\(.+\\)"
        !if $status
            set-variable :created @s1
        !endif
    !endif        
!emacro

0 define-macro jst-prepare-images
    beginning-of-buffer
    replace-string "^>image\\(-left\\)?:[ \t]*\\(.+\\)$" "\bTIL\\2\btI"
    beginning-of-buffer
    replace-string "^>image-center:[ \t]*\\(.+\\)$" "\bTIC\\1\btI"
    beginning-of-buffer
    replace-string "^>image-right:[ \t]*\\(.+\\)$" "\bTIR\\1\btI"
!emacro

0 define-macro jst-prepare-tables
    beginning-of-buffer
    !force 1 replace-string "^>table:?[ \t]*\\(\\S+\\)?[ \t]*\\(\\S+\\)?[ \t]*$" "\n\bLI\bTTB\bTTR\bTTC\n"
    !while $status
        set-variable #l0 &add $window-line 1
        set-variable #l1 @s1
        set-variable #l2 @s2
        !force 1 replace-string "^>/table:?[ \t]*$" "\bLN\bLI\btTC\btTR\btTB\n"
        !if &not $status
            ml-write &spr "[Error: missing end to table]"
            !abort
        !endif
        set-variable #l3 &add &sub #l0 $window-line 1
        !if &seq #l1 ""
            set-variable #l1 "^>tc:?[ \t]*$\\|<<tc>>"
            set-variable #l2 "^>tr:?[ \t]*$\\|<<tr>>"
        !else
            str-to-regex #l1
            !if &seq #l2 ""
                set-variable #l2 "$"
            !else
                str-to-regex #l2
            !endif
        !endif
        set-variable $window-line #l0
        !force #l3 replace-string #l2 "\bLN\bLI\btTC\btTR\bTTR\bTTC\bLN"
        set-variable $window-line #l0
        !force #l3 replace-string #l1 "\bLN\bLI\btTC\bTTC\bLN"
        set-variable $window-line #l0
        !force 1 replace-string "\bLN\bLI\btTC\btTR\bTTR\bTTC\bLN\\s*\\s*\\s*\bLN\bLI\btTC\btTR\btTB" "\bLN\bLI\btTC\btTR\btTB"
        set-variable $window-line #l0
        !force #l3 replace-string "\n?\bLN" "\n\n"
        forward-line
        set-mark
        set-variable $window-line &sub #l0 2
        4 narrow-buffer
        !force 1 replace-string "^>table:?[ \t]*\\(\\S+\\)?[ \t]*\\(\\S+\\)?[ \t]*$" "\n\bLI\bTTB\bTTR\bTTC\n"
    !done
!emacro

0 define-macro jst-prepare-toc-content
    set-variable #l9 0
    set-variable #l8 1
    set-variable #l0 $window-line
    beginning-of-buffer
    !force search-forward "\bS\\([0-9]\\)\\(\bHT\\([^\b]*\\)\bhT\\)?\\(.*\\)\bs\\1"
    !while $status
        set-variable #l1 $window-line
        set-variable #l2 @s1
        set-variable #l3 @s4
        !if &seq @s2 ""
            3 backward-char
            set-variable #l4 &spr "JST_TOC_%d" &inc #l9 1
            insert-string "\bht"
            search-backward "\bS"
            3 forward-char
            insert-string &spr "\bHT%s\bhT" #l4
        !else
            set-variable #l3 &rep #l3 "\bht" ""
            set-variable #l4 @s3
        !endif
        set-variable $window-line #l0
        !if &les #l2 #l8
            backward-line
            end-of-line
            insert-string &spr "%n" &sub #l8 #l2 "\blT"
            forward-line
            beginning-of-line
        !endif
        insert-string &spr "%n\bHL#%s\bhL%s\bhl\n" &sub #l2 #l8 "\bLT" #l4 #l3
        set-variable #l0 $window-line
        set-variable #l8 #l2
        set-variable $window-line #l1
        !if &gre #l1 #l0
            forward-line
        !endif
        end-of-line
        !force search-forward "\bS\\([0-9]\\)\\(\bHT\\([^\b]*\\)\bhT\\)?\\(.*\\)\bs\\1"
    !done
    set-variable $window-line #l0
    !if &gre #l8 1
        backward-line
        end-of-line
        insert-string &spr "%n" &sub #l8 1 "\blT"
    !endif
!emacro

0 define-macro jst-prepare-toc
    beginning-of-buffer
    !force search-forward "^>toc\\(:\\(.*\\)\\|[ \t]*\\)$"
    !while $status
        set-variable #l0 &trb @s2
        beginning-of-line
        set-mark
        end-of-line
        kill-region
        -1 yank
        set-variable #l1 $window-line
        jst-prepare-toc-content
        !if &gre $window-line #l1
            insert-string "\bpF\bst"
            set-variable $window-line #l1
            insert-string &spr "\bST%s\bsT\n\n\bPF" &cond &seq #l0 "" "Contents" #l0
        !endif
        !force search-forward "^>toc\\(:\\(.*\\)\\|[ \t]*\\)$"
    !done
!emacro

0 define-macro jst-prepare-inserts
    set-variable #l9 $buffer-bname
    !if .fhook-jst.insert-emphasis
        read-registry "print" &find "jstprint" ".erf" "r"
        execute-file "printf"
    !endif
    beginning-of-buffer
    !force search-forward "^>\\([a-zA-Z]+\\)>"
    !while $status
        !if &seq &set #l0 @s1 "end"
            ; skip an end and this could be the end to a literal text block
            !force search-forward "^>\\([a-zA-Z]+\\)>"
            !continue
        !endif
        set-variable #l1 $window-line
        set-variable #l2 $window-col
        #l2 backward-delete-char
        -1 yank
        !if &not &seq &trb @wl ""
            #l2 insert-space
        !endif
        !force search-forward "^>end>"
        !if &not $status
            ml-write &spr "[Error: missing end to >%s> insert]" #l0
            !abort
        !endif
        set-variable #l2 $window-col
        #l2 backward-delete-char
        -1 yank
        !if &not &seq &trb @wl ""
            insert-newline
            #l2 insert-space
            beginning-of-line
            backward-line
        !endif
        !if .fhook-jst.insert-emphasis
            !if &exi &cat "fhook-" #l0
                set-mark
                set-variable $window-line #l1
                kill-region
                !force 0 delete-buffer "*jst-tmp2*"
                find-buffer "*jst-tmp2*"
                yank
                execute-named-command &cat "fhook-" #l0
                print-buffer
                !force 0 delete-buffer "*jst-tmp2*"
                !force 0 find-buffer "*jst-tmp3*"
                !if $status
                    -1 yank
                    1 clean
                    beginning-of-buffer
                    set-mark
                    end-of-buffer
                    copy-region
                    !force 0 delete-buffer "*jst-tmp3*"
                !endif
                find-buffer #l9
                set-variable $window-line #l1
                yank
                -1 yank
            !endif
        !endif
        set-mark
        !force search-backward "\\S"
        forward-char
        insert-string "\bpM"
        set-variable $window-line #l1
        !force search-forward "\\S"
        backward-char
        insert-string "\bPM"
        set-variable $window-line #l1
        4 narrow-buffer
        !force search-forward "^>\\([a-zA-Z]+\\)>"
    !done
!emacro

0 define-macro jst-prepare-fixed-paragraphs
    beginning-of-buffer
    !force search-forward "^\n>[.!@]+\\(>\\)?"
    !while $status
        set-variable #l0 @s0
        set-variable #l4 @s1
        set-variable #l1 $window-line
        set-variable #l2 $window-col
        set-variable #l3 &cond &sin "@" #l0 "M" "F"
        !force search-forward "\\S"
        backward-char
        insert-string &cat "\bP" #l3
        !if &seq #l4 ""
            forward-paragraph
        !else
            !force search-forward "^>end>"
            !if &not $status
                ml-write &spr "[Error: missing end to %s insert]" &rig #l0 1
                !abort
            !endif
            5 backward-delete-char
            -1 yank
            backward-char
        !endif
        insert-string &cat "\bp" #l3
        !if &not &sin "." #l0
            beginning-of-line
            forward-line
            set-mark
            set-variable $window-line #l1
            #l2 forward-delete-char
            -1 yank
            !if &sin @wc " \t"
                #l2 insert-space
            !endif
            4 narrow-buffer
        !endif
        !force search-forward "^\n>[.!@]+\\(>\\)?"
    !done
!emacro

0 define-macro jst-prepare-hide-fixed-paragraphs
    beginning-of-buffer
    !force search-forward "^\n>[.!@]+\\(>\\)?"
    !while $status
        set-variable #l2 $window-col
        #l2 backward-delete-char
        -1 yank
        !if &sin @wc " \t"
            #l2 insert-space
        !endif
        beginning-of-line
        set-mark
        search-forward "\bp"
        forward-paragraph
        beginning-of-line
        forward-line
        4 narrow-buffer
        !force search-forward "^\n>[.!@]+\\(>\\)?"
    !done
!emacro

0 define-macro jst-prepare-lcr-paragraphs
    beginning-of-buffer
    !force search-forward "^\n[ \t]*\\(\\S.*\\)$"
    !while $status
        set-variable #l0 &len @s1
        ; is the line is short enough to be left, centred or right
        !if &les #l0 &div $fill-col 2
            ; check the position of the text in the line, is it to the left, right or centred?
            !if &equ $window-acol $fill-col
                beginning-of-line
                insert-string ">."
                search-forward "[ \t]*"
                insert-string "\bPR"
                search-forward "^$\\|\\'"
                backward-char
                insert-string "\bpR"
            !elif &equ $window-col #l0
                ; check this is not a comment or fixed paragraph
                !if &not &or &seq &lef @wl 1 ">" &sin "\bP" @wl
                    ; only bother with left if the next line has text
                    forward-line
                    ; checkthere is a letter in there, this could be a title underline
                    !if &xse @wl ".*\\w.*"
                        backward-line
                        beginning-of-line
                        insert-string ">."
                        insert-string "\bPL"
                        search-forward "^$\\|\\'"
                        backward-char
                        insert-string "\bpL"
                    !endif
                !endif
            !elif &equ &sub $window-acol &div #l0 2 &div &add $fill-col 1 2
                beginning-of-line
                insert-string ">."
                search-forward "[ \t]*"
                insert-string "\bPC"
                search-forward "^$\\|\\'"
                backward-char
                insert-string "\bpC"
            !endif 
        !endif
        !force search-forward "^\n[ \t]*\\(\\S.*\\)$"
    !done
!emacro

0 define-macro jst-prepare-fonts
    ; Note that the searching for bold and other section should reflect the hilight
    ; change bold *....* to easily found labels
    beginning-of-buffer
    !force search-forward "^>\\|<<\\|\\*\\S[^*\n]*\\*"
    !while $status
        !if &seq @s0 ">"
            end-of-line
        !elif &seq @s0 "<<"
            !force search-forward ">>"
        !else
            set-variable #l0 &len @s0
            #l0 backward-char
            forward-delete-char
            insert-string "\bFB"
            &sub #l0 1 forward-char
            backward-delete-char
            insert-string "\bfB"
        !endif
        !force search-forward "^>\\|<<\\|\\*\\S[^*\n]*\\*"
    !done
    beginning-of-buffer
    replace-string "<<fb>>" "\bFB"
    beginning-of-buffer
    replace-string "<</fb>>" "\bfB"
    beginning-of-buffer
    replace-string "^>fb:?[ \t]*$" "\n\bLI\bFB\n"
    beginning-of-buffer
    replace-string "^>/fb:?[ \t]*$" "\n\bLI\bfB\n"
    ; change italic ~....~ & <<fi>>....<</fi>> to easily found labels
    beginning-of-buffer
    !force search-forward "^>\\|<<\\|~\\S[^~\n]*~"
    !while $status
        !if &seq @s0 ">"
            end-of-line
        !elif &seq @s0 "<<"
            !force search-forward ">>"
        !else
            set-variable #l0 &len @s0
            #l0 backward-char
            forward-delete-char
            insert-string "\bFI"
            &sub #l0 1 forward-char
            backward-delete-char
            insert-string "\bfI"
        !endif
        !force search-forward "^>\\|<<\\|~\\S[^~\n]*~"
    !done
    beginning-of-buffer
    replace-string "<<fi>>" "\bFI"
    beginning-of-buffer
    replace-string "<</fi>>" "\bfI"
    beginning-of-buffer
    replace-string "^>fi:?[ \t]*$" "\n\bLI\bFI\n"
    beginning-of-buffer
    replace-string "^>/fi:?[ \t]*$" "\n\bLI\bfI\n"
    ; change underline _...._ to easily found labels
    beginning-of-buffer
    !force search-forward "^>\\|<<\\|_\\S[^_\n]*_"
    !while $status
        !if &seq @s0 ">"
            end-of-line
        !elif &seq @s0 "<<"
            !force search-forward ">>"
        !else
            set-variable #l0 &len @s0
            #l0 backward-char
            forward-delete-char
            insert-string "\bFU"
            &sub #l0 1 forward-char
            backward-delete-char
            insert-string "\bfU"
        !endif
        !force search-forward "^>\\|<<\\|_\\S[^_\n]*_"
    !done
    beginning-of-buffer
    replace-string "<<fu>>" "\bFU"
    beginning-of-buffer
    replace-string "<</fu>>" "\bfU"
    beginning-of-buffer
    replace-string "^>fu:?[ \t]*$" "\n\bLI\bFUM\n"
    beginning-of-buffer
    replace-string "^>/fu:?[ \t]*$" "\n\bLI\bfU\n"
    ; change courier @....@ to easily found labels
    beginning-of-buffer
    !force search-forward "^>\\|<<\\|@\\S[^@\n]*@"
    !while $status
        !if &seq @s0 ">"
            end-of-line
        !elif &seq @s0 "<<"
            !force search-forward ">>"
        !else
            set-variable #l0 &len @s0
            #l0 backward-char
            forward-delete-char
            insert-string "\bFB"
            &sub #l0 1 forward-char
            backward-delete-char
            insert-string "\bfB"
        !endif
        !force search-forward "^>\\|<<\\|@\\S[^@\n]*@"
    !done
    beginning-of-buffer
    replace-string "<<fm>>" "\bFM"
    beginning-of-buffer
    replace-string "<</fm>>" "\bfM"
    beginning-of-buffer
    replace-string "^>fm:?[ \t]*$" "\n\bLI\bFM\n"
    beginning-of-buffer
    replace-string "^>/fm:?[ \t]*$" "\n\bLI\bfM\n"
    ; change hilight `....' to easily found labels
    beginning-of-buffer
    replace-string "`\\([^']*\\)'" "\bFE\\1\bfE"
    beginning-of-buffer
    replace-string "<<fe>>" "\bFE"
    beginning-of-buffer
    replace-string "<</fe>>" "\bfE"
    beginning-of-buffer
    replace-string "^>fe:?[ \t]*$" "\n\bLI\bFE\n"
    beginning-of-buffer
    replace-string "^>/fe:?[ \t]*$" "\n\bLI\bfE\n"
!emacro
0 define-macro jst-prepare-quote-tags
    beginning-of-buffer
    !force search-forward "<<\\(.\\)>>"
    !while $status
        set-variable #l0 @s1
        5 backward-delete-char
        -1 yank
        insert-string &spr "\bQ%02x" &atoi #l0
        !force search-forward "<<\\(.\\)>>"
    !done
!emacro

0 define-macro jst-prepare-quotes
    beginning-of-buffer
    !force search-forward "\bQ\\(..\\)"
    !while $status
        4 backward-delete-char
        -1 yank
        insert-string &itoa &cat "0x" @s1
        !force search-forward "\bQ\\(..\\)"
    !done
!emacro

0 define-macro jst-insert-bullet-string
    set-variable #l0 &add @1 1
    set-variable @1 #l0
    set-variable #l1 @2
    !if &seq &lef #l1 1 "D"
        insert-string &cat "\bB" #l1
    !elif &seq &lef #l1 1 "N"
        insert-string &spr "\bB%s%d\bB)" #l1 #l0
    !elif &iseq &lef #l1 1 "R"
        ; roman numberals
        set-variable #l2 &spr "%n%s" &div #l0 10 "X" &lget "|I|II|III|IV|V|VI|VII|VIII|IX|" &mod #l0 10
        !if &sgr &lef #l1 1 "Z"
            set-variable #l2 &slo #l2
        !endif
        insert-string &spr "\bB%s%s\bB)" #l1 #l2
    !else
        set-variable #l2 &itoa &add #l0 64
        !if &sgr &lef #l1 1 "Z"
            set-variable #l2 &slo #l2
        !endif
        insert-string &spr "\bB%s%s\bB)" #l1 #l2 
    !endif
!emacro

0 define-macro jst-prepare-items
    beginning-of-buffer
    replace-string "^\n\\([ \t]*\\)\\[\\(\\S[^]\n]*\\)][ \t]+\\(\\S\\)" "\n\\1\bBI\\2\bbI\\3"
    beginning-of-buffer
    !force search-forward "\bbI"
    !while $status
        forward-paragraph
        insert-string "\bbi"
        !force search-forward "\bbI"
    !done
!emacro

0 define-macro jst-prepare-bullets
    ; Identify bullet lists
    ; indent tolerance
    set-variable #l9 &div $buffer-indent-width 2
    set-variable $window-line #p0
    !force &sub $window-line #p1 search-forward "^\n[ \t]*\\(\\*\\|[0-9]+[]).]\\|[a-zA-Z][]).]\\|[ivxlc]+[]).]\\)[ \t]+\\S"
    !while $status
        set-variable #l3 @s1
        !if &seq &lef #l3 1 "*"
            set-variable #l4 "D" 
            set-variable #l3 "^[ \t]*\\*[ \t]+\\S"
        !elif &xse &lef #l3 1 "[0-9]"
            set-variable #l4 &cat "N" &xir #l3 "[0-9]+\\(.\\).*" "\\1"
            set-variable #l3 "^[ \t]*[0-9]+[]).][ \t]+\\S"
        !else
            !if &isin "i" #l3
                ; roman numberals?
                set-variable #l4 "R"
            !else
                set-variable #l4 "A"
            !endif
            !if &sgr &lef #l3 1 "Z"
                set-variable #l4 &slo #l4
            !endif
            set-variable #l4 &cat #l4 &xir #l3 "[A-Za-z]+\\(.\\).*" "\\1"
            set-variable #l3 "^[ \t]*[A-Za-z]+[]).][ \t]+\\S"
        !endif
        set-variable #l0 $window-line
        backward-char
        set-variable #l5 $window-col
        beginning-of-line
        search-forward "^[ \t]*"
        set-variable #l1 $window-acol
        &sub #l5 $window-col forward-delete-char
        -1 yank
        set-variable #l7 0
        insert-string "\bBE"
        jst-insert-bullet-string #l7 #l4
        set-variable #l2 0
        !repeat
            forward-line
            !if &seq @wl ""
            !elif &not &seq &lef @wl 3 "\bLI"
                beginning-of-line
                !force -1 search-forward #l3
                !if $status
                    backward-char
                    set-variable #l5 $window-col
                !else
                    set-variable #l5 -1
                !endif
                beginning-of-line
                search-forward "^[ \t]*"
                !if &gre #l5 -1
                    !if &gre &sub #l1 $window-acol #l9
                        ; end of these bullets
                        set-variable #l2 1
                    !elif &gre &sub $window-acol #l1 #l9
                        ; a sub bullet list - ignore
                    !else
                        &sub #l5 $window-col forward-delete-char
                        -1 yank
                        jst-insert-bullet-string #l7 #l4
                        set-variable #l6 $window-line
                        beginning-of-line
                        search-backward "\\S"
                        forward-char
                        insert-string &cat "\bb" &lef #l4 1
                        set-variable $window-line #l6
                    !endif
                !elif &les &sub $window-acol #l1 2
                    ; very close to the starting indent - end bullets
                    set-variable #l2 1
                !endif
            !endif
            !if &not &gre #p1 $window-line
                set-variable #l2 1
            !endif
        !until #l2
        beginning-of-line
        search-backward "\\S"
        forward-char
        insert-string &spr "\bb%s\bbE" &lef #l4 1
        ; find the next set of bullets
        set-variable $window-line #l0
        end-of-line
        !force &sub $window-line #p1 search-forward "^\n[ \t]*\\(\\*\\|[0-9]+[]).]\\|[a-zA-Z][]).]\\|[ivxlc]+[]).]\\)[ \t]+\\S"
    !done
!emacro

0 define-macro jst-prepare-section
    ; find the indent of the first non-blank line (possibly a header) and use
    ; this as a base line 
    set-variable $window-line #p0
    !force &sub $window-line #p1 search-forward "^[ \t]*\\S"
    !if $status
        backward-char
        set-variable #l3 $window-acol
    !else
        set-variable #l3 0
    !endif
    
    set-variable #l2 0
    set-variable #l4 #l3
    set-variable $window-line #p0
    !while &les $window-line #p1
        !if &seq @wl ""
        !elif &not &seq &lef @wl 3 "\bLI"
            beginning-of-line
            search-forward "^[ \t]*"
            set-variable #l5 $window-acol
            $window-col backward-delete-char
            -1 yank
            !if &not &les &sub #l5 #l4 $buffer-indent-width
                set-variable #l4 #l5
                set-variable #l2 &add #l2 1
                insert-string "\bLT"
            !elif &not #l2
                ; can't negative indent
            !elif &not &less &sub #l4 #l5 $buffer-indent-width
                set-variable #l4 #l5
                set-variable #l6 $window-line
                search-backward "\\S"
                forward-char
                insert-string "\blT"
                set-variable $window-line #l6
                set-variable #l2 &sub #l2 1
            !endif
            beginning-of-line
            !if &set #l7 &sin "\bP" @wl
                ; a no-format paragraph
                set-variable #l7 &mid @wl &add #l7 1 1
                !repeat
                    search-forward "^[ \t]*"
                    !if &gre $window-acol #l5
                        set-variable $window-acol #l5
                    !endif
                    $window-col backward-delete-char
                    -1 yank
                    !force -1 search-forward "\bP."
                    insert-string &cat "\bN" #l7
                    end-of-line
                    !force -1 search-backward "\bp."
                    set-variable #l8 $status
                    insert-string &cat "\bn" #l7
                    beginning-of-line
                    forward-line
                !until #l8
                backward-line
            !else
                ; a normal paragraph down to one line
                search-forward "^\\(\bLT\\)*"
                insert-string "\bPP"
                end-of-line
                insert-string "\bpP"
            !endif
        !endif
        forward-line
    !done
    !if #l2
        ; rebalance the indents
        beginning-of-line
        search-backward "\\S"
        forward-char
        #l2 insert-string "\blT"
    !endif
!emacro

define-macro jst-prepare-doc
    1 buffer-mode "magic"
    ; clean the buffer
    1 clean
    ; Get the header
    jst-prepare-header
    ; must use exact
    1 buffer-mode "exact"
    ; handle code inserts
    jst-prepare-inserts
    ; handle unformated paragraphs
    jst-prepare-fixed-paragraphs
    ; handle centered and right justified paragraphs
    jst-prepare-lcr-paragraphs
    ; handle tags
    jst-prepare-quote-tags
    ; change the <<ftype>> tag to the output extension
    beginning-of-buffer
    replace-string "<<ftype>>" &rig $buffer-fname &rsin "." $buffer-fname
    ; Find any dividing lines and page breaks - could get confused with underline
    beginning-of-buffer
    replace-string "^\n___+\n\n?" "\n\bLL\n\n"
    beginning-of-buffer
    replace-string "^\n---+\n\n?" "\n\bLL\n\n"
    beginning-of-buffer
    replace-string "^\n\x0c\n\n?" "\n\bLP\n\n"
    ; handle no-blank-lines
    beginning-of-buffer
    replace-string "^>nbl:?[ \t]*$" "\n\bLI\bLB\n"
    jst-prepare-fonts    
    ; sort out targets and links
    beginning-of-buffer
    replace-string "<<hname:[ \t]*\\(\\([^>]\\|>[^>]\\)*\\)>>" "\bHT\\1\bhT"
    beginning-of-buffer
    replace-string "<</hname>>" "\bht"
    beginning-of-buffer
    replace-string "<<href:[ \t]*\\(\\([^>]\\|>[^>]\\)*\\)>>" "\bHL\\1\bhL"
    beginning-of-buffer
    replace-string "<</href>>" "\bhl"
    ; handle any tables
    jst-prepare-tables    
    ; now narrow out any remaining unformated paragraphs
    jst-prepare-hide-fixed-paragraphs
    ; replace any === & --- header lines with section ids
    beginning-of-buffer
    replace-string "^\\([ \t]*\\)\\(\\S.*\\)\n===+$" "\\1\bS2\\2\bs2"
    beginning-of-buffer
    replace-string "^\\([ \t]*\\)\\(\\S.*\\)\n---+$" "\\1\bS3\\2\bs3"
    ; replace any #.0 & #.#* header lines with section ids
    beginning-of-buffer
    replace-string "^\\([ \t]*\\)\\([0-9]+\\)\\.0\\([ \t]+\\S.*\\)$" "\\1\bS2\\2\\3\bs2"
    beginning-of-buffer
    replace-string "^\\([ \t]*\\)\\([0-9]+\\.[0-9]+\\)\\([ \t]+\\S.*\\)$" "\\1\bS3\\2\\3\bs3"
    beginning-of-buffer
    replace-string "^\\([ \t]*\\)\\([0-9]+\\.[0-9.]+[ \t]+\\S.*\\)$" "\\1\bS4\\2\bs4"
    ; replace any 'Appendix #' header lines with section ids
    beginning-of-buffer
    replace-string "^\\([ \t]*\\)\\(Appendix [[:alpha:]].*\\)$" "\\1\bS2\\2\bs2"
    ; identify items before reducing paragraphs to 1 line or split [...] make become items
    jst-prepare-items
    ; format all paragraphs to a single line
    beginning-of-buffer
    65536 paragraph-to-line
    ; handle any images
    jst-prepare-images    
    ; Generate any required tocs 
    jst-prepare-toc
    ; remove any comment lines
    beginning-of-buffer
    replace-string "^>.*\n" ""
    
    ; loop through each section sorting out any bullets
    beginning-of-buffer
    set-variable #l0 1
    !repeat
        end-of-line
        !force search-forward "\bS"
        !if $status
            beginning-of-line
        !else
            end-of-buffer
        !endif
        set-variable #l1 $window-line
        jst-prepare-bullets
        set-variable #l0 #l1
        set-variable $window-line #l0
    !until &seq @wc ""
    
    ; remove any remaining tags including padding tags
    beginning-of-buffer
    replace-string "<<.*>>" ""
    ; remove the narrowed out inerts and paragraphs
    !force 1 narrow-buffer
    ; restore any quotes
    jst-prepare-quotes
    ; remove any blank lines at the top of the buffer
    beginning-of-buffer
    ; delete-blank-lines - doesn't work at the top of a buffer!
    set-mark
    search-forward "\\S"
    beginning-of-line
    kill-region
    -1 yank
    ; loop through each section trying to normalize the indentation
    ; is the first line a section or normal line
    set-variable #l0 1
    set-variable #l2 &sin "\bS" @wl
    !repeat
        end-of-line
        !force search-forward "\bS"
        !if $status
            beginning-of-line
        !else
            end-of-buffer
        !endif
        set-variable #l1 $window-line
        jst-prepare-section
        set-variable #l0 #l1
        set-variable $window-line #l0
    !until &seq @wc ""
    beginning-of-buffer
    replace-string "\n?\n?\n?\n?\bLI\bLB\\(.*\\)\n\n?\n?\n?" "\\1\n"
    beginning-of-buffer
    replace-string "\n?\n?\bLI\\(.*\\)\n\n?" "\\1"
!emacro

define-macro jst-export-get-filename
    set-variable #l0 @2
    !if &band @# 2
        set-variable #l1 &stat "a" &cat &lef $buffer-fname &rsin "/" $buffer-fname "."
    !else
        set-variable #l1 @ml01 &spr "Export to %s file" #l0
    !endif
    !if &seq &rig #l1 &rsin "/" #l1 ""
        ; directory given
        !if &seq $buffer-fname ""
            set-variable #l2 $buffer-bname
        !else
            set-variable #l2 &rig $buffer-fname &rsin "/" $buffer-fname
        !endif
        !if &set #l3 &risin ".jst" #l2
            set-variable #l2 &lef #l2 &sub #l3 1
        !endif
        set-variable #l1 &spr "%s%s.%s" #l1 #l2 #l0
    !endif
    !if &not &stat "w" #l1
        ml-write &spr "[Invalid file name \"%s\"]" #l1
        !abort
    !elif &band @# 1
        !if &seq &stat "t" #l1 "R"
            !if &iseq @mc1 &spr "Over-write file %s (y/n) ? " #l1 "yYnN" "n"
                !abort
            !endif
        !endif
    !endif
    set-variable @1 #l1 
    ml-write &spr "[Exporting to %s]" #l1
!emacro

define-macro jst-to-html
    set-position "\x83"
    @# jst-export-get-filename #l0 "htm"
    set-variable #l1 $buffer-bname
    set-variable #l2 $fill-col
    beginning-of-buffer
    set-mark
    end-of-buffer
    copy-region
    !force 0 delete-buffer "*jst-tmp*"
    find-buffer "*jst-tmp*"
    yank
    -1 yank
    set-variable $buffer-fname #l0
    set-variable $fill-col #l2
    jst-prepare-doc
    beginning-of-buffer
    replace-string "&" "&amp;"
    beginning-of-buffer
    replace-string "<" "&lt;"
    beginning-of-buffer
    replace-string ">" "&gt;"
    ; in TOC we have a reduce indent followed by NL, i.e. </DIR><BR>,
    ; this will lead to a blank line so lose the NL
    beginning-of-buffer
    !force search-forward "\bST"
    !while $status
        set-variable #l3 $window-line
        search-forward "\bst"
        set-variable #l4 $window-line
        set-variable $window-line &add #l3 1
        &sub #l3 #l4 replace-string "\blT\bnF$" "\blT"
        !force search-forward "\bST"
    !done
    beginning-of-buffer
    replace-string "\bLL" "<HR>"
    beginning-of-buffer
    ; HTML does not support a concept of page breaks
    replace-string "\bLP" ""
    ; sort out images as they are surrounded by \bPP...\bpP
    beginning-of-buffer
    replace-string "\btI\bpP\n\bPP\bTI" "\">\n\bPP\bTI"
    beginning-of-buffer
    replace-string "\btI\bpP" "\"><BR clear=all>"
    beginning-of-buffer
    replace-string "\bPP\bTIL" "<IMG ALIGN=LEFT SRC=\""
    beginning-of-buffer
    replace-string "\bPP\bTIC\\(.*\\)<BR" "<CENTER><IMG SRC=\"\\1</CENTER><BR"
    beginning-of-buffer
    replace-string "\bPP\bTIC\\(.*\\)$" "<CENTER><IMG SRC=\"\\1</CENTER>"
    beginning-of-buffer
    replace-string "\bPP\bTIR" "<IMG ALIGN=RIGHT SRC=\""
    ; Now sort out tables
    beginning-of-buffer
    replace-string "\bTTB" "<CENTER><TABLE BORDER=\"1\">\n"
    beginning-of-buffer
    replace-string "\btTB" "</TABLE></CENTER>"
    beginning-of-buffer
    replace-string "\bTTR" "<TR>\n"
    beginning-of-buffer
    replace-string "\btTR" "</TR>\n"
    beginning-of-buffer
    replace-string "\bTTC" "<TD>"
    beginning-of-buffer
    replace-string "\btTC" "</TD>\n"
    ; sort out the font changes
    beginning-of-buffer
    replace-string "\bFB" "<B>"
    beginning-of-buffer
    replace-string "\bfB" "</B>"
    beginning-of-buffer
    replace-string "\bFI" "<I>"
    beginning-of-buffer
    replace-string "\bfI" "</I>"
    beginning-of-buffer
    replace-string "\bFU" "<U>"
    beginning-of-buffer
    replace-string "\bfU" "</U>"
    beginning-of-buffer
    replace-string "\bFE" "<B><I>"
    beginning-of-buffer
    replace-string "\bfE" "</I></B>"
    beginning-of-buffer
    replace-string "\bFM" "<FONT FACE=\"Courier New\">"
    beginning-of-buffer
    replace-string "\bfM" "</FONT>"
    beginning-of-buffer
    replace-string "\bLT" "<DIR>"
    beginning-of-buffer
    replace-string "\blT" "</DIR>"
    beginning-of-buffer
    replace-string "\bPM" "<PRE>"
    beginning-of-buffer
    replace-string "\bpM" "</PRE>"
    beginning-of-buffer
    replace-string "\bNM" ""
    beginning-of-buffer
    replace-string "\bnM" ""
    beginning-of-buffer
    replace-string "\bP[PFL]" "<P>"
    beginning-of-buffer
    replace-string "\bPC" "<P ALIGN=\"center\">"
    beginning-of-buffer
    replace-string "\bPR" "<P ALIGN=\"right\">"
    beginning-of-buffer
    replace-string "\bpP" "</P>"
    beginning-of-buffer
    replace-string "\bn[FLCR]\bp[FLCR]" "</P>"
    beginning-of-buffer
    replace-string "\bN[FLCR]" ""
    beginning-of-buffer
    replace-string "\bn[FLCR]" "<br>"
    beginning-of-buffer
    replace-string "\bBI" ""
    beginning-of-buffer
    replace-string "\bbI" "<BR><UL>"
    beginning-of-buffer
    replace-string "\bbi" "</UL>"
    beginning-of-buffer
    replace-string "\bBE\bBD" "<UL>\bBD"
    beginning-of-buffer
    replace-string "\bbD\bbE" "\bbD</UL>"
    beginning-of-buffer
    replace-string "\bBD" "<LI>"
    beginning-of-buffer
    replace-string "\bbD" "</LI>"
    beginning-of-buffer
    replace-string "\bBE\bBA" "<OL TYPE=\"A\">\bBA"
    beginning-of-buffer
    replace-string "\bbA\bbE" "\bbA</OL>"
    beginning-of-buffer
    replace-string "\bBA[^\b]*\bB)" "<LI>"
    beginning-of-buffer
    replace-string "\bbA" "</LI>"
    beginning-of-buffer
    replace-string "\bBE\bBa" "<OL TYPE=\"a\">\bBa"
    beginning-of-buffer
    replace-string "\bba\bbE" "\bba</OL>"
    beginning-of-buffer
    replace-string "\bBa[^\b]*\bB)" "<LI>"
    beginning-of-buffer
    replace-string "\bba" "</LI>"
    beginning-of-buffer
    replace-string "\bBE\bBR" "<OL TYPE=\"I\">\bBR"
    beginning-of-buffer
    replace-string "\bbR\bbE" "\bbR</OL>"
    beginning-of-buffer
    replace-string "\bBR[^\b]*\bB)" "<LI>"
    beginning-of-buffer
    replace-string "\bbR" "</LI>"
    beginning-of-buffer
    replace-string "\bBE\bBr" "<OL TYPE=\"i\">\bBr"
    beginning-of-buffer
    replace-string "\bbr\bbE" "\bbr</OL>"
    beginning-of-buffer
    replace-string "\bBr[^\b]*\bB)" "<LI>"
    beginning-of-buffer
    replace-string "\bbr" "</LI>"
    beginning-of-buffer
    replace-string "\bBE\bBN" "<OL>\bBN"
    beginning-of-buffer
    replace-string "\bbN\bbE" "\bbN</OL>"
    beginning-of-buffer
    replace-string "\bBN[^\b]*\bB)" "<LI>"
    beginning-of-buffer
    replace-string "\bbN" "</LI>"
    beginning-of-buffer
    replace-string "\bHT" "<A NAME=\""
    beginning-of-buffer
    replace-string "\bhT" "\">"
    beginning-of-buffer
    replace-string "\bht" "</A>"
    beginning-of-buffer
    replace-string "\bHL\\(file:\\)?" "<A HREF=\""
    beginning-of-buffer
    replace-string "\bhL" "\">"
    beginning-of-buffer
    replace-string "\bhl" "</A>"
    beginning-of-buffer
    replace-string "\bS[2T]" "<H2><P>"
    beginning-of-buffer
    replace-string "\bs[2T]" "</P></H2>"
    beginning-of-buffer
    replace-string "\bst" ""
    beginning-of-buffer
    replace-string "\bS3" "<H3><P>"
    beginning-of-buffer
    replace-string "\bs3" "</P></H3>"
    beginning-of-buffer
    replace-string "\bS4" "<H4><P>"
    beginning-of-buffer
    replace-string "\bs4" "</P></H4>"
    beginning-of-buffer
    insert-string "<HTML>\n<HEAD>\n"
    !if &exi :title
        insert-string &spr "<TITLE>%s</TITLE>\n" :title
    !else
        insert-string &spr "<TITLE>%s</TITLE>\n" #l1
    !endif
    !if &exi :author
        insert-string &spr "<META NAME=\"Author\" CONTENT=\"%s\">\n" :author
    !endif
    insert-string "<META NAME=\"Generator\" CONTENT=\"MicroEmacs EFT\">\n</HEAD>\n<BODY>\n"
    !if &exi :title
        insert-string &spr "<H1><CENTER>%s</CENTER></A></H1>\n" :title
    !endif
    end-of-buffer
    insert-string "</BODY>\n</HTML>"
    !force !force 0 write-buffer #l0 @mna
    set-variable #l3 $status
    0 delete-buffer $buffer-bname
    goto-position "\x83"
    !if &not #l3
        !abort
    !endif
    ml-write &spr "[Export to %s complete]" #l0
!emacro

define-macro jst-to-rtf
    set-position "\x83"
    @# jst-export-get-filename #l0 "rtf"
    set-variable #l1 $buffer-bname
    set-variable #l2 $fill-col
    beginning-of-buffer
    set-mark
    end-of-buffer
    copy-region
    !force 0 delete-buffer "*jst-tmp*"
    find-buffer "*jst-tmp*"
    yank
    -1 yank
    set-variable $buffer-fname #l0
    set-variable $fill-col #l2
    jst-prepare-doc
    beginning-of-buffer
    replace-string "\\\\" "\\\\\\\\"
    beginning-of-buffer
    replace-string "{" "\\\\{"
    beginning-of-buffer
    replace-string "}" "\\\\}"
    ; sort out images as they are surrounded by \bPP...\bpP
    ; combined left justified images only
    beginning-of-buffer
    replace-string "\btI\bpP\n\bPP\bTIL" "\btI\bpP\bPP\bTIL"
    beginning-of-buffer
    replace-string "\bPP\bTIL\\([^\b]*\\)\btI\bpP" "{\\\\field{\\\\fldinst {INCLUDEPICTURE \\\\\\\\d \\\\\\\\z \"\\1\"}}}"
    beginning-of-buffer
    replace-string "\bPP\bTIC\\([^\b]*\\)\btI\bpP" "\bPC{\\\\field{\\\\fldinst {INCLUDEPICTURE  \\\\\\\\d  \\\\\\\\z \"\\1\"}}}\bpC"
    beginning-of-buffer
    replace-string "\bPP\bTIR\\([^\b]*\\)\btI\bpP" "\bPR{\\\\field{\\\\fldinst {INCLUDEPICTURE  \\\\\\\\d  \\\\\\\\z \"\\1\"}}}\bpR"
    ; turn items into simple new line and indent commands
    beginning-of-buffer
    replace-string "\bBI" ""
    beginning-of-buffer
    replace-string "\bbI" "\n\bLT"
    beginning-of-buffer
    replace-string "\bbi" "\blT"
    set-variable #l2 0
    beginning-of-buffer
    !while &not &seq @wc ""
        set-variable #l3 &len @wl
        -1 replace-string  "\bLT" ""
        beginning-of-line
        set-variable #l4 &len @wl
        set-variable #l2 &add #l2 &div &sub #l3 #l4 3
        -1 replace-string  "\blT" ""
        beginning-of-line
        set-variable #l4 &sub #l2 &div &sub #l4 &len @wl 3
        insert-string &spr "\\par\\li%d " &mul #l2 360
        beginning-of-line
        forward-line
        set-variable #l2 #l4
    !done
    beginning-of-buffer
    replace-string "^.*\bLL.*" "\\\\pard {\\\\shp{\\\\shpleft0\\\\shptop240\\\\shpright9360\\\\shpbottom241\\\\shpbypara}}"
    beginning-of-buffer
    ; Page breaks are on their own line, remove it and the next
    replace-string "^.*\bLP.*\n\\(.*\\)?\\(\n\\\\par\\)?" "\\\\pard\\\\page"
    beginning-of-buffer
    replace-string "\bFB" "{\\\\b "
    beginning-of-buffer
    replace-string "\bfB" "}"
    beginning-of-buffer
    replace-string "\bFI" "{\\\\i "
    beginning-of-buffer
    replace-string "\bfI" "}"
    beginning-of-buffer
    replace-string "\bFU" "{\\\\ul "
    beginning-of-buffer
    replace-string "\bfU" "}"
    beginning-of-buffer
    replace-string "\bFE" "{\\\\b\\\\i "
    beginning-of-buffer
    replace-string "\bfE" "}"
    beginning-of-buffer
    replace-string "\bFM" "{\\\\f1 "
    beginning-of-buffer
    replace-string "\bfM" "}"
    beginning-of-buffer
    replace-string "\bPM" "{\\\\f1 "
    beginning-of-buffer
    replace-string "\bpM" "}"
    beginning-of-buffer
    replace-string " ?\bPC" "\\\\qc "
    beginning-of-buffer
    replace-string " ?\bPR" "\\\\qr "
    beginning-of-buffer
    replace-string "\bP[PFL]" ""
    beginning-of-buffer
    replace-string "\bp[CR]\\(.*\n\\\\par\\)" "\\1\\\\ql"
    beginning-of-buffer
    replace-string "\bp[PFL]" ""
    beginning-of-buffer
    replace-string "\bN[MFLCR]" ""
    beginning-of-buffer
    replace-string "\bn[MFLCR]" ""
    beginning-of-buffer
    replace-string "\bBE" ""
    beginning-of-buffer
    replace-string "\bbE" ""
    beginning-of-buffer
    replace-string "\bb[DNAaRr]" ""
    beginning-of-buffer
    replace-string "\bBD" "{\\\\f2\\\\'b7}\\\\tab "
    beginning-of-buffer
    !force 1 replace-string "\\\\li\\([0-9]+\\)\\(.*\\)\bB[AaRrN]\\(.\\)\\([^\b]*\\)\bB)" "\\2\\4\\3\\\\tab "
    !while $status
        set-variable #l3 &add @s1 360
        -2 show-region
        insert-string &spr "\\li%d\\fi-%d\\tx%d" #l3 #l3 #l3
        beginning-of-line
        forward-line
        !force 1 replace-string "\\\\par" "\\\\par\\\\pard"
        !force 1 replace-string "\\\\li\\([0-9]+\\)\\(.*\\)\bB[AaRrN]\\(.\\)\\([^\b]*\\)\bB)" "\\2\\4\\3\\\\tab "
    !done
    beginning-of-buffer
    replace-string "\bHT\\(\\([^\b]\\|\b[^hH]\\)*\\)\bhT\\(\\([^\b]\\|\b[^hH]\\)*\\)\bht" "{\\\\bkmkstart \\1}\\3{\\\\bkmkend \\1}"
    beginning-of-buffer
    replace-string "\bHL\\(file:\\)?\\([^#\b]*\\)#" "{\\\\field{\\\\fldinst {HYPERLINK \"\\2\" \\\\\\\\l \""
    beginning-of-buffer
    replace-string "\bHL\\(file:\\)?" "{\\\\field{\\\\fldinst {HYPERLINK \""
    beginning-of-buffer
    replace-string "\bhL" "\"}}{\\\\fldrslt {\\\\ul\\\\cf2 "
    beginning-of-buffer
    replace-string "\bhl" "}}}"
    beginning-of-buffer
    replace-string "\bS[2T]" "{\\\\fs36\\\\b "
    beginning-of-buffer
    replace-string "\bs[2T]" "}"
    beginning-of-buffer
    replace-string "\bst" ""
    beginning-of-buffer
    replace-string "\bS3" "{\\\\fs28\\\\b "
    beginning-of-buffer
    replace-string "\bs3" "}"
    beginning-of-buffer
    replace-string "\bS4" "{\\\\b "
    beginning-of-buffer
    replace-string "\bs4" "}"
    beginning-of-buffer
    insert-string "{\\rtf1\\ansi\\ansicpg1252\\deff0\\deftab360\\viewscale100\n"
    insert-string "{\\fonttbl{\\f0\\froman Times New Roman;}{\\f1\\fmodern Courier New;}{\\f2\\froman\\fcharset2 Symbol;}}\n"
    insert-string "{\\colortbl;\\red0\\green0\\blue0;\\red0\\green0\\blue255;}\n{\\info"
    !if &exi :title
        insert-string &spr "{\\title %s}" :title
    !else
        insert-string &spr "{\\title %s}" #l1
    !endif
    !if &exi :author
        insert-string &spr "{\\author %s}" :author
    !endif
    insert-string "}\n"
    !if &exi :title
        insert-string &spr "\\qc\\f0\\fs48 %s\n\\par\\ql" :title
    !endif
    insert-string "\\f0\\fs20 "
    end-of-buffer
    insert-string "}"
    !force !force 0 write-buffer #l0 @mna
    set-variable #l3 $status
    0 delete-buffer $buffer-bname
    goto-position "\x83"
    !if &not #l3
        !abort
    !endif
    ml-write &spr "[Export to %s complete]" #l0
!emacro

define-macro jst-to-latex
    set-position "\x83"
    @# jst-export-get-filename #l0 "tex"
    set-variable #l1 $buffer-bname
    set-variable #l2 $fill-col
    beginning-of-buffer
    set-mark
    end-of-buffer
    copy-region
    !force 0 delete-buffer "*jst-tmp*"
    find-buffer "*jst-tmp*"
    yank
    -1 yank
    set-variable $buffer-fname #l0
    set-variable $fill-col #l2
    jst-prepare-doc
    beginning-of-buffer
    replace-string "\\\\" "\\\\textbackslash"
    beginning-of-buffer
    replace-string "{" "\\\\{"
    beginning-of-buffer
    replace-string "}" "\\\\}"
    beginning-of-buffer
    replace-string "%" "\\\\%"
    beginning-of-buffer
    replace-string "\bLL" "\\\\hline"
    beginning-of-buffer
    replace-string "\bLP" "\\\\newpage"
    ; sort out images as they are surrounded by \bPP...\bpP
    beginning-of-buffer
    replace-string "\btI\bpP\n\bPP\bTI" "\">\n\bPP\bTI"
    beginning-of-buffer
    replace-string "\btI\bpP" "\"><BR clear=all>"
    beginning-of-buffer
    replace-string "\bPP\bTIL" "<IMG ALIGN=LEFT SRC=\""
    beginning-of-buffer
    replace-string "\bPP\bTIC\\(.*\\)<BR" "<CENTER><IMG SRC=\"\\1</CENTER><BR"
    beginning-of-buffer
    replace-string "\bPP\bTIC\\(.*\\)$" "<CENTER><IMG SRC=\"\\1</CENTER>"
    beginning-of-buffer
    replace-string "\bPP\bTIR" "<IMG ALIGN=RIGHT SRC=\""
    beginning-of-buffer
    replace-string "\bFB" "{\\\\bf "
    beginning-of-buffer
    replace-string "\bfB" "}"
    beginning-of-buffer
    replace-string "\bFI" "{\\\\it "
    beginning-of-buffer
    replace-string "\bfI" "}"
    beginning-of-buffer
    replace-string "\bFU" "{\\\\ul "
    beginning-of-buffer
    replace-string "\bfU" "}"
    beginning-of-buffer
    replace-string "\bFE" "{\\\\bf {\\\\it "
    beginning-of-buffer
    replace-string "\bfE" "}}"
    beginning-of-buffer
    replace-string "\bFM" "{\\\\tt "
    beginning-of-buffer
    replace-string "\bfM" "}"
    beginning-of-buffer
    replace-string "\bLT" "<DIR>"
    beginning-of-buffer
    replace-string "\blT" "</DIR>"
    beginning-of-buffer
    replace-string "\bPM" "<PRE>"
    beginning-of-buffer
    replace-string "\bpM" "</PRE>"
    beginning-of-buffer
    replace-string "\bNM" ""
    beginning-of-buffer
    replace-string "\bnM" ""
    beginning-of-buffer
    replace-string "\bPP" ""
    beginning-of-buffer
    replace-string "\bpP" ""
    beginning-of-buffer
    replace-string "\bPF" "\\\\begin{verbatim}\n"
    beginning-of-buffer
    replace-string "\bpF" "\n\\\\end{verbatim}"
    beginning-of-buffer
    replace-string "\bPL" ""
    beginning-of-buffer
    replace-string "\bpL" ""
    beginning-of-buffer
    replace-string "\bPC" "\\\\begin{center}\n"
    beginning-of-buffer
    replace-string "\bnC\bpC" "\n\\\\end{center}"
    beginning-of-buffer
    replace-string "\bPR" "\\\\begin{right}\n"
    beginning-of-buffer
    replace-string "\bnR\bpR" "\n\\\\end{right}"
    beginning-of-buffer
    replace-string "\bN[FLCR]" ""
    beginning-of-buffer
    replace-string "\bnF" ""
    beginning-of-buffer
    replace-string "\bn[LCR]" "\\\\\\\\"
    beginning-of-buffer
    replace-string "\bBI" "\\\\item["
    beginning-of-buffer
    replace-string "\bbI" "]"
    beginning-of-buffer
    replace-string "\bbi" ""
    beginning-of-buffer
    replace-string "\bBE\bBD" "\\\\begin{itemize}\n\bBD"
    beginning-of-buffer
    replace-string "\bbD\bbE" "\n\\\\end{itemize}"
    beginning-of-buffer
    replace-string "\bBD" "\\\\item "
    beginning-of-buffer
    replace-string "\bbD" ""
    beginning-of-buffer
    replace-string "\bBE\bBA" "<OL TYPE=\"A\">\bBA"
    beginning-of-buffer
    replace-string "\bbA\bbE" "\bbA</OL>"
    beginning-of-buffer
    replace-string "\bBA[^\b]*\bB)" "<LI>"
    beginning-of-buffer
    replace-string "\bbA" "</LI>"
    beginning-of-buffer
    replace-string "\bBE\bBa" "<OL TYPE=\"a\">\bBa"
    beginning-of-buffer
    replace-string "\bba\bbE" "\bba</OL>"
    beginning-of-buffer
    replace-string "\bBa[^\b]*\bB)" "<LI>"
    beginning-of-buffer
    replace-string "\bba" "</LI>"
    beginning-of-buffer
    replace-string "\bBE\bBR" "<OL TYPE=\"I\">\bBR"
    beginning-of-buffer
    replace-string "\bbR\bbE" "\bbR</OL>"
    beginning-of-buffer
    replace-string "\bBR[^\b]*\bB)" "<LI>"
    beginning-of-buffer
    replace-string "\bbR" "</LI>"
    beginning-of-buffer
    replace-string "\bBE\bBr" "<OL TYPE=\"i\">\bBr"
    beginning-of-buffer
    replace-string "\bbr\bbE" "\bbr</OL>"
    beginning-of-buffer
    replace-string "\bBr[^\b]*\bB)" "<LI>"
    beginning-of-buffer
    replace-string "\bbr" "</LI>"
    beginning-of-buffer
    replace-string "\bBE\bBN" "\\\\begin{enumerate}\n\bBN"
    beginning-of-buffer
    replace-string "\bbN\bbE" "\n\\\\end{enumerate}"
    beginning-of-buffer
    replace-string "\bBN[^\b]*\bB)" "\\\\item "
    beginning-of-buffer
    replace-string "\bbN" ""
    ; LaTeX does not support hyper-links - remove
    beginning-of-buffer
    replace-string "\bHT[^\b]*\bhT" ""
    beginning-of-buffer
    replace-string "\bht" ""
    beginning-of-buffer
    replace-string "\bHL[^\b]*\bhL" ""
    beginning-of-buffer
    replace-string "\bhl" ""
    beginning-of-buffer
    replace-string "\bS[2T]" "\\\\section{"
    beginning-of-buffer
    replace-string "\bs[2T]" "}"
    beginning-of-buffer
    replace-string "\bst" ""
    beginning-of-buffer
    replace-string "\bS3" "\\\\subsection{"
    beginning-of-buffer
    replace-string "\bs3" "}"
    beginning-of-buffer
    replace-string "\bS4" "\\\\subsubsection{"
    beginning-of-buffer
    replace-string "\bs4" "}"
    beginning-of-buffer
    insert-string "% Generator - MicroEmacs JST\n"
    insert-string "% tex header\n"
    !if &exi :title
        insert-string &spr "\\title{%s}\n" :title
    !else
        insert-string &spr "\\title{%s}\n" #l1
    !endif
    !if &exi :author
        insert-string &spr "\\author{%s}\n" :author
    !endif
    !if &exi :title
        insert-string &spr "\\part{%s}\n" :title
    !endif
    !force !force 0 write-buffer #l0 @mna
    set-variable #l3 $status
    0 delete-buffer $buffer-bname
    goto-position "\x83"
    !if &not #l3
        !abort
    !endif
    ml-write &spr "[Export to %s complete]" #l0
!emacro

define-macro jst-to-text
    set-position "\x83"
    @# jst-export-get-filename #l0 "txt"
    set-variable #l1 $buffer-bname
    set-variable #l2 $fill-col
    beginning-of-buffer
    set-mark
    end-of-buffer
    copy-region
    !force 0 delete-buffer "*jst-tmp*"
    find-buffer "*jst-tmp*"
    yank
    -1 yank
    set-variable $buffer-fname #l0
    set-variable $fill-col #l2
    jst-prepare-doc
    set-variable $fill-col 78
    set-variable $fill-mode "b"
    1 buffer-mode "justify"
    ; strip out hyperlinks and images
    beginning-of-buffer
    replace-string "\bHT\\(\\([^\b]\\|\b[^hH]\\)*\\)\bhT\\(\\([^\b]\\|\b[^hH]\\)*\\)\bht" "\\3"
    beginning-of-buffer
    replace-string "\bHL\\(\\([^\b]\\|\b[^hH]\\)*\\)\bhL\\(\\([^\b]\\|\b[^hH]\\)*\\)\bhl" "\\3"
    beginning-of-buffer
    replace-string "\bTI\\([^\b]*\\)\btI" ""
    ; turn items into simple new line and indent commands
    beginning-of-buffer
    replace-string "\bBI" ""
    beginning-of-buffer
    replace-string "\bbI" "\n\bLT"
    beginning-of-buffer
    replace-string "\bbi" "\blT"
    ; Sort out the section headers, always indent the text in a section
    set-variable #l2 0
    beginning-of-buffer
    !force 1 replace-string "\bS\\([234T]\\)\\(.*\\)\bs[234T]" "\\2"
    !while $status
        set-variable #l3 @s1
        set-variable #l4 &len @s2
        set-variable #l5 $window-line
        beginning-of-line
        !force -1 replace-string "\bPP" ""
        !force -1 replace-string "\bpP" ""
        !if #l2
            search-backward "\bp"
            end-of-line
            insert-string "\blT"
            set-variable $window-line #l5
            set-variable #l2 0
        !endif
        end-of-line
        !if &seq #l3 "2"
            insert-newline
            #l4 insert-string "="
        !elif &seq #l3 "T"
            insert-newline
            #l4 insert-string "="
        !elif &seq #l3 "3"
            insert-newline
            #l4 insert-string "-"
        !endif
        ; check the text is indented
        !force search-forward "\bP"
        !if &and $status &not &sin "\bS" @wl
            !if &not &sin "\bL" @wl
                beginning-of-line
                insert-string "\bLT"
                set-variable #l2 1
            !endif
        !endif
        !force 1 replace-string "\bS\\([234T]\\)\\(.*\\)\bs[234T]" "\\2"
    !done
    beginning-of-buffer
    replace-string "\bs[2T]" ""
    beginning-of-buffer
    replace-string "\bst" ""
    beginning-of-buffer
    replace-string "\bS3" ""
    beginning-of-buffer
    replace-string "\bs3" ""
    beginning-of-buffer
    replace-string "\bS4" ""
    beginning-of-buffer
    replace-string "\bs4" ""
    set-variable #l2 0
    beginning-of-buffer
    !while &not &seq @wc ""
        set-variable #l3 &len @wl
        -1 replace-string  "\bLT" ""
        beginning-of-line
        set-variable #l4 &len @wl
        set-variable #l2 &add #l2 &div &sub #l3 #l4 3
        -1 replace-string  "\blT" ""
        beginning-of-line
        set-variable #l4 &sub #l2 &div &sub #l4 &len @wl 3
        &mul #l2 4 insert-space
        beginning-of-line
        forward-line
        set-variable #l2 #l4
    !done
    ; sort out the bullets
    beginning-of-buffer
    replace-string "\bBE" ""
    beginning-of-buffer
    replace-string "\bbE" ""
    ; Handle simple * bullets
    beginning-of-buffer
    set-variable #l4 "y"
    !force 1 replace-string "\bBD" "  * "
    !while $status
        beginning-of-line
        !force -1 replace-string "\bPP" ""
        !force -1 replace-string "\bpP" ""
        beginning-of-line
        !if &set #l3 &sin "\bbD" @wl
            !force -1 replace-string "\bbD" ""
            beginning-of-line
        !endif
        1 fill-paragraph #l4
        !if #l3
            set-variable #l4 "y"
            !force 1 replace-string "\bBD" "  * "
        !else
            search-forward "\bP"
            beginning-of-line
            insert-string "    "
            set-variable #l4 "n"
        !endif
    !done
    beginning-of-buffer
    set-variable #l4 "y"
    !force 1 replace-string "\bB[AaRrN]\\(.\\)\\([^\b]*\\)\bB)" "\\2\\1"
    !while $status
        !if &seq #l4 "y"
            set-variable #l6 &add &len @s1 &len @s2
            !if &les #l6 4
                set-variable #l5 4
            !else
                set-variable #l5 &add #l6 1
            !endif
            &sub #l5 #l6 insert-space
        !else
            #l5 insert-space
        !endif
        beginning-of-line
        !force -1 replace-string "\bPP" ""
        !force -1 replace-string "\bpP" ""
        beginning-of-line
        !if &set #l3 &sin "\bb" @wl
            !force -1 replace-string "\bb[NAaRr]" ""
            beginning-of-line
        !endif
        1 fill-paragraph #l4
        !if #l3
            set-variable #l4 "y"
            !force 1 replace-string "\bB[AaRrN]\\(.\\)\\([^\b]*\\)\bB)" "\\2\\1"
        !else
            search-forward "\bP"
            beginning-of-line
            set-variable #l4 "n"
        !endif
    !done
    beginning-of-buffer
    replace-string "^.*\bLL.*" &spr "%n" $fill-col "_"
    beginning-of-buffer
    ; Page breaks are on their own line, remove it and the next
    replace-string "^.*\bLP.*\n" "\x0c"
    ; no font support
    beginning-of-buffer
    replace-string "\b[Ff][BIUHM]" ""
    beginning-of-buffer
    replace-string "\b[Nn][MFLCR]" ""
    beginning-of-buffer
    replace-string "\bp[PMFLCR]" ""
    beginning-of-buffer
    !force 1 replace-string "\bPP" ""
    !while $status
        1 fill-paragraph "n"
        !force 1 replace-string "\bPP" ""
    !done
    beginning-of-buffer
    set-variable $fill-mode "c"
    !force 1 replace-string "\bPC" ""
    !while $status
        1 fill-paragraph "n"
        !force 1 replace-string "\bPC" ""
    !done
    beginning-of-buffer
    set-variable $fill-mode "r"
    !force 1 replace-string "\bPR" ""
    !while $status
        1 fill-paragraph "n"
        !force 1 replace-string "\bPR" ""
    !done
    beginning-of-buffer
    replace-string "\bP[PMFLCR]" ""
    beginning-of-buffer
    !if &exi :title
        insert-string &spr "%n%s\n" &div &sub $fill-col &len :title 2 " " :title
        insert-string &spr "%n%n\n\n" &div &sub $fill-col &len :title 2 " " &len :title "="
    !endif
    !force !force 0 write-buffer #l0 @mna
    set-variable #l3 $status
    0 delete-buffer $buffer-bname
    goto-position "\x83"
    !if &not #l3
        !abort
    !endif
    ml-write &spr "[Export to %s complete]" #l0
!emacro
