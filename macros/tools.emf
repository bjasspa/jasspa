; -!- emf -!-
; This is part of the JASSPA MicroEmacs macro files
; Copyright (C) 1998-2004 JASSPA (www.jasspa.com)
; See the file me.emf for copying and conditions.
;
; Created:     Sat Jul 18 1998
; Synopsis:    Compile, grep and macro to wrap the diff utility.
; Authors:     Steven Phillips & Jon Green
;
; Notes:       There may be a bit too much color in the diff!
;
; One off set up of tools variables.
!if &seq %tool-null-file "ERROR"
    !if &band $system 0x080
        set-variable %tool-null-file "/dev/null"
    !else
        set-variable %tool-null-file &spr "\"%s\"" &find "null" ""
    !endif
    ; Once only. Add the default grep & diff command line.
    !if &not &exi %grep-com
        set-variable %grep-com "grep"
    !endif
    !if &not &exi %diff-com
        ; Assume GNU diff utility - probably the best under all platforms !!.
        ;set-variable %diff-com "diff -c -w"
        ; Standard diff utility
        set-variable %diff-com "diff"
    !endif
!endif

add-file-hook "*compile* *grep*" fhook-ipipe

0 define-macro mouse-get-next-line
    set-cursor-to-mouse
    !force backward-line
    get-next-line
!emacro

define-macro compile
    !force set-variable %compile-tmp @1
    !if $status
        set-variable %compile-com %compile-tmp
        unset-variable %compile-tmp
    !else
        !if &seq %compile-com "ERROR"
            set-variable %compile-com "make "
        !endif
        set-variable %compile-com @ml20 "compile" %compile-com
    !endif
    @# save-some-buffers @mna
    0 ipipe-shell-command %compile-com "*compile*" @mna
!emacro
define-macro grep
    !force set-variable #l0 @1
    !if &not $status
        set-variable #l0 @ml00 %grep-com
    !endif
    !if @?
        0 pipe-shell-command &spr "%s %s %s" %grep-com #l0 %tool-null-file "*grep*" @mna
    !else
        0 ipipe-shell-command &spr "%s %s %s" %grep-com #l0 %tool-null-file "*grep*" @mna
    !endif
!emacro
define-macro rgrep
    !if &not &exi %find-com
        exec-file "find"
    !endif
    !force set-variable #l2 @3
    !if &not $status
        set-variable #l0 @ml00 "RGrep for"
        set-variable #l1 @ml01 "RGrep from directory"
        set-variable #l2 @ml00 "RGrep file mask"
    !else
        set-variable #l0 @1
        set-variable #l1 @2
    !endif
    !if &seq $platform "win32"
         ; If this is a drive then add a dot to the end.
         !if &xis #l1 "[a-z]:/"
             set-variable #l1 &cat #l1 "."
         !endif
         set-variable #l1 &xrep #l1 "/$" ""
         set-variable #l1 &rep #l1 "/" "\\"
        !if @?
            4 pipe-shell-command &spr "%s \"%s\" -name \"%s\" -exec %s \"%s\" {} %s ;" %find-com #l1 #l2 %grep-com #l0 %tool-null-file "*grep*" @mna
        !else
            4 ipipe-shell-command &spr "%s \"%s\" -name \"%s\" -exec %s \"%s\" {} %s ;" %find-com #l1 #l2 %grep-com #l0 %tool-null-file "*grep*" @mna
        !endif
    !else
        !if @?
            0 pipe-shell-command &spr "%s \"%s\" -name \"%s\" -exec %s \"%s\" {} %s \\;" %find-com #l1 #l2 %grep-com #l0 %tool-null-file "*grep*" @mna
        !else
            0 ipipe-shell-command &spr "%s \"%s\" -name \"%s\" -exec %s \"%s\" {} %s \\;" %find-com #l1 #l2 %grep-com #l0 %tool-null-file "*grep*" @mna
        !endif
    !endif
!emacro
define-macro which
    !force set-variable #l0 @1
    !if &not $status
        set-variable #l0 @ml04 "Program name"
    !endif
    set-variable .result &which #l0
    !if &seq .result "ERROR"
        ml-write "[Program not found]"
        !abort
    !endif
    ml-write .result
!emacro

define-macro diff
    !force set-variable #l1 @2
    !if $status
        set-variable #l0 @1
    !else
        set-variable #l0 @ml04 "Old File"
        set-variable #l1 @ml04 "New File"
    !endif
    4 ipipe-shell-command &spr "%s \"%s\" \"%s\"" %diff-com #l0 #l1 "*diff*"
    !force popup-window  "*diff*"
!emacro

define-macro diff-changes
    !if &seq $buffer-fname ""
        ml-write "[Current buffer has no file name]"
        !abort
    !endif
    !if &bmod "edit"
        !if &iseq @mc1 "Save buffer first [y/n]? " "nNyY" "y"
            save-buffer
        !endif
    !endif
    ; get the real file name - this only has effect on unix, copes with symbolic links
    set-variable #l0 &stat "a" $buffer-fname
    ; get the backup name
    set-variable #l1 $buffer-backup
    diff #l1 #l0
!emacro
define-macro execute-tool
    !if @?
        set-variable #l9 @#
    !else
        !force set-variable #l9 @1
        !if &not $status
            set-variable #l9 @ml "Tool name"
        !endif
    !endif
    !if &seq "" &set #l1 &reg "/history" &spr "%s/tool/%s/command" $platform #l9 ""
        ml-write "[No command-line set]"
        !abort
    !endif
    !if &seq $buffer-fname ""
        !if &or &or &or &or &sin "%ff" #l1 &sin "%fp" #l1 &sin "%fn" #l1 &sin "%fb" #l1 &sin "%fe" #l1
            ml-write "[Cannot run command it this buffer - no file name]"
            !abort
        !endif
        set-variable #l4 $buffer-bname
        set-variable #l5 $buffer-bname
        set-variable #l6 ""
    !else
        set-variable #l2 $buffer-fname
        !if &seq "" &set #l4 &rig #l2 &rsin "/" #l2
            ; cope with a directory name
            set-variable #l3 &lef #l2 &rsin "/" &lef #l2 &sub &len #l2 1
            set-variable #l4 &rig #l2 &len #l3
        !else
            set-variable #l3 &lef #l2 &rsin "/" #l2
        !endif
        !if &set #l5 &rsin "." #l4
            set-variable #l6 &rig #l4 &sub #l5 1
            set-variable #l5 &lef #l4 &sub #l5 1
        !else
            ; cope with no extension
            set-variable #l5 #l4
            set-variable #l6 ""
        !endif
        !if &band $system 0x400
            set-variable #l2 &rep #l2 "/" "\\"
            set-variable #l3 &rep #l3 "/" "\\"
        !endif
        set-variable #l1 &rep #l1 "%ff" #l2
        set-variable #l1 &rep #l1 "%fp" #l3
        set-variable #l1 &rep #l1 "%fn" #l4
        set-variable #l1 &rep #l1 "%fb" #l5
        set-variable #l1 &rep #l1 "%fe" #l6
    !endif
    set-variable #l0 &reg "/history" &spr "%s/tool/%s/flag" $platform #l9 0x1a
    !if &and &bmod "edit" &band #l0 0x01
        !if &band #l0 0x02
            !if &iseq @mc1 "Save buffer first [y/n]? " "nNyY" "y"
                save-buffer @mna
            !endif
        !else
            save-buffer @mna
        !endif
    !endif
    !if &band #l0 0x04
        &cond &band #l0 0x08 1 0 save-some-buffers @mna
    !endif
    !if &seq "" &set #l2 &reg "/history" &spr "%s/tool/%s/bname" $platform #l9 ""
        set-variable #l3 1
    !else
        set-variable #l3 0
        set-variable #l2 &rep #l2 "%fn" #l4
        set-variable #l2 &rep #l2 "%fb" #l5
        set-variable #l2 &rep #l2 "%fe" #l6
    !endif
    !if &band #l0 0x20
        set-variable #l3 &bor #l3 2
    !endif
    !if &band #l0 0x40
        #l3 ipipe-shell-command #l1 #l2
    !elif &band #l0 0x10
        #l3 pipe-shell-command #l1 #l2
    !else
        shell-command #l1
    !endif
!emacro

; uniq - As per the unix command, removes duplicated lines in a
; sorted region. Operates about point and mark.
; Jon. Added 99/12/11; missing from our toolset.
define-macro uniq
    set-variable #l0 $window-line
    set-alpha-mark "t"
    exchange-point-and-mark
    !if &gre $window-line #l0
        set-variable #l0 $window-line
        set-alpha-mark "t"
        exchange-point-and-mark
    !endif
    beginning-of-line
    set-variable #l1 @wl
    !force forward-line
    ; Check for end of buffer.
    !if &not $status
        goto-alpha-mark "t"
        !return
    !endif
    ; Check the remaining lines.
    !while &less $window-line #l0
        !if &seq #l1 @wl
            kill-line
            set-variable #l0 &sub #l0 1
        !else
            set-variable #l1 @wl
            !force forward-line
            !if &not $status
                goto-alpha-mark "t"
                !return
            !endif
        !endif
    !done
    goto-alpha-mark "t"
!emacro

; reread-file - reloads the current buffer's file into the current buffer
define-macro reread-file
    !if &seq $buffer-fname ""
        ml-write "[Invalid buffer]"
        !bell
        !abort
    !endif
    0xce set-position "\x81"
    ; are we at the end of the buffer?
    set-variable #l7 &seq @wc ""
    ; is the file loaded in binary or crypt mode?
    !if &bmod "binary"
        1 global-mode "binary"
    !endif
    !if &bmod "crypt"
        1 global-mode "crypt"
    !endif
    !force !force @# read-file $buffer-fname @mna
    set-variable #l0 $status
    -1 global-mode "binary"
    -1 global-mode "crypt"
    !if &not #l0
        !abort
    !endif
    !force goto-position "\x81"
    !if #l7
        end-of-buffer
    !endif
!emacro

define-macro find-bfile
    &bor @# 2 find-file @mna
!emacro

define-macro find-cfile
    &bor @# 4 find-file @mna
!emacro

