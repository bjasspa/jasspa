;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;  Created By    : Jon Green
;  Created       : Thu Feb 11 01:51:42 1999
;  Last Modified : <000719.0012>
;
;  Description   : Hilighting line functions.
;
;  Notes         : This file contains the line hilighting macros. A single
;                  dialogue is provided to search for the lines and apply 
;                  the appropriate hilighting.
; 
;                  This is only my 2nd ever dialogue so please do not expect
;                  too much !!!
;
;  History       : 11th Feb 1999 - Original. 
;
;  Copyright (c) 1999 JASSPA.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

!if &seq .osd.hisearch "ERROR"
    set-variable .osd.hisearch     &pinc .osd.next 1
    set-variable .osd.hisearch-col &pinc .osd.next 1
    set-variable .osd.hisearch-str ""
    set-variable .osd.hisearch-name "Remove"
    set-variable .scheme.osd-hisearch .scheme.osd-ebtt
!endif
;
; Set the line scheme of a single line - Called from the
; hilight line pop-up in mouse.emf. In this instance we
; search for the mouse region. We apply the following
; tests:-
;
; a) Point in line selected (i.e. mark == point)
;
;    Hilight the line.
;
; b) Region in the line selected. Both point and
;    mark are on the same line.
;
;    Search for all lines that match the pattern
;
; c) Region selected mark & point different lines
;
;    Block up the region with appropriate hilight.
;
0 define-macro line-scheme
    ; Get the properties of the line color.
    !if @?
        set-variable #l5 @#
    !else
        set-variable #l5 -1
    !endif
    ; Determine the markup region on the screen
    0 show-region
    !if &equ &band $result 0x6 0x6
        set-alpha-mark "."
        ; Goto start of region and get the extents.
        -2 show-region
        set-variable #l1 $window-line
        set-variable #l2 $window-col
        set-alpha-mark "<"
        2 show-region
        set-variable #l3 $window-line
        set-variable #l4 $window-col
        set-alpha-mark ">"
        goto-alpha-mark "."

        ; Check the lines to see if they are the same
        !if &equ #l1 #l3
            ; If the columns are the same this is a point then only
            ; hilight the line.
            !if &equ #l2 #l4
                ; Protect folded lines
                !if &or &equ $line-scheme -1 &not &or &gre $line-scheme .scheme.hlcyan &les $line-scheme .scheme.hlwhite
                    set-variable $line-scheme #l5
                !endif
            !else
                ; The columns are different assume that this is a selection
                ; search. Get the selected region by using the yank buffer
                ; to get the search string. Once we have the search string
                ; then we convert this to a non regular expression and
                ; locate *ALL* of the lines that are carrying this pattern.
                goto-alpha-mark "<"
                set-mark
                goto-alpha-mark ">"
                copy-region
                set-variable #l9 @y
                -1 yank
                str-to-regex #l9
                beginning-of-buffer
                !repeat
                    !force search-forward #l9
                    set-variable #l8 $status
                    !if #l8
                        ; Protect folded lines
                        !if &or &equ $line-scheme -1 &not &or &gre $line-scheme .scheme.hlcyan &les $line-scheme .scheme.hlwhite
                            set-variable $line-scheme #l5
                        !endif
                    !endif
                !until &not #l8
            !endif
        !else
            ; Block fill the region. First decide which is the smallest and
            ; then select all of the lines to the hilighted state.
            !if &les #l1 #l3
                set-variable #l7 #l1
                set-variable #l8 #l4
                set-variable #l6 &sub #l3 #l7
            !else
                set-variable #l7 #l3
                set-variable #l8 #l2
                set-variable #l6 &sub #l1 #l7
            !endif
            ; If we are not at column 0 then add 1, this is effectivelly
            ; where the selection region has spilled over onto the next
            ; line.
            !if &gre #l8 0
                set-variable #l6 &add #l6 1
            !endif
            ; Back to the start of the region and apply block hilight.
            goto-line #l7
            !repeat
                ; Protect folded lines
                !if &or &equ $line-scheme -1 &not &or &gre $line-scheme .scheme.hlcyan &les $line-scheme .scheme.hlwhite
                    set-variable $line-scheme #l5
                !endif
                set-variable #l6 &sub #l6 1
                !force forward-line
            !until &not &and $status &gre #l6 0
        !endif
        ; Restore our cursor position
        goto-alpha-mark "."
    !else
        ; Not sure what this is. Simply hilight the line.
        ; Protect folded lines.
        !if &or &equ $line-scheme -1 &not &or &gre $line-scheme .scheme.hlcyan &les $line-scheme .scheme.hlwhite
            set-variable $line-scheme #l5
        !endif
    !endif
!emacro
;
; Remove the line scheme colors from the buffer.  - Called from the 
; hilight line pop-up in mouse.emf
;
0 define-macro line-scheme-all
    set-alpha-mark "a"
    beginning-of-buffer
    !repeat 
        !if &not &or &gre $line-scheme .scheme.hlcyan &les $line-scheme .scheme.hlwhite
            set-variable $line-scheme -1
        !endif
        !force forward-line
    !until &not $status
    goto-alpha-mark "a"
!emacro
;
; Hilighting search dialog
;
0 define-macro osd-hisearch-set
    !if &equ @# -1
        set-variable .osd.hisearch-str @ml25 "" .osd.hisearch-str
    !else
        set-variable $result .osd.hisearch-str
    !endif
!emacro
;
; Search the buffer for the next hilighting line.
;
0 define-macro osd-hisearch-exec
    !if &seq .osd.hisearch-str ""
        osd .osd.hisearch 130 "c" "No search string set!"
    !else
        set-variable #l8 &cond &equ .scheme.osd-hisearch .scheme.osd-ebtt -1 .scheme.osd-hisearch
        set-variable #l9 @#
        ; Type 4 - Handle all of the buffer 
        !if &equ #l9 4
            set-alpha-mark "a"
            beginning-of-buffer
            !goto forward-search
        ; Type 3 - Handle to the end of the buffer 
        !elif &equ #l9 3
            set-alpha-mark "a"
*forward-search            
            set-variable #l2 0
            !repeat
                !force search-forward .osd.hisearch-str
                set-variable #l0 $status
                !if #l0 
                    set-variable $line-scheme #l8
                    set-variable #l2 &add #l2 1
                !endif
            !until &not #l0
            goto-alpha-mark "a"
            osd .osd.hisearch 130 "c" &spr "%d match(s)" #l2
        ; Type -3 - handle to the top of the buffer
        !elif &equ #l9 -3
            set-alpha-mark "a"
            set-variable #l2 0
            !repeat
                !force search-backward .osd.hisearch-str
                set-variable #l0 $status
                !if #l0 
                    set-variable $line-scheme #l8
                    set-variable #l2 &add #l2 1
                !endif
            !until &not #l0
            goto-alpha-mark "a"
            osd .osd.hisearch 130 "c" &spr "%d match(s)" #l2
        !else
            ; Type -1 - Previous
            !if &les @# 0
                !force search-backward .osd.hisearch-str
            ; Type 1 - Next
            !else
                !if &equ @# 1
                    beginning-of-buffer
                !endif
                !force search-forward .osd.hisearch-str
            !endif
            !if $status
                osd .osd.hisearch 130 "c" &cat "Found on line " $window-line
                set-variable $line-scheme #l8
            !else
                osd .osd.hisearch 130 "c" "Not found!"
            !endif
        !endif
    !endif
    0 screen-update
!emacro
;
; Check the search modes
;
0 define-macro osd-hisearch-checks
    !if &equ &abs @# 2
        set-variable #l0 "magic"
    !else
        set-variable #l0 "exact"
    !endif
    !if &les @# 0
        0 buffer-mode #l0
    !elif &not &bmod #l0
        !abort
    !endif
!emacro
;
; Selection of the line scheme and name - re-render the 
; menu line within the OSD as a side effect.
;
0 define-macro osd-hisearch-line-scheme
    set-variable .scheme.osd-hisearch @#
    !if &equ .scheme.hlwhite .scheme.osd-hisearch
        set-variable .osd.hisearch-name "white  "
    !elif &equ .scheme.hlblue .scheme.osd-hisearch
        set-variable .osd.hisearch-name "blue   "
    !elif &equ .scheme.hlgreen .scheme.osd-hisearch
        set-variable .osd.hisearch-name "green  "
    !elif &equ .scheme.hlred .scheme.osd-hisearch
        set-variable .osd.hisearch-name "red    "
    !elif &equ .scheme.hlyellow .scheme.osd-hisearch
        set-variable .osd.hisearch-name "yellow "
    !elif &equ .scheme.hlblack .scheme.osd-hisearch
        set-variable .osd.hisearch-name "black  "
    !elif &equ .scheme.hlcyan .scheme.osd-hisearch
        set-variable .osd.hisearch-name "cyan   "
    !elif &equ .scheme.hlmagenta .scheme.osd-hisearch
        set-variable .osd.hisearch-name "magenta"
    !else
        set-variable .osd.hisearch-name "Remove "
    !endif
    osd .osd.hisearch 60  "MHmsxfR"   .scheme.osd-hisearch &spr "            %s           " .osd.hisearch-name .osd.hisearch-col 
!emacro
;
; Set all of the OS line scheme scheme colors.
;
0 define-macro osd-hisearch-line-scheme-all
    line-scheme-all
    0 screen-update
!emacro
;
; Colour selection pop-up
;
osd .osd.hisearch-col 0 "b"
osd .osd.hisearch-col 1 "Hc" .scheme.hlwhite   "&white  " .scheme.hlwhite   osd-hisearch-line-scheme
osd .osd.hisearch-col 2 "Hc" .scheme.hlblack   "&black  " .scheme.hlblack   osd-hisearch-line-scheme
osd .osd.hisearch-col 3 "Hc" .scheme.hlred     "&red    " .scheme.hlred     osd-hisearch-line-scheme
osd .osd.hisearch-col 4 "Hc" .scheme.hlgreen   "&green  " .scheme.hlgreen   osd-hisearch-line-scheme
osd .osd.hisearch-col 5 "Hc" .scheme.hlyellow  "&yellow " .scheme.hlyellow  osd-hisearch-line-scheme
osd .osd.hisearch-col 6 "Hc" .scheme.hlblue    "b&lue   " .scheme.hlblue    osd-hisearch-line-scheme
osd .osd.hisearch-col 7 "Hc" .scheme.hlmagenta "&magenta" .scheme.hlmagenta osd-hisearch-line-scheme
osd .osd.hisearch-col 8 "Hc" .scheme.hlcyan    "&cyan   " .scheme.hlcyan    osd-hisearch-line-scheme
osd .osd.hisearch-col 9 "c" "            &Remove            " .scheme.osd-ebtt osd-hisearch-line-scheme
;
; Main selection dialog
;
osd .osd.hisearch 00  "batcdHs" 3 6 54 0 -1 -1 150 .scheme.osd-title "Hilighting Search"
osd .osd.hisearch 10  ""
osd .osd.hisearch 20  "Shf" "  &Search for : " 30
osd .osd.hisearch 30  "ExfH" .scheme.osd-entry "##############################" 1 osd-hisearch-set
osd .osd.hisearch 40  ""
osd .osd.hisearch 50  "Sfh"  "       &Color : " 80
osd .osd.hisearch 60  "MHmsxfR"  .scheme.osd-hisearch &spr "            %s           " .osd.hisearch-name .osd.hisearch-col
osd .osd.hisearch 70  ""
osd .osd.hisearch 80  "hf"   "       "
osd .osd.hisearch 90  "Cfxp" "^[ *] Case sensi&tive" 1 osd-hisearch-checks
osd .osd.hisearch 100 "hf"   "       "
osd .osd.hisearch 110 "Cfxp" "^[ *] &Magic mode"       2 osd-hisearch-checks
osd .osd.hisearch 120 ""
osd .osd.hisearch 130 ""
osd .osd.hisearch 140 ""
osd .osd.hisearch 150 "BhcfxH" .scheme.osd-ebtt "  &Below  "  3 osd-hisearch-exec
osd .osd.hisearch 160 "BhcfxH" .scheme.osd-ebtt "  Abo&ve  " -3 osd-hisearch-exec
osd .osd.hisearch 170 "BhcfxH" .scheme.osd-ebtt "   &All   "  4 osd-hisearch-exec
osd .osd.hisearch 180 "BcfxH"  .scheme.osd-ebtt "C&lear All"  f osd-hisearch-line-scheme-all
osd .osd.hisearch 190  ""
osd .osd.hisearch 200 "BhcfxH" .scheme.osd-ebtt "  &First  "  1 osd-hisearch-exec
osd .osd.hisearch 210 "BhcfxH" .scheme.osd-ebtt "  &Next   "  2 osd-hisearch-exec
osd .osd.hisearch 220 "BhcfxH" .scheme.osd-ebtt " &Reverse " -1 osd-hisearch-exec
osd .osd.hisearch 230 "BcfH"   .scheme.osd-ebtt "  E&xit   "  1 void
;
; Entry point macro to invoke the hilighing search dialog.
;
define-macro line-scheme-search
    .osd.hisearch osd
!emacro


