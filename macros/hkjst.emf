; -!- emf -!-
; This is part of the JASSPA MicroEmacs macro files
; Copyright (C) 2002-2005 JASSPA (www.jasspa.com)
; See the file me.emf for copying and conditions.
;
;  Created:    Mon Jan 14 2002
; Synopsis:    Document hook for ASCII text documentation
; Authors:     Jon Green & Steven Phillips
;
; Notes:       broken out of hkdoc.emf and docmacro.emf
;
define-macro fhook-jst
    set-variable #l1 $result
    @# buffer-init "jst"
    doc-buffer-context-init
    ; Over-ride any special document modes
    ; Search for additional modes in a:
    ;     -!- jst; fill-column: <digit> ; fill-mode: <mode> -!-
    ;
    !if &not &seq #l1 ""
       !if &xseq #l1 ".*fill-column:[ \t]*\\([0-9]+\\)[ \t]*;.*"
            set-variable :fill-col @s1
        !endif
        !if &xseq #l1 ".*fill-mode:[ \t]*\\([a-zA-Z]+\\)[ \t]*;.*"
            set-variable #l0 @s1
            !if &iseq #l0 "left"
                set-variable :fill-mode "L"
            !elif &iseq #l0 "none"
                set-variable :fill-mode "n"
            !elif &iseq #l0 "right"
                set-variable :fill-mode "R"
            !elif &iseq #l0 "full"
                set-variable :fill-mode "B"
            !elif &iseq #l0 "both"
                set-variable :fill-mode "B"
            !elif &iseq #l0 "center"
                set-variable :fill-mode "C"
            !endif
            beginning-of-line
        !endif
        ; Add any others in here.
        
        ; Back to the start of the buffer
        beginning-of-buffer
    !endif
    buffer-init-hooks
!emacro

; buffer-init variables
set-variable .fhook-jst.setup &reg "/history/fhook/jst" "fghijnopswx"
set-variable .fhook-jst.setup-mask "aefghijkmnopstuwx"
set-variable .fhook-jst.comment "|>||>|> | <||"
set-variable .fhook-jst.insert-emphasis 1

set-variable .fhook-jst.command-flag  "|bo|bo|thb|hb|thb|th|th|th|th|th|h|h|thb|thb|thb|thb|thb|h|h|th|h|h|thb|thb|thb|thb|thb|"
set-variable .fhook-jst.command-name  "|jst-fill-paragraph|jst-fill-paragraph|doc-mode-state|spell-buffer|paragraph-to-line|jst-to-html|jst-to-latex|jst-to-rtf|jst-to-text||||fill-paragraph-both|fill-paragraph-center|fill-paragraph-left|fill-paragraph-gutter|fill-paragraph-right|fill-paragraph|ifill-paragraph||||doc-set-justify|doc-set-justify|doc-set-justify|doc-set-justify|doc-set-justify|"
set-variable .fhook-jst.command-nbind "|||||||||||||||||||||||0|1|2|3|4|"
set-variable .fhook-jst.command-kbind "|esc q|esc o|C-c C-h|C-c C-s|C-c o||||||||C-c C-b|C-c C-c|C-c C-l|C-c C-g|C-c C-r||||||C-c a|C-c b|C-c c|C-c l|C-c n|"
set-variable .fhook-jst.command-desc  "|||\HShow Current Settings|Spell Check Buffer|Fill Paragraph for WP Export|Export to HTML|Export to LaTeX|Export to RTF|Export to Plain Text||To format current paragraph:||Justify Both Margins|Justify Center|Justify Left|Justify Gutter (on left margin)|Justify Right|Format Paragraph in Current Mode|Intelligently Format Paragraph||To change justification mode:||Change to auto justification [DEFAULT]|Change to both justification|Change to center justification|Change to left justification|Change to none justification|"

; setup item-list
set-variable .fhook-jst.item-list-s1 "^[ \t]*\\([0-9]+\\)\\.0[ \t]+\\(\\S.*\\)"
set-variable .fhook-jst.item-list-r1 "Sct  \ecB\\1 \\2\ecA"
set-variable .fhook-jst.item-list-s2 "^[ \t]*\\([0-9]+\\.[1-9][0-9]*\\)[ \t]+\\(\\S.*\\)"
set-variable .fhook-jst.item-list-r2 "SSct \ecB\\1 \\2\ecA"
set-variable .fhook-jst.item-list-s3 "^[ \t]*\\([0-9]+\\.[0-9]+\\.[0-9.]+\\)[ \t]+\\(\\S.*\\)"
set-variable .fhook-jst.item-list-r3 "SSSc \ecB\\1 \\2\ecA"
set-variable .fhook-jst.item-list-s4 "^[ \t]*Appendix \\([[:alpha:]].*\\)"
set-variable .fhook-jst.item-list-r4 "Appx \ecB\\1\ecA"

!if &sin "f" .fhook-jst.setup
    set-variable .fhook-jst.collapse-open  "^[ \t]*\\(Appendix[ \t]+[[:alpha:]]\\|[0-9]\\.[0-9.]*\\)[ \t]+\\w"
    set-variable .fhook-jst.collapse-close "^[ \t]*\\(Appendix[ \t]+[[:alpha:]]\\|[0-9]\\.[0-9.]*\\)[ \t]+\\w\\|\\'"
    set-variable .fhook-jst.collapse-mnext "-1"
!endif

!if &and &sin "h" .fhook-jst.setup &band .hilight.flags 0x02 
    !if &not &exist .hilight.jst
        set-variable .hilight.jst  &pinc .hilight.next 1
        set-variable .hilight.jst1 &pinc .hilight.next 1
        set-variable .hilight.jst2 &pinc .hilight.next 1
        set-variable .hilight.jst3 &pinc .hilight.next 1
    !endif
    ; Define the hilighting. Note that we use a look back so that
    ; we can process the inserted schemes if necessary. Ordinarily
    ; we do not need it. This will only hurt branch tokens, as there
    ; are none below then there is no adverse effect.
    0 hilight  .hilight.jst 2 100                               $global-scheme
    hilight .hilight.jst 0x22 "[0-9]+\\.[0-9.]+[ \t]+\\S"       .scheme.header
    hilight .hilight.jst 0x22 "Appendix [[:alpha:]]"            .scheme.header
    hilight .hilight.jst 0x22 "===+$"                           .scheme.header
    hilight .hilight.jst 0x22 "---+$"                           .scheme.header
    hilight .hilight.jst 0x20 "*\\}[ \t]+\\S"                   .scheme.no1
    hilight .hilight.jst 0x20 "[0-9]+[]).]\\}[ \t]+\\S"         .scheme.no1
    hilight .hilight.jst 0x20 "[a-z][]).]\\}[ \t]+\\S"          .scheme.no1
    hilight .hilight.jst 0x20 "[A-Z][]).]\\}[ \t]+\\S"          .scheme.no1
    hilight .hilight.jst 0x20 "[IVXLC]+[]).]\\}[ \t]+\\S"       .scheme.no1
    hilight .hilight.jst 0x20 "[ivxlc]+[]).]\\}[ \t]+\\S"       .scheme.no1
    hilight .hilight.jst 0x20 "\\[\\S[^]\n]*]"                  .scheme.no1
    hilight .hilight.jst 0x22 "^___+$"                          .scheme.no1
    hilight .hilight.jst 0x40 "^\x0c$" "<<Page-Break>>"         .scheme.keyword
    hilight .hilight.jst 0x00 "\\*\\S[^*\n]*\\*"                .scheme.bold
    hilight .hilight.jst 0x00 "~\\S[^~\n]*~"                    .scheme.italic
    hilight .hilight.jst 0x00 "_\\S[^_\n]*_"                    .scheme.under
    hilight .hilight.jst 0x00 "@\\S[^@\n]*@"                    .scheme.no2
    hilight .hilight.jst 0x04 "`" "'" ""                        .scheme.bold-italic
    hilight .hilight.jst 0x00 "^\\s*\\[\\w*\\]"                 .scheme.no1
;    hilight .hilight.jst 0x804 "\"" "\"" "\\"                   .scheme.string
;    hilight .hilight.jst 0x00 "'.'"                             .scheme.quote
;    hilight .hilight.jst 0x00 "'\\\\.'"                         .scheme.quote
    hilight .hilight.jst 0x02 "^>"                              .scheme.comment
    hilight .hilight.jst 0x80 "^>!" .hilight.jst2               .scheme.hide
    hilight .hilight.jst 0x04 "^>!>" "^>end>" ""                $global-scheme
    hilight .hilight.jst 0x80 "^>@" .hilight.jst1               .scheme.no2
    hilight .hilight.jst 0x04 "^>@>" "^>end>" ""                .scheme.no2
    hilight .hilight.jst 0x80 "^>@\\." .hilight.jst1            .scheme.no2
    hilight .hilight.jst 0x04 "^>@\\.>" "^>end>" ""             .scheme.no2
    hilight .hilight.jst 0x00 "^>\\."                           .scheme.hide
    hilight .hilight.jst 0x00 "^>\\.>"                          .scheme.hide
    hilight .hilight.jst 0x00 "^>\\.@"                          .scheme.hide
    hilight .hilight.jst 0x00 "^>\\.@>"                         .scheme.hide
    hilight .hilight.jst 0x00 "^>jst>"                          .scheme.hide
    hilight .hilight.jst 0x00 "^>end>"                          .scheme.hide
    hilight .hilight.jst 0x00 "<<>>"                            .scheme.hide
    hilight .hilight.jst 0x00 "<<.>>"                           $global-scheme
    hilight .hilight.jst 0x04 "<<fb>>" "<</fb>>" ""             .scheme.bold
    hilight .hilight.jst 0x04 "<<fe>>" "<</fe>>" ""             .scheme.bold-italic
    hilight .hilight.jst 0x04 "<<fi>>" "<</fi>>" ""             .scheme.italic
    hilight .hilight.jst 0x04 "<<fm>>" "<</fm>>" ""             .scheme.no2
    hilight .hilight.jst 0x04 "<<fu>>" "<</fu>>" ""             .scheme.under
    hilight .hilight.jst 0x80 "<<[[:alnum:]]*:?" .hilight.jst3  .scheme.keyword
    hilight .hilight.jst 0x80 "<</[[:alnum:]]*:?" .hilight.jst3 .scheme.keyword
    ; HTTP links etc.
    hilight .hilight.jst 0    "http:[-@~_a-zA-Z%\\.:\\/0-9]*"   .scheme.link
    hilight .hilight.jst 0    "https:[-@~_a-zA-Z%\\.:\\/0-9]*"  .scheme.link
    hilight .hilight.jst 0    "ftp:[-@_a-zA-Z%\\.:\\/0-9]+"     .scheme.link
    hilight .hilight.jst 0    "mailto:[-@_a-zA-Z%\\.:\\/0-9]+"  .scheme.link
    hilight .hilight.jst 0    "news:[-_a-zA-Z%\\.:\\\\/@0-9]+"  .scheme.link 
    ; >@ block
    0 hilight .hilight.jst1 0                                   .scheme.no2
    hilight   .hilight.jst1 0x80 "^[ \t]*\n" .hilight.jst       $global-scheme
    ; >! block
    0 hilight .hilight.jst2 0                                   $global-scheme
    hilight   .hilight.jst2 0x80 "^[ \t]*\n" .hilight.jst       $global-scheme
    ; <<..>> block
    0 hilight .hilight.jst3 0                                   .scheme.type
    hilight .hilight.jst3 0x04 "<<" ">>" ""                     .scheme.keyword
    hilight .hilight.jst3 0x00 "<<>>"                           .scheme.hide
    hilight .hilight.jst3 0x00 "<<.>>"                          .scheme.type
    hilight .hilight.jst3 0x04 "<<" ">>" ""                     .scheme.keyword
    hilight .hilight.jst3 0x80 ">>" .hilight.jst                .scheme.keyword
    
    ; Allow inserts into the jst mode. You may add to the
    ; available inserts by adding to your myjst.emf file
    
    0 define-macro jst-add-file-support
        set-variable #l0 @1
        ; Force the hilighting mode to load if not already loaded.
        !if &not &exi &cat ".hilight." #l0
            !force execute-file &cat "hk" #l0
            ml-write &cat "executed " #l0
        !endif
        ; If the hilighting mode is loaded then modify it.
        !if &and &sin "h" &ind &spr ".fhook-%s.setup" #l0 &band .hilight.flags 0x02 
            hilight .hilight.jst 0x80 &spr "^>%s>" #l0 &ind &cat ".hilight." #l0 .scheme.hide
            hilight &ind &cat ".hilight." #l0 0x80 "^>end>" .hilight.jst .scheme.hide
        !endif
    !emacro
    
    ; Allow MicroEmacs Macro .emf inserts
    ; Force the ".emf" scheme to be loaded into the context of the jst
    ; scheme. We delimit the .emf scheme with a pair of markers ">emf>" and
    ; ">end>"
    jst-add-file-support "emf"
    ; Allow Pseudo Code inserts
    jst-add-file-support "pseudo"
    ; Allow BNF inserts
    jst-add-file-support "bnf"
    ; Allow C Code inserts
    jst-add-file-support "c"
    ; Allow C++ Code inserts ...
    jst-add-file-support "cpp"
    ; Allow Perl Code inserts ...
    jst-add-file-support "perl"
    ; Allow TCL Code inserts ...
    jst-add-file-support "tcl"
!endif

; Set up for jst mode.
0 define-macro bhook-jst
    doc-buffer-context
!emacro

0 define-macro ehook-jst
    doc-global-context
!emacro


; must replace the normal fill-paragraph with one which will skip inserts 
0 define-macro jst-fill-paragraphi
    set-variable #l1 &cond &les @# 0 -1 1
    set-variable #l2 &abs @#
    !repeat
        !if &xseq @wl ">[^ \t\n>]+>.*"
            !if &seq &lef @wl 5 ">end>"
                ml-write "[Unexpected >end> tag]"
                !abort
            !endif
            !force search-buffer "em" "^>end>"
            !if &not $status
                beginning-of-line
                ml-write "[Missing >end> tag]"
                !abort
            !endif
            forward-line
            beginning-of-line
            !if &not &seq "" &trb @wl
                insert-newline
                backward-line
            !endif
        !else
            #l1 fill-paragraph @mna
        !endif
        !if &not &dec #l2 1
            !return
        !endif
        forward-paragraph
        backward-paragraph
    !until 0
!emacro

define-macro jst-fill-paragraph
    !if &not @#
        !return
    !endif
    set-position "\x81"
    ; Save the starting paragraph separator state - if the numeric argument
    ; is false then this will be used to determine if we restore the current
    ; position. 
    set-variable #l9 &xseq @wl "^[ \t]*$"
    !force search-buffer "bem" "^>[^ \t\n>]*>"
    !if $status
        !if &seq @s0 ">end>"
            goto-position "\x81"
            beginning-of-line
            forward-paragraph
            backward-paragraph
        !endif
    !else
        beginning-of-line
        forward-paragraph
        backward-paragraph
    !endif
    !force !force @# jst-fill-paragraphi
    set-variable #l1 $status
    !if &and &not @? &not #l9
        goto-position "\x81"
    !endif
    !return #l1
!emacro

; load docutl.emf to get the doc support macros
execute-file "docutl"

define-macro-file jstutl jst-to-html jst-to-latex jst-to-rtf jst-to-text

buffer-init-fhook "jst"
