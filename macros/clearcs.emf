; -!- emf -!-
; This is part of the JASSPA MicroEmacs macro files
; Copyright (C) 2005 JASSPA (www.jasspa.com)
; See the file me.emf for copying and conditions.
;
; Created:     Fri Apr 15 2005
; Synopsis:    ClearCase support macros for MicroEmacs
; Authors:     Steven Phillips
;
!if &not &exi dirlst-sort-list
    0 exec-file "hkdirlst"
!endif
!if &not &exi .osd.ccosd
    set-variable .osd.ccosd  &pinc .osd.next 1
    set-variable .osd.ccstp  &pinc .osd.next 1
    set-variable .osd.ccstpv &pinc .osd.next 1
!endif
!if &not &lfind .fhook-dirlst.sc-name "ClearCase"
    set-variable #l0 &lef .fhook-dirlst.col-name 1
    set-variable .fhook-dirlst.col-name &spr "%sVersion                 %sRule                    %s" .fhook-dirlst.col-name #l0 #l0
    set-variable .fhook-dirlst.col-flag &spr "%s1%1%s" .fhook-dirlst.col-flag #l0 #l0
    set-variable .fhook-dirlst.sc-name &lins .fhook-dirlst.sc-name -1 "ClearCase"
    set-variable .fhook-dirlst.sc-menu &lins .fhook-dirlst.sc-menu -1 "osd-cc-file-menu"
    set-variable .fhook-dirlst.sc-detect &lins .fhook-dirlst.sc-detect -1 "cc-dirlst-detect"
    set-variable .fhook-dirlst.sc-format &lins .fhook-dirlst.sc-format -1 "cc-dirlst-format"
    set-variable .fhook-dirlst.modefunc-lbl &lins .fhook-dirlst.modefunc-lbl -1 "ConfigSpec"
    set-variable .fhook-dirlst.modefunc-cmd &lins .fhook-dirlst.modefunc-cmd -1 "cc-edit-config-spec"
    set-variable .file-browser-close.bn &lins .file-browser-close.bn -1 "*cc-console*"
!endif
0 define-macro cc-init
!emacro

0 define-macro cc-coci
    !if &bmod "dir"
        ml-write "[directories not supported by cc-coci]"
        !abort
    !elif &bmod "view"
        cc-checkout
    !else
        cc-checkin
    !endif
!emacro
global-bind-key cc-coci "C-x C-q"

set-variable .cc-init.com &reg &spr "/history/%s/clearcase/com" $platform "cleartool"
set-variable .cc-init.vsep &reg "/history/clearcase/vsep" "@@"
set-variable .cc-init.vsepr .cc-init.vsep
str-to-regex .cc-init.vsepr

set-variable .cc-init.names "|State|Update|Checkout|Checkin|Add|Diff|Uncheckout|Annotate|Log|"
set-variable .cc-init.flags "|VZRFS|VZOQS*|CUS*!|CS*!|CDS*!|WXS!|KS*!|!|!|"
set-variable .cc-init.etfs  "|||ccco|ccci|ccadd|||||"

!if &band .hilight.flags 0x02
    !if &not &exi .hilight.diff
        !force execute-file "hkdiff"
    !endif
    hilight .hilight.dirlst 0x052 "\eCT........................" ""   .scheme.header
    hilight .hilight.dirlst 0x052 "\eCd........................" ""   .scheme.dir
    hilight .hilight.dirlst 0x052 "\eC-........................" ""   $global-scheme
    hilight .hilight.dirlst 0x052 "*d\\(.\\)\\(.\\)\\(.\\)\\(.\\) \eCd........................" "*d\\1\\2\\3\\4 " .scheme.dir-select
    hilight .hilight.dirlst 0x052 "*-\\(.\\)\\(.\\)\\(.\\)\\(.\\) \eC-........................" "*-\\1\\2\\3\\4 " .scheme.select
!endif

0 define-macro cc-init-comment
    set-variable .cc-init.comment ""
    set-variable .cc-init.cominit ""
    !if &exi &cat ".cc-init.comment" @#
        set-variable .cc-init.comment &ind &cat ".cc-init.comment" @#
    !endif
    !if &not &seq &set #l0 &find &lget .cc-init.etfs @# ".etf" "ERROR" 
        !force 0 find-file #l0
        !if $status
            !if &not &seq .cc-init.comment ""
                set-variable @h0 .cc-init.comment
            !endif
            beginning-of-buffer
            set-mark
            end-of-buffer
            backward-char
            copy-region
            set-variable .cc-init.comment @y
            -1 yank
            0 delete-buffer $buffer-bname
            set-variable .cc-init.cominit .cc-init.comment
            goto-position "\x82"
        !endif
    !endif
!emacro
0 define-macro cc-osd-mec
    !if &les @# 0
        set-variable .cc-init.comment @ml2 "" .cc-init.comment
    !else
        set-variable $result .cc-init.comment
    !endif
!emacro
0 define-macro cc-osd-cbc
    !if &les @# 0
        set-variable #l0 &abs @#
        set-variable .cc-osd.values &lset .cc-osd.values #l0 &bxor 1 &lget .cc-osd.values #l0
    !elif &not &lget .cc-osd.values @#
        !abort
    !endif
!emacro
0 define-macro cc-osd
    set-position "\x82"
    !if &exi .cc-init.lock
        osd-xdialog &cat "ClearCase - " &lget .cc-init.names @# &spr "    ClearCase %s command currently in progress!    " &lget .cc-init.names .cc-init.lock 2 "  \HIgnore  " "  \HAbort  "
        !if &not &equ $result 1
            !abort
        !endif
    !endif
    set-variable #l9 &lget .cc-init.flags @#
    set-variable .values @1
    !if &seq $buffer-fname ""
        osd-dialog &cat "ClearCase - " &lget .cc-init.names @# "    Current buffer has no file name!    " "  \HAbort  "
        !abort
    !endif
    set-variable .cc-init.cwd &lef $buffer-fname &rsin "/" $buffer-fname
    !if &not &seq &stat "t" .cc-init.cwd "D"
        osd-dialog &cat "ClearCase - " &lget .cc-init.names @# "    Current buffer is not located in a directory!    " "  \HAbort  "
        !abort
    !endif
    !force unset-variable .cc-init.refresh
    !if &bmod "dir"
        dirlst-tag-list
        goto-position "\x82"
    !elif &seq $buffer-bname "*cc-state*"
        cc-state-tag-list
        goto-position "\x82"
    !else
        !if &sin "S" #l9
            !if &and &bmod "edit" &not &seq &lef $buffer-bname 1 "*"
                set-variable #l0 @mc1 "Save buffer first [y/n]? " "nNyY"
                !if &iseq #l0 "y"
                    save-buffer @mna
                !endif
            !endif
        !endif
        set-variable .find-file.file-count 1
        set-variable .find-file.file-dcount 0
        set-variable .find-file.file-dir &lef $buffer-fname &set #l0 &rsin "/" $buffer-fname
        set-variable .find-file.file1 &rig $buffer-fname #l0
    !endif
    !if &sin "s" #l9
        !if &not &equ .find-file.file-count 1
            osd-dialog &cat "ClearCase - " &lget .cc-init.names @# "    This tool can only opperate on one specific file at a time!    " "  \HAbort  "
            !abort
        !endif
    !elif &not &sin "Z" #l9
        !if &not .find-file.file-count
            osd-dialog &cat "ClearCase - " &lget .cc-init.names @# "    This tool can only opperate on selected files!    " "  \HAbort  "
            !abort
        !endif
    !endif
    -1 osd .osd.ccosd
    osd .osd.ccosd 0 ""
    set-variable #l0 0
    set-variable #l3 0
    !while &not &seq "" &set #l1 &mid #l9 &pinc #l0 1 1
        !if &not &sin #l1 "Ss*!"
            set-variable #l2 &mul #l0 100
            osd .osd.ccosd &inc #l2 1 ""
            !if &seq #l1 "C"
                @# cc-init-comment
                osd .osd.ccosd &inc #l2 1 "Sf" "    \HComment:" &add #l2 2
                osd .osd.ccosd &inc #l2 1 "fh" "    "
                osd .osd.ccosd &inc #l2 1 "EtNxHfhz" .scheme.osd-entry 60 10 "" f cc-osd-mec
                !if &not &seq .cc-init.comment ""
                    set-variable #l3 &con #l3 #l3 #l2
                !endif
                osd .osd.ccosd &inc #l2 1 "f"  "    "
            !elif &seq #l1 "D"
                osd .osd.ccosd &inc #l2 1 "fh" "    "
                osd .osd.ccosd &inc #l2 1 "Cptfx" &cat .osd.checkbox-chars "\} Checkout parent \Hdirectory if required" #l0 cc-osd-cbc
                set-variable #l3 &con #l3 #l3 #l2
            !elif &seq #l1 "F"
                osd .osd.ccosd &inc #l2 1 "fh" "    "
                osd .osd.ccosd &inc #l2 1 "Cptfx" &cat .osd.checkbox-chars "\} \HEnable file filter" #l0 cc-osd-cbc
                set-variable #l3 &con #l3 #l3 #l2
            !elif &seq #l1 "K"
                osd .osd.ccosd &inc #l2 1 "fh" "    "
                osd .osd.ccosd &inc #l2 1 "Cptfx" &cat .osd.checkbox-chars "\} \HKeep current version" #l0 cc-osd-cbc
                set-variable #l3 &con #l3 #l3 #l2
            !elif &seq #l1 "O"
                osd .osd.ccosd &inc #l2 1 "fh" "    "
                osd .osd.ccosd &inc #l2 1 "Cptfx" &cat .osd.checkbox-chars "\} Overwrite \Hhijacked files" #l0 cc-osd-cbc
                set-variable #l3 &con #l3 #l3 #l2
            !elif &seq #l1 "Q"
                osd .osd.ccosd &inc #l2 1 "fh" "    "
                osd .osd.ccosd &inc #l2 1 "Cptfx" &cat .osd.checkbox-chars "\} \HSensible amount of logging please!" #l0 cc-osd-cbc
                set-variable #l3 &con #l3 #l3 #l2
            !elif &seq #l1 "R"
                osd .osd.ccosd &inc #l2 1 "fh" "    "
                osd .osd.ccosd &inc #l2 1 "Cptfx" &cat .osd.checkbox-chars "\} \HRecurse into sub-directories" #l0 cc-osd-cbc
                set-variable #l3 &con #l3 #l3 #l2
            !elif &seq #l1 "U"
                osd .osd.ccosd &inc #l2 1 "fh" "    "
                osd .osd.ccosd &inc #l2 1 "Cptfx" &cat .osd.checkbox-chars "\} \HUnreserved checkout" #l0 cc-osd-cbc
                set-variable #l3 &con #l3 #l3 #l2
            !elif &seq #l1 "V"
                osd .osd.ccosd &inc #l2 1 "fh" "    "
                osd .osd.ccosd &inc #l2 1 "Cptfx" &cat .osd.checkbox-chars "\} Operate on entire \HVOB" #l0 cc-osd-cbc
                set-variable #l3 &con #l3 #l3 #l2
            !elif &seq #l1 "W"
                osd .osd.ccosd &inc #l2 1 "fh" "    "
                osd .osd.ccosd &inc #l2 1 "Cptfx" &cat .osd.checkbox-chars "\} Ignore \Hwhite spaces" #l0 cc-osd-cbc
                set-variable #l3 &con #l3 #l3 #l2
            !elif &seq #l1 "X"
                osd .osd.ccosd &inc #l2 1 "fh" "    "
                osd .osd.ccosd &inc #l2 1 "Cptfx" &cat .osd.checkbox-chars "\} Conte\Hxt diffs" #l0 cc-osd-cbc
                set-variable #l3 &con #l3 #l3 #l2
            !elif &seq #l1 "Z"
                !if .find-file.file-count
                    osd .osd.ccosd &inc #l2 1 "fh" "    "
                    osd .osd.ccosd &inc #l2 1 "Cptfx" &cat .osd.checkbox-chars "\} Operate on current \Hdirectory" #l0 cc-osd-cbc
                    set-variable #l3 &con #l3 #l3 #l2
                !else
                    osd .osd.ccosd #l2 "D"
                !endif
            !else
                osd .osd.ccosd &inc #l2 1 "" &cat "flag " #l1
            !endif
        !endif
    !done
    osd .osd.ccosd 2000 ""
    osd .osd.ccosd 2010 ""
    osd .osd.ccosd 2020 "BtcfHh" .scheme.osd-ebtt " \HOkay " f void
    set-variable #l3 &con #l3 #l3 #l2
    osd .osd.ccosd 2030 "BtcfH"  .scheme.osd-ebtt " \HCancel " 0 void
    osd .osd.ccosd 0 "batcDIHs" 9 3 47 4 -1 -1 2020 #l3 .scheme.osd-title &cat "ClearCase " &lget .cc-init.names @#
    !force !force .osd.ccosd osd
    !if &not $status
        !abort
    !endif
    !if &sin "C" #l9
        !if &seq .cc-init.cominit .cc-init.comment
            set-variable .cc-init.comment ""
        !endif
    !endif
    set-variable @1 .values
!emacro

0 define-macro cc-get-file-list
    !if @2
        set-variable #l1 ""
    !elif &or &not .find-file.file-count @3
        set-variable #l1 "\b."
    !else
        set-variable #l0 0
        set-variable #l1 ""
        set-variable #l3 @#
        !while &les &pinc #l0 1 .find-file.file-count
            set-variable #l4 &ind &cat ".find-file.file" #l0
            !if &seq "/" &rig #l4 &sub &len #l4 1
                set-variable #l4 &lef #l4 &sub &len #l4 1
            !endif
            !if @#
                !if &sin " " #l4
                    set-variable #l4 &rep &rep #l4 "\\" "\\\\" "\"" "\\\""
                    set-variable #l4 &cat &cat "\"" #l4 "\""
                !endif
            !endif
            !if &gre &add #l3 &len #l4 1020
                ml-write "[ClearCase Error: Command-line has become too long]"
                !abort
            !endif
            set-variable #l1 &cat #l1 &cat "\b" #l4
            set-variable #l3 &add #l3 &add &len #l4 1
        !done
    !endif
    !if @#
        set-variable @1 &trl &rep #l1 "\b" " "
    !else
        set-variable @1 &cat #l1 "\b"
    !endif
!emacro

0 define-macro clearcase
    !if .toolbar.open
        !force toolbar-make-tool-visible "*cc-console*"
        !tjump &not $status 2
    !else
        1 set-position "\x81"
        !force 0 popup-window "*cc-console*"
        !if &not $status
            delete-other-windows
            2 split-window-vertically
            change-window-depth 15
            find-buffer "*cc-console*"
            buffer-bind-create "bio" "f10" "" file-browser-close
            3 previous-window
        !else
            goto-position "\x81"
        !endif
    !endif
    &bor @# 2 file-browser
!emacro

define-macro cc-edit-config-spec
    ml-write "[ClearCase ConfigSpec: Edit not yet implemented]"
    !abort
!emacro

0 define-macro cc-dirlst-detect
    set-variable #l1 0
    !while &not &seq "" &set #l2 &reg &cat "/history/clearcase/" &inc #l1 1 ""
        !if &seq &lef $buffer-fname &len #l2 #l2
            !return
        !endif
    !done
    !abort
!emacro

0 define-macro cc-get-vob-base-path
    set-variable #l1 0
    !while &not &seq "" &set #l2 &reg &cat "/history/clearcase/" &inc #l1 1 ""
        !if &seq &lef $buffer-fname &len #l2 #l2
            set-variable #l0 &rig $buffer-fname &len #l2
            !if &seq #l0 ""
            !elif &set #l3 &sin "/" #l0
                set-variable @1 &cat #l2 &lef #l0 #l3 
                !return
            !endif
            !abort
        !endif
    !done
    !abort
!emacro

0 define-macro cc-dirlst-format
    ml-write "[CC: processing directory...]"
    set-position "\x83"
    set-variable #l1 $buffer-bname
    6 pipe-shell-command &cat .cc-init.com " ls -l ." "*cc-temp*"
    find-buffer "*cc-temp*"
    !force 4 goto-line
    !if &or &not $status &seq &lef @wl 17 "cleartool: Error:"
        ; not a CC directory
        goto-position "\x83"
        !force !force file-browser-filter
        !return
    !endif
    find-buffer #l1
    2 goto-line
    end-of-line
    -1 buffer-mode "view"
    1 buffer-mode "edit" @mna
    !if &lget .fhook-dirlst.mode 2
        set-variable #l9 &spr "^.\\{%d,%d\\}\\(%s\\)$" :fmpf :fmpf .fhook-dirlst.filter-mask
        set-variable #l8 ""
    !else
        set-variable #l8 "Not-"
    !endif
    insert-string &spr " (CC: ConfigSpec - %sFiltered)" #l8
    4 goto-line
    7 forward-char
    insert-string "\eCTRule                    Version                   "
    beginning-of-line
    forward-line
    !while &not &seq @wl ""
        set-variable #l7 "-"
        set-variable #l3 &rig @wl 32
        !if &set #l4 &sin " -> " #l3
            set-variable #l3 &lef #l3 &sub #l4 1
        !endif
        !if &seq &rig #l3 &set #l4 &sub &len #l3 1 "/"
            !if &seq #l3 "./"
                !goto rmv-line
            !elif &seq #l3 "../"
                !goto pad-line
            !endif
            set-variable #l3 &lef #l3 #l4
        !endif
        str-to-regex #l3
        find-buffer "*cc-temp*"
        set-variable $window-line 4
        !force search-buffer "me" &spr "^view private object +%s$" #l3
        !if $status
            find-buffer #l1
            set-variable #l7 "p"
*flt-line
            !if &not &lget .fhook-dirlst.mode 2
                !goto pad-line
            !elif &xse @wl #l9
*rmv-line
                beginning-of-line
                set-mark
                forward-line
                -1 kill-region
            !else
*pad-line
                2 forward-char
                insert-string #l7
                4 forward-char
                insert-string &spr "\eC%s                                                 " &mid @wl 1 1
                beginning-of-line
                forward-line
            !endif
        !else
            !force search-buffer "me" &spr "^\\(directory \\)?version +%s%s\\([^ \n]+\\) +\\(.*\\)? Rule: \\(.*\\)$" #l3 .cc-init.vsepr
            !if $status
                set-variable #l2 &con &seq @s1 "" "-" "d"
                set-variable #l3 &rep &trr @s2 "\\" "/"
                set-variable #l4 &trb @s3
                set-variable #l5 &rep &trb @s4 "\\" "/"
                find-buffer #l1
                !if &seq #l4 "[hijacked]"
                    set-variable #l7 "h"
                !elif &seq #l5 "CHECKEDOUT"
                    set-variable #l7 "c"
                    !if &seq &lef #l4 5 "from "
                        set-variable #l3 &rep &trr &rig #l4 5 "\\" "/"
                    !endif
                !endif
                !if &gre &len #l3 24
                    set-variable #l3 &cat ">" &rig #l3 &sub &len #l3 23
                !else
                    set-variable #l3 &cat #l3 &lef "                         " &sub 24 &len #l3
                !endif
                !if &gre &len #l5 24
                    set-variable #l5 &cat ">" &rig #l5 &sub &len #l5 23
                !else
                    set-variable #l5 &cat #l5 &lef "                         " &sub 24 &len #l5
                !endif
                2 forward-char
                insert-string #l7
                4 forward-char
                insert-string &spr "\eC%s%s%s " #l2 #l5 #l3
                beginning-of-line
                forward-line
            !else
                find-buffer #l1
                set-variable #l7 "E"
                !goto pad-line
            !endif
        !endif
    !done
    set-variable #l8 &spr "^\\(directory \\)?version +\\(.*\\)%s\\([^ \n]+\\) +\\[loaded but missing] +Rule: \\(.*\\)$" .cc-init.vsepr
    find-buffer "*cc-temp*"
    beginning-of-buffer
    !repeat
        !force search-buffer "me" #l8
        !if $status
            set-variable #l2 &con &seq @s1 "" "-" "d"
            set-variable #l4 &trl @s2
            set-variable #l3 &rep &trr @s3 "\\" "/"
            set-variable #l5 &rep &trb @s4 "\\" "/"
            !if &gre &len #l3 24
                set-variable #l3 &cat ">" &rig #l3 &sub &len #l3 23
            !else
                set-variable #l3 &cat #l3 &lef "                         " &sub 24 &len #l3
            !endif
            !if &gre &len #l5 24
                set-variable #l5 &cat ">" &rig #l5 &sub &len #l5 23
            !else
                set-variable #l5 &cat #l5 &lef "                         " &sub 24 &len #l5
            !endif
            find-buffer #l1
            end-of-buffer
            insert-string &spr " %sm--- \eC%s%s%s       -  ----/--/-- --:-- %s" #l2 #l2 #l5 #l3 #l4
        !endif
    !until &not $status
    goto-position "\x83"
    -1 buffer-mode "edit"
    set-variable :fmpf 85
    buffer-bind-create "b" "0" "" cc-dirlst-ver-rule-toggle
    buffer-bind-create "b" "S-f5" "" cc-state
    0 ml-write
!emacro

0 define-macro cc-dirlst-ver-rule-toggle
    set-variable #l0 $window-line
    -1 buffer-mode "view"
    1 buffer-mode "edit" @mna
    4 goto-line
    !while &not &seq @wl ""
        !if &set #l1 &sin "\eC" @wl
            set-variable @wl &spr "%s%s%s%s" &lef @wl &add #l1 2 &mid @wl &add #l1 26 24 &mid @wl &add #l1 2 24 &rig @wl &add #l1 50
        !endif
        forward-line
    !done
    set-variable $window-line #l0
    -1 buffer-mode "edit"
!emacro

; Cleartool execution ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

0 define-macro cc-cleartool-end
    unset-variable .cc-init.lock
!emacro

0 define-macro cc-cleartool-complete
    !if &set #l9 &sin "!" &lget .cc-init.flags :lock
        set-variable .cc-cleartool.wait 0
    !else
        !force unset-variable .cc-init.lock
        set-variable $buffer-dhook ""
    !endif
    end-of-buffer
    set-mark
    backward-line
    !tjump &seq &trb @wl "" -1
    !if &seq @wl "[TERMINATED]"
        set-variable .cc-cleartool.exit -9999
        set-variable #l0 "was terminated"
    !elif &xse @wl "\\[EXIT \\(.*\\)]"
        set-variable .cc-cleartool.exit @s1
        !if @s1
            set-variable #l0 &cat "exited with code " @s1
        !else
            set-variable #l0 "completed successfully"
        !endif
    !else
        set-variable .cc-cleartool.exit -9998
        set-variable #l0 "exited with unknown status"
        forward-line
    !endif
    -1 kill-region
    !if &or &not #l9 .cc-cleartool.exit
        insert-string &spr "\n*****ClearCase %s %s*****" &lget .cc-init.names :lock #l0
    !endif
    !if &sin "*" &lget .cc-init.flags :lock
        end-of-buffer
        set-mark
        beginning-of-buffer
        copy-region
        set-variable #l2 $buffer-bname
        find-buffer "*cc-console-safe*"
        end-of-buffer
        !if &gre $window-line 1
            insert-newline
        !endif
        yank
        backward-line
        -1 yank
        find-buffer #l2
    !else
        beginning-of-line
    !endif
!emacro

0 define-macro cc-cleartool-ipipe
    !if &not &exi :lock
        set-variable :lock .cc-init.lock
        -1 buffer-mode "wrap"
    !endif
    !if &exi &cat "cc-cleartool-ipipe" :lock
        !force execute-named-command &cat "cc-cleartool-ipipe" :lock
    !endif
    !if &not @#
        cc-cleartool-complete
    !endif
!emacro

0 define-macro cc-cleartool-input
    !if &seq @cck "redraw"
        @# screen-update
        !return
    !elif &seq @cck "callback"
        !abort
    !elif &seq @cck "idle-pick"
        !abort
    !elif &lfin "|abort-command|delete-buffer|ipipe-kill|" @cc
        !force !force set-variable #l0 @mc1 "Abort cleartool command [y/n]? " "nNyY"
        !if &and &iseq #l0 "y" .cc-cleartool.wait
            !force ipipe-kill
        !endif
    !elif &lfin "|kill-region|" @cc
        !force ipipe-kill
        set-variable .cc-cleartool.wait 0
        set-variable .cc-cleartool.exit -9999
    !endif
!emacro

0 define-macro cc-cleartool
    set-variable .cc-init.lock @#
    set-variable #l2 @2
    set-variable #l3 @3
    ml-write &spr "[ClearCase %s: Processing...]" &lget .cc-init.names @# 
    !if &set #l9 &sin "*" &lget .cc-init.flags @#
        set-variable #l0 "*cc-console*"
    !else
        set-variable #l0 &spr "*cc-%s*" &slo &lget .cc-init.names @# 
    !endif
    !force 0 popup-window #l0
    !if &not $status
        !force 0 popup-window "*cc-console*"
    !endif
    !if &not $status
        delete-other-windows
        !force 2 split-window-vertically
        !force change-window-depth 15
        find-buffer "*cc-console*"
        previous-window
        set-position "\x83"
        next-window
    !endif
    !if #l9
        !force 0 delete-buffer "*cc-console-safe*"
        change-buffer-name "*cc-console-safe*"
    !endif
    !force 0 delete-buffer #l0
    set-variable .wait &sin "!" &lget .cc-init.flags @#
    set-variable #l1 $buffer-fname
    set-variable $buffer-fname #l2
    !force !force !force 0x86 ipipe-shell-command #l3 #l0 cc-cleartool-ipipe
    set-variable #l2 $status
    set-variable $buffer-fname #l1
    find-buffer #l0
    !if &not #l2
        1 goto-position "\x83"
        ml-write "[ClearCase Warning: failured to run cleartool]"
        !abort
    !elif &sin "!" &lget .cc-init.flags @#
        set-variable $buffer-input cc-cleartool-input
        screen-update
        !force !force !force command-wait
        set-variable $buffer-input ""
        !if #l9
            !force 0 delete-buffer #l0
            find-buffer "*cc-console-safe*"
            change-buffer-name "*cc-console*" 
        !endif
        !if &equ .exit -9999
            !jump 2
        !elif &not &or &band @1 4 &seq .exit "0"
            unset-variable .cc-init.lock
            1 goto-position "\x83"
            !if &not &exi .exit
                ml-write "[ClearCase Error: cleartool exit status not set]"
            !elif &equ .exit -9999
                ml-write &spr "[ClearCase Warning: %s operation terminated]" &lget .cc-init.names @# 
            !elif &equ .exit -9998
                ml-write &spr "[ClearCase Warning: %s operation exited with unknow status]" &lget .cc-init.names @# 
            !else
                ml-write &spr "[ClearCase Warning: cleartool exited with code %d]" .exit
            !endif
            !abort
        !elif &band @1 2
            !force unset-variable .cc-init.lock
            !if &seq .exit "0"
                end-of-buffer
                insert-string &spr "\n*****ClearCase %s completed successfully*****" &lget .cc-init.names @#
                beginning-of-line
            !endif
            ml-write &spr "[ClearCase: %s successful]" &lget .cc-init.names @#
        !endif
    !else
        set-variable $buffer-dhook cc-cleartool-end
    !endif
    1 goto-position "\x83"
!emacro

; ClearCase State ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

0 define-macro cc-cleartool-ipipe1
    !if &not &exi :ccs-last
        buffer-bind-create "bio" "return" "" cc-state-find-file
        buffer-bind-create "bio" "space" "" cc-state-select
        buffer-bind-create "bio" "delete" "" cc-state-delete
        set-variable :mouse-pick-1 cc-state-mouse-pick-1
        set-variable :mouse-drop-1 cc-state-mouse-drop-1
        set-variable :mouse-pick-3 void
        set-variable :mouse-drop-3 cc-state-mouse-drop-3
        set-variable :tag-count 0
        set-variable :ccs-last 4
    !endif
    goto-alpha-mark "I"
    !if &equ $window-line :ccs-last
        !return
    !endif
    set-variable #l0 $window-line
    goto-line :ccs-last
    !while &gre #l0 $window-line
        !if &set #l2 &sin " Rule: " @wl
            !if &seq &rig @wl &add #l2 6 "CHECKEDOUT"
                set-variable #l3 "c "
            !elif &sin "[hijacked]" @wl
                set-variable #l3 "h "
            !elif &sin "[loaded but missing]" @wl
                set-variable #l3 "m "
            !elif &sin "[" @wl
                set-variable #l3 "? "
            !else
                !goto rmv-line
            !endif
            set-variable #l4 &xrep &rep @wl "\\" "/" &spr "\\(\\./\\)?\\(.*\\)%s.* Rule: .*" .cc-init.vsepr "\\2"
            !if &seq &stat t &cat $buffer-fname #l4 "D"
                set-variable #l4 &cat #l4 "/"
            !endif
            set-variable @wl &cat #l3 #l4
            beginning-of-line
            forward-line
        !elif &seq "" &trr @wl
            !goto rmv-line
        !elif &seq "[" @wc
            forward-line
        !elif &not &lget .cc-state.values 4
            !goto pfl-line
        !elif &xse @wl .fhook-dirlst.filter-mask
*rmv-line
            set-mark
            forward-line
            -1 kill-region
            set-variable #l0 &sub #l0 1
        !else
*pfl-line
            set-variable #l3 &rep @wl "\\" "/"
            !if &seq &lef #l3 2 "./"
                set-variable #l3 &rig #l3 2
            !endif
            !if &seq &stat t &cat $buffer-fname #l3 "D"
                set-variable #l3 &cat #l3 "/"
            !endif
            set-variable @wl &cat "p " #l3
            beginning-of-line
            forward-line
        !endif
    !done
    goto-alpha-mark  "I"
    set-variable :ccs-last $window-line
!emacro

0 define-macro cc-state-tag-list
    set-variable #l0 $window-line
    set-variable .find-file.file-count 0
    set-variable .find-file.file-dcount 0
    beginning-of-buffer
    !repeat
        !force search-buffer "me" "^[chmp]\\*\\(.+\\)"
        !if $status
            set-variable &ind &cat ".find-file.file" &inc .find-file.file-count 1 @s1
            !if &seq &rig @s1 &sub &len @s1 1 "/"
                set-variable .find-file.file-dcount &add .find-file.file-dcount 1
            !endif
        !endif
    !until &not $status
    set-variable .find-file.file-dir $buffer-fname
    set-variable $window-line #l0
!emacro

0 define-macro cc-state-select
    !if &xseq @wl "[chmp][ *].+"
        set-variable #l0 $window-col
        set-variable $window-col 1
        !if &seq @wc " "
            set-variable @wc "*"
            set-variable :tag-count &add :tag-count 1
        !else
            set-variable @wc " "
            set-variable :tag-count &sub :tag-count 1
        !endif
        set-variable $window-col #l0
        forward-line
    !else
        ml-write "[Invalid line]"
        !abort
    !endif
!emacro
0 define-macro cc-state-find-file
    !if &xseq @wl "[chmp][ *]\\(.+\\)"
        find-file @s1
    !else
        ml-write "[Invalid line]"
        !abort
    !endif
!emacro
0 define-macro cc-state-mouse-pick-1
    set-variable .cc-state-mouse-drop-1.line $window-line
!emacro
0 define-macro cc-state-mouse-drop-1
    !if &xseq @wl "[chmp][ *].+"
        !if &equ .line $window-line
            !if &gre $window-col 1
                cc-state-find-file
            !else
                cc-state-select
                set-variable $window-line .line
            !endif
        !endif
    !else
        ml-write "[Invalid line]"
    !endif
!emacro
0 define-macro cc-state-mouse-drop-3
    osd-cc-file-menu
    !force !force .osd.tmp osd
!emacro

0 define-macro cc-state-delete
    cc-state-tag-list
    !if .find-file.file-count
        0 dirlst-tag-file-delete
        set-alpha-mark "\x81"
        beginning-of-buffer
        !repeat
            !force search-buffer "me" "^[chmp]\\*\\(.+\\)"
            !if $status
                beginning-of-line
                !if &seq @wc "p"
                    set-mark
                    forward-line
                    -1 kill-region
                !else
                    set-variable @wc "m"
                    forward-char
                    set-variable @wc " "
                !endif
            !endif
        !until &not $status
        goto-alpha-mark "\x81"
    !endif
!emacro

define-macro cc-state
    1 cc-osd .cc-state.values
    set-variable #l2 &spr "%s ls%s " .cc-init.com &con &lget .values 3 " -rec" ""
    &len #l2 cc-get-file-list #l0 &lget .values 1 &lget .values 2
    !if &seq #l0 ""
        cc-get-vob-base-path #l0
        set-variable #l1 #l0
    !else
        set-variable #l1 $buffer-fname
    !endif
    1 cc-cleartool 0 #l1 &cat #l2 #l0
!emacro
set-variable .cc-state.values "|0|1|1|1|"

; ClearCase Update ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

0 define-macro cc-cleartool-ipipe2
    !if &not &lget .cc-update.values 4
        !return
    !elif &not &exi :ccu-last
        set-variable :ccu-last 4
    !endif
    goto-alpha-mark "I"
    !if &equ $window-line :ccu-last
        !return
    !endif
    set-variable #l0 $window-line
    goto-line :ccu-last
    !while &gre #l0 $window-line
        !if &sin @wc ".EP"
            set-mark
            forward-line
            -1 kill-region
            set-variable #l0 &sub #l0 1
        !else
            forward-line
        !endif
    !done
    goto-alpha-mark  "I"
    set-variable :ccu-last $window-line
!emacro
define-macro cc-update
    2 cc-osd .cc-update.values
    set-variable #l2 &spr "%s update%s " .cc-init.com &con &lget .values 3 " -overwrite" ""
    &len #l2 cc-get-file-list #l0 &lget .values 1 &lget .values 2
    2 cc-cleartool 0 $buffer-fname &cat #l2 #l0
!emacro
set-variable .cc-update.values "|0|1|0|1|"

; ClearCase Checkout ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

define-macro cc-checkout
    3 cc-osd .cc-checkout.values
    set-variable #l2 &spr "%s co%s " .cc-init.com &con &lget .values 2 " -unr" ""
    !if &seq .cc-init.comment ""
        set-variable #l2 &cat #l2 "-nc "
    !else
        set-variable #l2 &spr "%s-c \"%s\" " #l2 &rep &rep &trb .cc-init.comment "\\" "\\\\" "\"" "\\\""
        set-variable .cc-init.comment3 .cc-init.comment
    !endif
    &len #l2 cc-get-file-list #l0 0 0
    3 cc-cleartool 3 $buffer-fname &cat #l2 #l0
    !if &not &bmod "dir"
        reread-file
    !endif
!emacro
set-variable .cc-checkout.values "||1|||"

; ClearCase Checkin ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

define-macro cc-checkin
    4 cc-osd .cc-checkin.values
    set-variable #l2 &cat .cc-init.com " ci "
    !if &seq .cc-init.comment ""
        set-variable #l2 &cat #l2 "-nc "
    !else
        set-variable #l2 &spr "%s-c \"%s\" " #l2 &rep &rep &trb .cc-init.comment "\\" "\\\\" "\"" "\\\""
        set-variable .cc-init.comment4 .cc-init.comment
    !endif
    &len #l2 cc-get-file-list #l0 0 0
    4 cc-cleartool 3 $buffer-fname &cat #l2 #l0
!emacro
set-variable .cc-checkin.values "||"

; ClearCase Add ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

define-macro cc-add
    5 cc-osd .cc-add.values
    !if &lget .values 2
        ml-write "[ClearCase Error: Checking out parent directory not yet implemented]"
        !abort
    !endif
    0 cc-get-file-list #l0 0 0
    set-variable #l1 0
    set-variable #l3 ""
    set-variable #l5 ""
    !while &not &seq &set #l4 &lget #l0 &inc #l1 1 ""
        !if &seq &rig #l4 &sub &len #l4 1 "/"
            set-variable #l4 &lef #l4 &sub &len #l4 1
            !if &sin " " #l4
                set-variable #l4 &rep &rep #l4 "\\" "\\\\" "\"" "\\\""
                set-variable #l4 &cat &cat "\"" #l4 "\""
            !endif
            set-variable #l3 &spr "%s %s" #l3 #l4
        !else
            !if &sin " " #l4
                set-variable #l4 &rep &rep #l4 "\\" "\\\\" "\"" "\\\""
                set-variable #l4 &cat &cat "\"" #l4 "\""
            !endif
            set-variable #l5 &spr "%s %s" #l5 #l4
        !endif
    !done
    set-variable #l2 &cat .cc-init.com " mkelem "
    !if &seq .cc-init.comment ""
        set-variable #l2 &cat #l2 "-nc"
    !else
        set-variable #l2 &spr "%s-c \"%s\"" #l2 &rep &rep &trb .cc-init.comment "\\" "\\\\" "\"" "\\\""
        set-variable .cc-init.comment5 .cc-init.comment
    !endif
    ; Add all directories first
    !if &not &seq #l3 ""
        set-variable #l4 &con &seq #l5 "" 3 1        
        5 cc-cleartool #l4 $buffer-fname &cat #l2 #l3
    !endif
    ; Now add all the files
    !if &not &seq #l5 ""
        5 cc-cleartool 3 $buffer-fname &cat #l2 #l5
    !endif
!emacro
set-variable .cc-add.values "||0|"

; ClearCase Diff ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

0 define-macro cc-diff-context
    !if &not &seq "R" &stat t &set #l0 &cat $buffer-fname @1
        ml-write &spr "[ClearCase diff: Error failed to located source file \"%s\"]" #l0
        !abort
    !endif
    set-variable #l1 $buffer-bname
    -1 find-buffer #l1
    !force 0 delete-buffer "*cc-diff-temp*"
    find-buffer "*cc-diff-temp*"
    insert-file #l0
    find-buffer #l1
    set-variable $window-line 4
    set-variable #l2 0
    !repeat
        !if &not &xseq @wl "\\(\\d+\\)\\(,\\(\\d+\\)\\)?\\([acd]\\)\\(\\d+\\)\\(,\\(\\d+\\)\\)?"
            !force 0 delete-buffer "*cc-diff-temp*"
            ml-write "[ClearCase diff: Error strange line found]"
            !abort
        !else
            set-variable #l2 @s1
            !if &seq &set #l3 @s3 ""
                set-variable #l3 #l2
            !endif
            set-variable #l4 @s5
            !if &seq &set #l5 @s7 ""
                set-variable #l5 #l4
            !endif
            set-variable #l6 @s4
            !if &seq #l6 "a"
                set-variable #l3 &sub #l3 1
                set-variable #l6 "+"
            !elif &seq #l6 "d"
                set-variable #l4 &add #l4 1
                set-variable #l6 "-"
            !else
                set-variable #l6 "!"
            !endif
            find-buffer "*cc-diff-temp*"
            !force set-variable $window-line #l4
            set-variable #l7 $window-line
            set-mark
            !force 3 backward-line
            copy-region
            set-variable #l7 &sub #l7 $window-line
            !force set-variable $window-line #l5
            !if #l5
                !force forward-line
            !endif
            set-variable #l8 $window-line
            set-mark
            !force 3 forward-line
            copy-region
            set-variable #l8 &sub $window-line #l8
            find-buffer #l1
            set-variable @wl "***************"
            beginning-of-line
            forward-line
            insert-string &spr "*** %d,%d ***\n" &sub #l2 #l7 &add #l3 #l8
            !if &not &seq #l6 "+"
                yank
                reyank
                #l7 backward-line
                set-variable #l9 #l7
                !while &pdec #l9 1
                    2 insert-space
                    beginning-of-line
                    forward-line
                !done
                !while &seq @wc "<"
                    set-variable @wc #l6 
                    forward-line
                !done
                yank
                #l8 backward-line
                set-variable #l9 #l8
                !while &pdec #l9 1
                    2 insert-space
                    beginning-of-line
                    forward-line
                !done
            !endif
            !if &seq @wc "-"
                set-mark
                forward-line
                -1 kill-region
            !endif
            insert-string &spr "--- %d,%d ---\n" &sub #l4 #l7 &add #l5 #l8
            !if &not &seq #l6 "-"
                yank
                reyank
                #l7 backward-line
                set-variable #l9 #l7
                !while &pdec #l9 1
                    2 insert-space
                    beginning-of-line
                    forward-line
                !done
                !while &seq @wc ">"
                    set-variable @wc #l6 
                    forward-line
                !done
                yank
                #l8 backward-line
                set-variable #l9 #l8
                !while &pdec #l9 1
                    2 insert-space
                    beginning-of-line
                    forward-line
                !done
            !endif
            -2 yank
        !endif
    !until &gre &add $window-line 3 $window-eline
    !force 0 delete-buffer "*cc-diff-temp*"
!emacro

define-macro cc-diff
    6 cc-osd .cc-diff.values
    set-variable #l9 &lef $buffer-fname &rsin "/" $buffer-fname
    set-variable #l2 &spr "%s diff -diff -pred%s " .cc-init.com &con &lget .values 1 " -opt -b" ""
    0 cc-get-file-list #l0 0 0
    !force 0 delete-buffer "*cc-diff-res*"
    set-variable #l8 1
    set-variable #l1 0
    !while &not &seq &set #l3 &lget #l0 &inc #l1 1 ""
        !if &sin " " &set #l4 #l3
            set-variable #l4 &rep &rep #l4 "\\" "\\\\" "\"" "\\\""
            set-variable #l4 &cat &cat "\"" #l4 "\""
        !endif
        !force !force !force 6 cc-cleartool 7 #l9 &cat #l2 #l4
        set-variable #l8 $status
        popup-window "*cc-diff*"
        !if &lget .values 2
            !force !force cc-diff-context #l3
        !endif
        set-variable $window-line 4
        set-mark
        end-of-buffer
        !if #l8
            2 backward-line
            set-variable @wl "***************"
            beginning-of-line
            forward-line
        !endif
        copy-region
        find-buffer "*cc-diff-res*"
        end-of-buffer
        insert-string &spr "\n*** %s Pred\n--- %s\n" #l3 #l3
        yank
        -1 yank
        find-buffer "*cc-diff*"
        !tjump &not #l8 2
    !done
    popup-window "*cc-diff*"
    !force 0 delete-buffer "*cc-diff*"
    find-buffer "*cc-diff-res*"
    change-buffer-name "*cc-diff*"
    !if #l8
        end-of-buffer
        insert-string "\n*****ClearCase Diff completed successfully*****"
    !endif
    beginning-of-buffer
    insert-string &spr "cd %s\nClearCase diff -pred%s\n" #l9 &rep #l0 "\b" " "
    !if &lget .values 2
        set-variable $buffer-hilight .hilight.gdiff
    !else
        set-variable $buffer-hilight .hilight.diff
    !endif
    beginning-of-buffer
!emacro
set-variable .cc-diff.values "|1|1|"

; ClearCase Uncheckout ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

define-macro cc-uncheckout
    7 cc-osd .cc-uncheckout.values
    set-variable #l2 &spr "%s unco -%s " .cc-init.com &con &lget .values 1 "keep" "rm"
    &len #l2 cc-get-file-list #l0 0 0
    7 cc-cleartool 3 $buffer-fname &cat #l2 #l0
!emacro
set-variable .cc-uncheckout.values "|1|"

; ClearCase Annotate ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

define-macro cc-annotate
    8 cc-osd .cc-annotate.values
    set-variable #l2 &cat .cc-init.com " ann -out - -f -nhe "
    &len #l2 cc-get-file-list #l0 0 0
    8 cc-cleartool 3 $buffer-fname &cat #l2 #l0
!emacro
set-variable .cc-annotate.values "|"

; ClearCase Log ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

define-macro cc-log
    8 cc-osd .cc-log.values
    set-variable #l2 &cat .cc-init.com " ann -out - -nda "
    &len #l2 cc-get-file-list #l0 0 0
    8 cc-cleartool 3 $buffer-fname &cat #l2 #l0
!emacro
set-variable .cc-log.values "|"

; ClearCase clear console ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

define-macro cc-clear-console
    set-position "\x82"
    find-buffer "*cc-console*"
    beginning-of-buffer
    set-mark
    end-of-buffer
    -1 kill-region
    -1 buffer-mode "edit"
    goto-position "\x82"
!emacro

; ClearCase Setup dialog ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

define-macro cc-add-view
    set-variable #l0 &lef $buffer-fname &rsin "/" $buffer-fname
    4 osd-entry "ClearCase Add a View" "View Base \HPath:" #l0 40 1
    set-variable #l1 0
    !while &not &seq "" &set #l2 &reg &cat "/history/clearcase/" &inc #l1 1 ""
        !if &seq #l0 #l2
            !return
        !endif
    !done
    set-registry &cat "/history/clearcase/" #l1 #l0
!emacro    

0 define-macro cc-setup-del-view
    set-variable #l0 $result
    set-variable #l1 0
    !while &not &seq #l0 &set #l2 &reg &cat "/history/clearcase/" &inc #l1 1 ""
        !if &seq #l2 ""
            !return
        !endif
    !done
    set-variable #l2 &spr "  Delete View \"%s\"?  " #l2
    0 osd-xdialog "ClearCase Setup" #l2 2 "  \HYes  " "  \HNo  "
    !if $status
        !while &not &seq "" &set #l2 &reg &cat "/history/clearcase/" &inc #l1 1 ""
            set-registry &cat "/history/clearcase/" &sub #l1 1 #l2
        !done
        delete-registry &cat "/history/clearcase/" &sub #l1 1
        0 cc-setup-add-view
    !endif
!emacro
0 define-macro cc-setup-add-view
    !if @#
        !force !force cc-add-view
    !endif
    !if $status
        -1 osd .osd.ccstpv
        osd .osd.ccstpv 0 &cond &band $system 0x100 "AisSf" "AsSf" .scheme.osd-child 60 6 -1 -1
        set-variable #l1 0
        !while &not &seq "" &set #l2 &reg &cat "/history/clearcase/" &inc #l1 1 ""
            osd .osd.ccstpv 1 "xBd" #l2 f cc-setup-del-view
        !done
        !if &equ #l1 1
            osd .osd.ccstpv 1 "" "<no views added>"
        !endif
    !endif
!emacro
0 define-macro cc-setup-entry
    set-variable #l2 &lget "|com|vsep|" &abs @#
    !if &equ &abs @# 1
        set-variable #l2 &spr "/history/%s/clearcase/%s" $platform #l2
    !else
        set-variable #l2 &cat "/history/clearcase/" #l2
    !endif
    set-variable #l0 &reg #l2 &lget "|cleartool|@@|" &abs @#
    !if &les @# 0
        set-variable #l1 @ml2 "" #l0
        !if &seq #l0 #l1
        !elif &seq #l1 ""
            !force delete-registry #l2
        !else
            set-registry #l2 #l1
        !endif
    !else
        set-variable $result #l0
    !endif
!emacro

-1 osd .osd.ccstp
osd .osd.ccstp 0 "batcDHs" 9 3 68 4 -1 -1 2020 .scheme.osd-title "ClearCase Setup"
set-variable #l2 10
osd .osd.ccstp &inc #l2 1 "" ""
osd .osd.ccstp &inc #l2 1 "Sfh" "  \HCleartool Command: " &add #l2 1
osd .osd.ccstp &inc #l2 1 "EtxHfz" .scheme.osd-entry 42 1 "" 1 cc-setup-entry
osd .osd.ccstp &inc #l2 1 "" ""
osd .osd.ccstp &inc #l2 1 "Sfh" "  Version \HSeparator: " &add #l2 1
osd .osd.ccstp &inc #l2 1 "EtxHfz" .scheme.osd-entry 10 1 "" 2 cc-setup-entry
osd .osd.ccstp &inc #l2 1 "" ""
osd .osd.ccstp &inc #l2 1 "fh" "  \HViews:             "
osd .osd.ccstp &inc #l2 1 "BtfHx" .scheme.osd-ebtt " \HAdd " f cc-setup-add-view
osd .osd.ccstp &inc #l2 1 "fh" "  "
osd .osd.ccstp &inc #l2 1 "IbHt" .scheme.osd-sbar 60 6 .osd.ccstpv
osd .osd.ccstp 2000 ""
osd .osd.ccstp 2010 ""
osd .osd.ccstp 2020 "BtcfHh" .scheme.osd-ebtt " \HOkay " f void

define-macro cc-setup
    0 cc-setup-add-view
    .osd.ccstp osd
    exec-file "clearcs"
!emacro

; ClearCase directory list context menu ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

0 define-macro osd-cc-file-menu
    !if &not @?
        set-variable @# .osd.tmp
    !endif
    -1 osd @#
    osd @# 0 "b"
    osd @# 10 "" "Current \HState"     f cc-state
    osd @# 20 "" "\HUpdate files"      f cc-update
    osd @# 150 "-"
    osd @# 160 "" "Clear CC console"   f cc-clear-console
    osd @# 170 "" "ClearCase Setup"    f cc-setup
    !if :tag-count
        osd @# 30 "" "Check\Hout files"    f cc-checkout
        osd @# 40 "" "U\Hncheckout files"  f cc-uncheckout
        osd @# 50 "" "Check\Hin files"     f cc-checkin
        osd @# 60 "" "\HDiff files"        f cc-diff
        osd @# 70 "" "\HAdd files"         f cc-add
        osd @# 80 "" "Annotate"            f cc-annotate
        osd @# 90 "" "Log"                 f cc-log
    !else
        osd @# 30 "" "Checkout files"
        osd @# 40 "" "Uncheckout files"
        osd @# 50 "" "Checkin files"
        osd @# 60 "" "Diff files"
        osd @# 70 "" "Add files"
        osd @# 80 "" "Annotate"
        osd @# 90 "" "Log"
    !endif
    !if @?
    !elif :tag-count
        osd @# 140 "" "Delete files"   f cc-state-delete
    !endif
!emacro
