; -!- emf -!-
; This is part of the JASSPA MicroEmacs macro files
; Copyright (C) 1999-2004 JASSPA (www.jasspa.com)
; See the file me.emf for copying and conditions.
;
; Created:     Sun Jan 10 1999
; Synopsis:    Compressed file/archive support.
; Authors:     Steven Phillips & Jon Green
;
!if &not &exist .hilight.zfile
    set-variable .hilight.zfile &pinc .hilight.next 1
!endif
0 hilight .hilight.zfile 2 50                      $global-scheme
hilight .hilight.zfile 0x44 "\eA" "" "\\}\e" "" "" $global-scheme
hilight .hilight.zfile 0x44 "\eB" "" "\\}\e" "" "" .scheme.link
hilight .hilight.zfile 0x44 "\eC" "" "\\}\e" "" "" .scheme.header
hilight .hilight.zfile 0x44 "\eD" "" "\\}\e" "" "" .scheme.dir
hilight .hilight.zfile 0x44 "\eE" "" "\\}\e" "" "" .scheme.file
;
; Set up the defaults for the standard archives.
; Edit the following section to define your defaults and then execute
; "zfile-default". Note that this is a hidden function and it will 
; not complete.
;
!if &band $system 0x100
    ; on windows use tar (usually cygwin's GNU tar assumed to be on the path)
    set-variable #l0 "tar"
!else
    ; on Unix use gtar, GNU tar must be used as it supports Z and gz uncompressing
    set-variable #l0 "gtar"
!endif

; -- .Z : Compressed file.
!if &seq "" &reg "/history" &spr "%s/zfile/Z-extract" $platform ""
    set-registry &cat "/history/" $platform "zfile/Z-extract" "uncompress -c \"%zf\" > \"%fb\""
    set-registry &cat "/history/" $platform "zfile/Z-remove"  "rm -f \"%fb\""
!endif
; -- .bz : bzip2 file.
!if &seq "" &reg "/history" &spr "%s/zfile/bz-extract" $platform ""
    set-registry &cat "/history/" $platform "zfile/bz-extract" "bunzip2 -c \"%zf\" > \"%fb\""
    set-registry &cat "/history/" $platform "zfile/bz-remove"  "rm -f \"%fb\""
!endif
; -- .bz2 : bzip2 file.
!if &seq "" &reg "/history" &spr "%s/zfile/bz2-extract" $platform ""
    set-registry &cat "/history/" $platform "zfile/bz2-extract" "bunzip2 -c \"%zf\" > \"%fb\""
    set-registry &cat "/history/" $platform "zfile/bz2-remove" "rm -f \"%fb\""
!endif
; -- .gz : gzip file
!if &seq "" &reg "/history" &spr "%s/zfile/gz-extract" $platform ""
    set-registry &cat "/history/" $platform "zfile/gz-extract" "gunzip -c \"%zf\" > \"%fb\""
    set-registry &cat "/history/" $platform "zfile/gz-remove" "rm -f \"%fb\""
!endif
; -- .tar : GNU Tar file
!if &seq "" &reg "/history" &spr "%s/zfile/tar-list" $platform ""
    set-registry &cat "/history/" $platform "zfile/tar-list"     &cat #l0 " tvf \"%zb\""
    set-registry &cat "/history/" $platform "zfile/tar-cut-to"   "^."
    set-registry &cat "/history/" $platform "zfile/tar-s1"       "\\( [0-9][0-9]:[0-9][0-9] +\\)\\(.*[^\n/]\\)$"
    set-registry &cat "/history/" $platform "zfile/tar-r1"       "\\1\eE\\2\eA"
    set-registry &cat "/history/" $platform "zfile/tar-s2"       "\\( [0-9][0-9]:[0-9][0-9] +\\)\\(.+/\\)$"
    set-registry &cat "/history/" $platform "zfile/tar-r2"       "\\1\eD\\2\eA"
    set-registry &cat "/history/" $platform "zfile/tar-extract"  &cat #l0 " xf \"%zf\" \"%fb\""
    set-registry &cat "/history/" $platform "zfile/tar-remove"   "rm -rf \"%fb\""
!endif
; -- .tar.Z : Compressed Tar file
!if &seq "" &reg "/history" &spr "%s/zfile/tar.Z-list" $platform ""
    set-registry &cat "/history/" $platform "zfile/tar.Z-list"     &cat #l0 " Ztvf \"%zb\""
    set-registry &cat "/history/" $platform "zfile/tar.Z-cut-to"   "^."
    set-registry &cat "/history/" $platform "zfile/tar.Z-s1"       "\\( [0-9][0-9]:[0-9][0-9] +\\)\\(.*[^\n/]\\)$"
    set-registry &cat "/history/" $platform "zfile/tar.Z-r1"       "\\1\eE\\2\eA"
    set-registry &cat "/history/" $platform "zfile/tar.Z-s2"       "\\( [0-9][0-9]:[0-9][0-9] +\\)\\(.+/\\)$"
    set-registry &cat "/history/" $platform "zfile/tar.Z-r2"       "\\1\eD\\2\eA"
    set-registry &cat "/history/" $platform "zfile/tar.Z-extract"  &cat #l0 " Zxf \"%zf\" \"%fb\""
    set-registry &cat "/history/" $platform "zfile/tar.Z-remove"   "rm -rf \"%fb\""
!endif
; -- .tar.bz : bzip2 tar file.
!if &seq "" &reg "/history" &spr "%s/zfile/tar.bz-list" $platform ""
    set-registry &cat "/history/" $platform "zfile/tar.bz-list"     &cat #l0 " jtvf \"%zb\""
    set-registry &cat "/history/" $platform "zfile/tar.bz-cut-to"   "^."
    set-registry &cat "/history/" $platform "zfile/tar.bz-s1"       "\\( [0-9][0-9]:[0-9][0-9] +\\)\\(.*[^\n/]\\)$"
    set-registry &cat "/history/" $platform "zfile/tar.bz-r1"       "\\1\eE\\2\eA"
    set-registry &cat "/history/" $platform "zfile/tar.bz-s2"       "\\( [0-9][0-9]:[0-9][0-9] +\\)\\(.+/\\)$"
    set-registry &cat "/history/" $platform "zfile/tar.bz-r2"       "\\1\eD\\2\eA"
    set-registry &cat "/history/" $platform "zfile/tar.bz-extract"  &cat #l0 " jxf \"%zf\" \"%fb\""
    set-registry &cat "/history/" $platform "zfile/tar.bz-remove"   "rm -rf \"%fb\""
!endif
; -- .tar.bz2 : bzip2 tar file.
!if &seq "" &reg "/history" &spr "%s/zfile/tar.bz2-list" $platform ""
    set-registry &cat "/history/" $platform "zfile/tar.bz2-list"     &cat #l0 " jtvf \"%zb\""
    set-registry &cat "/history/" $platform "zfile/tar.bz2-cut-to"   "^."
    set-registry &cat "/history/" $platform "zfile/tar.bz2-s1"       "\\( [0-9][0-9]:[0-9][0-9] +\\)\\(.*[^\n/]\\)$"
    set-registry &cat "/history/" $platform "zfile/tar.bz2-r1"       "\\1\eE\\2\eA"
    set-registry &cat "/history/" $platform "zfile/tar.bz2-s2"       "\\( [0-9][0-9]:[0-9][0-9] +\\)\\(.+/\\)$"
    set-registry &cat "/history/" $platform "zfile/tar.bz2-r2"       "\\1\eD\\2\eA"
    set-registry &cat "/history/" $platform "zfile/tar.bz2-extract"  &cat #l0 " jxf \"%zf\" \"%fb\""
    set-registry &cat "/history/" $platform "zfile/tar.bz2-remove"   "rm -rf \"%fb\""
!endif
; -- .tar.gz : gzip tar file.
!if &seq "" &reg "/history" &spr "%s/zfile/tar.gz-list" $platform ""
    set-registry &cat "/history/" $platform "zfile/tar.gz-list"     &cat #l0 " ztvf \"%zb\""
    set-registry &cat "/history/" $platform "zfile/tar.gz-cut-to"   "^."
    set-registry &cat "/history/" $platform "zfile/tar.gz-s1"       "\\( [0-9][0-9]:[0-9][0-9] +\\)\\(.*[^\n/]\\)$"
    set-registry &cat "/history/" $platform "zfile/tar.gz-r1"       "\\1\eE\\2\eA"
    set-registry &cat "/history/" $platform "zfile/tar.gz-s2"       "\\( [0-9][0-9]:[0-9][0-9] +\\)\\(.+/\\)$"
    set-registry &cat "/history/" $platform "zfile/tar.gz-r2"       "\\1\eD\\2\eA"
    set-registry &cat "/history/" $platform "zfile/tar.gz-extract"  &cat #l0 " zxf \"%zf\" \"%fb\""
    set-registry &cat "/history/" $platform "zfile/tar.gz-remove"   "rm -rf \"%fb\""
!endif
; -- .tbz : bzip2 tar file.
!if &seq "" &reg "/history" &spr "%s/zfile/tbz-list" $platform ""
    set-registry &cat "/history/" $platform "zfile/tbz-list"     &cat #l0 " jtvf \"%zb\""
    set-registry &cat "/history/" $platform "zfile/tbz-cut-to"   "^."
    set-registry &cat "/history/" $platform "zfile/tbz-s1"       "\\( [0-9][0-9]:[0-9][0-9] +\\)\\(.*[^\n/]\\)$"
    set-registry &cat "/history/" $platform "zfile/tbz-r1"       "\\1\eE\\2\eA"
    set-registry &cat "/history/" $platform "zfile/tbz-s2"       "\\( [0-9][0-9]:[0-9][0-9] +\\)\\(.+/\\)$"
    set-registry &cat "/history/" $platform "zfile/tbz-r2"       "\\1\eD\\2\eA"
    set-registry &cat "/history/" $platform "zfile/tbz-extract"  &cat #l0 " jxf \"%zf\" \"%fb\""
    set-registry &cat "/history/" $platform "zfile/tbz-remove"   "rm -rf \"%fb\""
!endif
; -- .tbz2 : bzip2 tar file.
!if &seq "" &reg "/history" &spr "%s/zfile/tbz2-list" $platform ""
    set-registry &cat "/history/" $platform "zfile/tbz2-list"     &cat #l0 " jtvf \"%zb\""
    set-registry &cat "/history/" $platform "zfile/tbz2-cut-to"   "^."
    set-registry &cat "/history/" $platform "zfile/tbz2-s1"       "\\( [0-9][0-9]:[0-9][0-9] +\\)\\(.*[^\n/]\\)$"
    set-registry &cat "/history/" $platform "zfile/tbz2-r1"       "\\1\eE\\2\eA"
    set-registry &cat "/history/" $platform "zfile/tbz2-s2"       "\\( [0-9][0-9]:[0-9][0-9] +\\)\\(.+/\\)$"
    set-registry &cat "/history/" $platform "zfile/tbz2-r2"       "\\1\eD\\2\eA"
    set-registry &cat "/history/" $platform "zfile/tbz2-extract"  &cat #l0 " jxf \"%zf\" \"%fb\""
    set-registry &cat "/history/" $platform "zfile/tbz2-remove"   "rm -rf \"%fb\""
!endif
; -- .tgz : gzip tar file.
!if &seq "" &reg "/history" &spr "%s/zfile/tgz-list" $platform ""
    set-registry &cat "/history/" $platform "zfile/tgz-list"     &cat #l0 " ztvf \"%zb\""
    set-registry &cat "/history/" $platform "zfile/tgz-cut-to"   "^."
    set-registry &cat "/history/" $platform "zfile/tgz-s1"       "\\( [0-9][0-9]:[0-9][0-9] +\\)\\(.*[^\n/]\\)$"
    set-registry &cat "/history/" $platform "zfile/tgz-r1"       "\\1\eE\\2\eA"
    set-registry &cat "/history/" $platform "zfile/tgz-s2"       "\\( [0-9][0-9]:[0-9][0-9] +\\)\\(.+/\\)$"
    set-registry &cat "/history/" $platform "zfile/tgz-r2"       "\\1\eD\\2\eA"
    set-registry &cat "/history/" $platform "zfile/tgz-extract"  &cat #l0 " zxf \"%zf\" \"%fb\""
    set-registry &cat "/history/" $platform "zfile/tgz-remove"   "rm -rf \"%fb\""
!endif
; -- .zip : zip file.
!if &seq "" &reg "/history" &spr "%s/zfile/zip-list" $platform ""
    set-registry &cat "/history/" $platform "zfile/zip-list"     "unzip -v \"%zb\""
    set-registry &cat "/history/" $platform "zfile/zip-cut-to"   "^ Length"
    set-registry &cat "/history/" $platform "zfile/zip-s1"       "^\\( Length .+\\)$"
    set-registry &cat "/history/" $platform "zfile/zip-r1"       "\eC\\1\eA"
    set-registry &cat "/history/" $platform "zfile/zip-s2"       "\\( [0-9][0-9]:[0-9][0-9] +[0-9A-Fa-f]+ +\\)\\(.*[^\n/]\\)$"
    set-registry &cat "/history/" $platform "zfile/zip-r2"       "\\1\eE\\2\eA"
    set-registry &cat "/history/" $platform "zfile/zip-s3"       "\\( [0-9][0-9]:[0-9][0-9] +[0-9A-Fa-f]+ +\\)\\(.+/\\)$"
    set-registry &cat "/history/" $platform "zfile/zip-r3"       "\\1\eD\\2\eA"
    set-registry &cat "/history/" $platform "zfile/zip-extract"  "unzip -o \"%zf\" \"%fb\""
    set-registry &cat "/history/" $platform "zfile/zip-remove"   "rm -f \"%fb\""
; uncomment the following to use zipinfo instead
;    set-registry &cat "/history/" $platform "zfile/zip-list"     "zipinfo -sh \"%zb\""
;    set-registry &cat "/history/" $platform "zfile/zip-cut-to"   "^Archive"
;    set-registry &cat "/history/" $platform "zfile/zip-s1"       "^\\(Archive .+\\)$"
;    set-registry &cat "/history/" $platform "zfile/zip-r1"       "\eC\\1\eA"
;    set-registry &cat "/history/" $platform "zfile/zip-s2"       "\\( [0-9][0-9]:[0-9][0-9] +\\)\\(.*[^\n/]\\)$"
;    set-registry &cat "/history/" $platform "zfile/zip-r2"       "\\1\eE\\2\eA"
;    set-registry &cat "/history/" $platform "zfile/zip-s3"       "\\( [0-9][0-9]:[0-9][0-9] +\\)\\(.+/\\)$"
;    set-registry &cat "/history/" $platform "zfile/zip-r3"       "\\1\eD\\2\eA"
!endif

;
; Load in a file from an archive list 
; 
0 define-macro zfile-loadfile
    !if &not &and &set #l0 &sin "\eE" @wl &set #l1 &sin "\eA" @wl
        ml-write "[find-zfile error: Invalid line]"
        !abort
    !endif
    !if &seq "" &set #l9 &reg "/history" &spr "%s/zfile/%s-extract" $platform :zftype ""
        ml-write &spr "[find-zfile error: Registry entry \"/history/%s/%s-extract\" not setup]" $platform :zftype
        !abort
    !endif
    set-variable #l7 &reg "/history" &spr "%s/zfile/%s-remove" $platform :zftype ""
    set-variable #l2 &mid @wl &add #l0 1 &sub #l1 &add #l0 2
    set-variable #l4 $buffer-fname
    ; get a tmp file name and use the path of it as our scratch area
    ; use &stat to get '/'s in a windows and dos system
    set-variable #l0 &stat "a" $temp-name
    set-variable #l0 &lef #l0 &ris "/" #l0
    ; create the output file name and check if it exists
    set-variable #l3 &cat #l0 #l2
    !if &seq &set #l5 &stat "t" #l3 "R"
        !if &iseq @mc1 &spr "Over-write file %s (y/n) ? " #l3 "yYnN" "n"
            !return
        !endif
    !elif &not &seq #l5 "X"
        ml-write &spr "[find-zfile error: Cannot output to file \"%s\"]" #l3
        !abort
    !endif
    ml-write &spr "[Extracting %s]" #l2
    ; create a temporary buffer, set the filename to the path and kick off extract
    find-buffer "*zfile log*"
    set-variable $buffer-fname #l0
    set-variable #l9 &rep #l9 "%zb" &rig #l4 &rsin "/" #l4 
    !if &band $system 0x400
        set-variable #l4 &rep #l4 "/" "\\"
    !endif
    set-variable #l9 &rep &rep #l9 "%zf" #l4 "%fb" #l2
;    set-variable $debug 1
    0 pipe-shell-command #l9 "*zfile log*" @mna
    find-file #l3 @mna
    set-variable $buffer-fname ""
    set-variable #l5 $buffer-bname
    find-buffer "*zfile log*"
    !if &not &seq #l7 ""
        shell-command &rep #l7 "%fb" #l2
    !endif
    set-variable $buffer-fname ""
    -1 find-buffer "*zfile log*"
    ml-clear
!emacro
;
; Extract a file from a compressed single file archive
; 
0 define-macro zfile-extract
    set-variable #l4 &stat "a" @1
    !if &seq "" &set #l9 &reg "/history" &spr "%s/zfile/%s-extract" $platform @2 ""
        ml-write &spr "[find-zfile error: Registry entry \"/history/%s/%s-extract\" not setup]" $platform @2
        !abort
    !endif
    ; get a tmp file name and use the path of it as our scratch area
    ; use &stat to get '/'s in a windows and dos system
    set-variable #l0 &stat "a" $temp-name
    set-variable #l0 &lef #l0 &ris "/" #l0
    ; create the output file name and check if it exists
    set-variable #l2 &rig #l4 &ris "/" #l4
    set-variable #l2 &lef #l2 &sub &len #l2 &add 1 &len @2
    set-variable #l3 &cat #l0 #l2
    !if &seq &set #l5 &stat "t" #l3 "R"
        !if &iseq @mc1 &spr "Over-write file %s (y/n) ? " #l3 "yYnN" "n"
            !return
        !endif
    !elif &not &seq #l5 "X"
        ml-write &spr "[find-zfile error: Cannot output to file \"%s\"]" #l3
        !abort
    !endif
    ; create a temporary buffer, set the filename to the path and kick off extract
    find-buffer "*zfile log*"
    set-variable $buffer-fname #l0
    set-variable #l9 &rep #l9 "%zb" &rig #l4 &rsin "/" #l4 
    !if &band $system 0x400
        set-variable #l4 &rep #l4 "/" "\\"
    !endif
    set-variable #l9 &rep &rep #l9 "%zf" #l4 "%fb" #l3
    0 pipe-shell-command #l9 "*zfile log*" @mna
    find-file #l3 @mna
    set-variable $buffer-fname ""
    set-variable #l5 $buffer-bname
    find-buffer "*zfile log*"
    ; Get the remove action if there is one.
    set-variable #l7 &reg "/history" &spr "%s/zfile/%s-remove" $platform @2 ""
    !if &not &seq #l7 ""
        shell-command &rep #l7 "%fb" #l3
    !endif
    set-variable $buffer-fname ""
    -1 find-buffer "*zfile log*"
!emacro

0 define-macro zfile-mouse-pick-1
    set-variable :zmpl "|0|||"
    !if &set #l0 &sin "\eE" @wl
        !if &gre $window-col &sub #l0 2
            !if &set #l1 &sin "\eA" @wl
                !if &les $window-col #l1
                    set-variable :zmpl &spr "|%d|%d|%d|" $window-line #l0 #l1
                    set-variable $window-col #l0
                    -3 show-region
                    set-variable $window-col #l1
                    3 show-region
                    set-cursor-to-mouse
                    show-region
                !endif
            !endif
        !endif
    !endif
!emacro
0 define-macro zfile-mouse-drop-1
    !force -1 show-region
    !if &equ $window-line &lget :zmpl 1
        !if &gre $window-col &sub &lget :zmpl 2 2
            !if &les $window-col &lget :zmpl 3
                zfile-loadfile
            !endif
        !endif
    !endif
!emacro

define-macro find-zfile
    !force set-variable #l0 @1
    !if &not $status
        set-variable #l0 @ml01 "Find zfile"
    !endif
    ; Loop and get the extension
    set-variable #l8 #l0
*again    
    !if &not &sin "." #l8
        ml-write &spr "[find-zfile error: Unknown file type \"%s\", run zfile-setup]" #l0
        !abort
    !endif
    ; Get the next extension if there is one.
    set-variable #l8 &rig #l8 &sin "." #l8
    !if &iseq "" &set #l9 &reg "/history" &spr "%s/zfile/%s-list" $platform #l8 ""
        !if &iseq "" &set #l9 &reg "/history" &spr "%s/zfile/%s-extract" $platform #l8 ""
            ; Neither a list or extraction command.
            !goto again
        !else
            ; Extraction command do this now.
            zfile-extract #l0 #l8
            !return
        !endif
    !endif
    ;
    ; get the absolute file name
    ;
    set-variable #l0 &stat "a" #l0
    ; see if this has already been loaded
    set-variable #l2 $buffer-bname
    set-variable $buffer-names "[*].*"
    !while &not &seq &set #l3 $buffer-names ""
        find-buffer #l3
        !if &seq $buffer-fname #l0
            !return
        !endif
    !done
    ; create a unique buffer name
    set-variable #l2 &rig #l0 &rsin "/" #l0
    set-variable #l3  #l2
    set-variable #l4 0
    set-variable $buffer-names &cat "[*]" #l3
    !if &not &seq $buffer-names ""
        set-variable #l3 &spr "%s<%d>" #l2 &inc #l4 1
        !jump -3
    !endif
    set-variable #l3 &cat "*" #l3
    ; pop-up buffer and set the file name so the execution only needs the base name
    find-buffer #l3
    set-variable $buffer-fname #l0
    ; execute the list command into the buffer
    set-variable #l9 &rep &rep #l9 "%zb" #l2 "%zf" #l0
    0 pipe-shell-command #l9 #l3 @mna
    set-variable $buffer-fname #l0
    -1 buffer-mode "view"
    1 buffer-mode "magic"
    set-mark
    2 forward-line
    !if &seq "" &set #l1 &reg "/history" &spr "%s/zfile/%s-cut-to" $platform #l8 ""
    !else
        search-forward #l1
        !if $status
            -2 show-region
        !endif
    !endif
    !force -1 kill-region "y"
    set-variable #l1 0
    !while &not &seq &set #l2 &reg "/history" &spr "%s/zfile/%s-s%d" $platform #l8 &inc #l1 1 "" ""
        set-variable #l3 &reg "/history" &spr "%s/zfile/%s-r%d" $platform #l8 #l1 ""
        !force replace-string #l2 #l3
        beginning-of-buffer
    !done
    insert-string &spr "%s file: \eB%s\eA\n\n" #l8 #l0
    beginning-of-buffer
    -1 buffer-mode "edit"
    1 buffer-mode "view"
    buffer-bind-create "boi" "return" "" zfile-loadfile
    set-variable $buffer-hilight .hilight.zfile
    set-variable :zftype #l8
    set-variable :mouse-pick-1 zfile-mouse-pick-1
    set-variable :mouse-drop-1 zfile-mouse-drop-1
!emacro

define-macro zfile-setup
    set-variable #l0 @ml "zfile extension"
    set-variable #l1 @ml2 "zfile list command (%zb=zbase %zf=zfile)" &reg "/history" &spr "%s/zfile/%s-list" $platform #l0 ""
    set-registry "/history" &spr "%s/zfile/%s-list" $platform #l0 #l1
    set-variable #l1 @ml2 "zfile cut to search string" &reg "/history" &spr "%s/zfile/%s-cut-to" $platform #l0 ""
    set-registry "/history" &spr "%s/zfile/%s-cut-to" $platform #l0 #l1
    set-variable #l2 1
    !repeat
        set-variable #l1 @ml2 &cat "zfile search string " #l2 &reg "/history" &spr "%s/zfile/%s-s%d" $platform #l0 #l2 ""
        !if &seq #l1 ""
            !force delete-registry &spr "/history/%s/zfile/%s-s%d" $platform #l0 #l2 #l1
        !else
            set-registry "/history" &spr "%s/zfile/%s-s%d" $platform #l0 #l2 #l1
            set-variable #l3 @ml2 &cat "zfile search string " #l2 &reg "/history" &spr "%s/zfile/%s-r%d" $platform #l0 #l2 ""
            set-registry "/history" &spr "%s/zfile/%s-r%d" $platform #l0 #l2 #l3
            set-variable #l2 &add #l2 1
        !endif
    !until &seq #l1 ""
    set-variable #l1 @ml2 "zfile extract command (%zb=zbase %zf=zfile %fb=fbase)" &reg "/history" &spr "%s/zfile/%s-extract" $platform #l0 ""
    set-registry "/history" &spr "%s/zfile/%s-extract" $platform #l0 #l1
    set-variable #l1 @ml2 "zfile remove extract command (%fb=fbase)" &reg "/history" &spr "%s/zfile/%s-remove" $platform #l0 ""
    set-registry "/history" &spr "%s/zfile/%s-remove" $platform #l0 #l1
!emacro
