; -!- emf -!-
; This is part of the JASSPA MicroEmacs macro files
; Copyright (C) 1999-2009 JASSPA (www.jasspa.com)
; See the file me.emf for copying and conditions.
;
; Synopsis:   Ruby hook - invoked when a Ruby script file is loaded.
; Author:     Jon Green
;
define-macro fhook-ruby
    set-variable $buffer-mask "luh1"
    @# buffer-init "ruby"
    buffer-init-hooks
!emacro

; buffer-init variables
set-variable .fhook-ruby.setup &reg "/history/fhook/ruby" "bdfghinopx"
set-variable .fhook-ruby.setup-mask "abdefghikmnoptux"
set-variable .fhook-ruby.comment "|#||#|# | #|r|"

; Setup collapse
set-variable .fhook-ruby.collapse-open  "^\\(module\\|class\\)"
set-variable .fhook-ruby.collapse-close "^end"
set-variable .fhook-ruby.collapse-mclose "1"
set-variable .fhook-ruby.collapse-mnext "-1"

; setup item-list
set-variable .fhook-ruby.item-list-s1 "^[\t ]*module[\t ]+\\(\\w[1-9A-Za-z_]*\\)"
set-variable .fhook-ruby.item-list-r1 "Mod \ecB\\1\ecA"
set-variable .fhook-ruby.item-list-s2 "^[\t ]*class[\t ]+\\(\\w[1-9A-Za-z_]*\\)[\t ]*<?<?[\t ]*[A-Za-z0-9_]*"
set-variable .fhook-ruby.item-list-r2 "Cls \ecB\\1\ecA"
set-variable .fhook-ruby.item-list-s3 "^[\t ]*def[\t ]+\\(\\w[1-9A-Za-z_.]*\\)[\t ]*.*$"
set-variable .fhook-ruby.item-list-r3 "Def \ecB\\1\ecA"

!if &not &exist .hilight.ruby
    set-variable .hilight.ruby  &pinc .hilight.next 1
!endif

!if &and &sin "h" .fhook-ruby.setup &band .hilight.flags 0x02
    ; Ruby hilighting
    0 hilight .hilight.ruby 2 50                   $global-scheme
    ; Comments
    hilight .hilight.ruby 2 "^#!/"                 .scheme.header
    hilight .hilight.ruby 2 "#"                    .scheme.comment
    ;
    hilight .hilight.ruby   18 "#\\s*[tT][oO][dD][oO]" .scheme.error
    ; String literals
    hilight .hilight.ruby    4 "\"" "\"" "\\"      .scheme.string
    hilight .hilight.ruby    4 "'" "'" "\\"        .scheme.string
    hilight .hilight.ruby    1 "\\?#"              .scheme.constant
    ; String literals & special forms
    hilight .hilight.ruby    0 "%[qQ](\\{[^)]*\\})"           .scheme.string
    hilight .hilight.ruby    0 "%[qQ]{\\{[^}]*\\}}"           .scheme.string
    hilight .hilight.ruby    0 "%[qQ]\\(.\\)\\{\\!1*\\}\\1"   .scheme.string
    hilight .hilight.ruby    0 "%\\([^rqQx]\\)\\{\\!1*\\}\\1" .scheme.string
    ; Command output
    hilight .hilight.ruby    4 "`" "`" "\\"              .scheme.variable
    hilight .hilight.ruby    0 "%x{\\{[^}]*\\}}"         .scheme.variable
    hilight .hilight.ruby    0 "%x(\\{[^)]*\\})"         .scheme.variable
    hilight .hilight.ruby    0 "%x\\(.\\)\\{\\!1*\\}\\1" .scheme.variable
    ; Regular Expression.
    hilight .hilight.ruby    0 "/\\{[^/]*\\}/"           .scheme.variable
    hilight .hilight.ruby    0 "/\\{[^/]*\\}/[io]"       .scheme.variable
    hilight .hilight.ruby    0 "%r{\\{[^}]*\\}}"         .scheme.variable
    hilight .hilight.ruby    0 "%r(\\{[^)]*\\})"         .scheme.variable
    hilight .hilight.ruby    0 "%r\\(.\\)\\{\\!1*\\}\\1" .scheme.variable
    
    hilight .hilight.ruby    0x20 "include" .scheme.prepro
    ; Reserved Words
    hilight .hilight.ruby    1 "BEGIN"      .scheme.keyword
    hilight .hilight.ruby    1 "END"        .scheme.keyword
    hilight .hilight.ruby    1 "alias"      .scheme.keyword
    hilight .hilight.ruby    1 "begin"      .scheme.keyword
    hilight .hilight.ruby    1 "break"      .scheme.keyword
    hilight .hilight.ruby    1 "case"       .scheme.keyword
    hilight .hilight.ruby    1 "class"      .scheme.keyword
    hilight .hilight.ruby    1 "def"        .scheme.keyword
    hilight .hilight.ruby    1 "defined"    .scheme.keyword
    hilight .hilight.ruby    1 "do"         .scheme.keyword
    hilight .hilight.ruby    1 "else"       .scheme.keyword
    hilight .hilight.ruby    1 "elsif"      .scheme.keyword
    hilight .hilight.ruby    1 "end"        .scheme.keyword
    hilight .hilight.ruby    1 "ensure"     .scheme.keyword
    hilight .hilight.ruby    1 "for"        .scheme.keyword
    hilight .hilight.ruby    1 "if"         .scheme.keyword
    hilight .hilight.ruby    1 "module"     .scheme.keyword
    hilight .hilight.ruby    1 "next"       .scheme.keyword
    hilight .hilight.ruby    1 "redo"       .scheme.keyword
    hilight .hilight.ruby    1 "rescue"     .scheme.keyword
    hilight .hilight.ruby    1 "retry"      .scheme.keyword
    hilight .hilight.ruby    1 "return"     .scheme.keyword
    hilight .hilight.ruby    1 "self"       .scheme.keyword
    hilight .hilight.ruby    1 "super"      .scheme.keyword
    hilight .hilight.ruby    1 "then"       .scheme.keyword
    hilight .hilight.ruby    1 "undef"      .scheme.keyword
    hilight .hilight.ruby    1 "unless"     .scheme.keyword
    hilight .hilight.ruby    1 "until"      .scheme.keyword
    hilight .hilight.ruby    1 "when"       .scheme.keyword
    hilight .hilight.ruby    1 "while"      .scheme.keyword
    hilight .hilight.ruby    1 "yield"      .scheme.keyword
    ; Others which are common but not reserved.
    hilight .hilight.ruby    1 "print"      .scheme.keyword
    hilight .hilight.ruby    1 "puts"       .scheme.keyword
    hilight .hilight.ruby    0x20 "require" .scheme.prepro
    ; Built-in Variables
    hilight .hilight.ruby    1 "true"       .scheme.prepro
    hilight .hilight.ruby    1 "false"      .scheme.prepro
    hilight .hilight.ruby    1 "nil"        .scheme.prepro
    hilight .hilight.ruby    1 "self"       .scheme.prepro
    hilight .hilight.ruby    1 "__FILE__"   .scheme.prepro
    hilight .hilight.ruby    1 "__LINE__"   .scheme.prepro
    ; Operators
    hilight .hilight.ruby    1 "or"         .scheme.operator
    hilight .hilight.ruby    1 "not"        .scheme.operator
    hilight .hilight.ruby    1 "and"        .scheme.operator
    hilight .hilight.ruby    1 "in"         .scheme.operator
    hilight .hilight.ruby    1 "defined\\?" .scheme.operator

    ; Global variables
    hilight .hilight.ruby    4 "\\$" "\\}\\W" "" .scheme.variable
    ; Instance Variables
    ; hilight .hilight.ruby    4 "@" "\\}\\W" ""  .scheme.variable
    hilight .hilight.ruby    0 "@"              .scheme.variable

    !if &band .hilight.flags 0x08
        ; hilight constants, e.g. numbers
        hilight .hilight.ruby 1 "[[:digit:]]+"       .scheme.constant
        hilight .hilight.ruby 1 "-[[:digit:]]+"      .scheme.constant
        hilight .hilight.ruby 1 "0[x][[:xdigit:]]+" .scheme.constant
        ; Binary notation.
        hilight .hilight.ruby 1 "0b[01]+" .scheme.constant
        ; Allow numbers with underscore !
        hilight .hilight.ruby 1 "[0-9._]+" .scheme.constant
        ; Floating point number.
        hilight .hilight.ruby 1 "[-+]?[0-9.]+e[-+]?[0-9]+" .scheme.constant
        ; ASCII Code
        hilight .hilight.ruby 1 "\\?[a-zA-z]" .scheme.constant
        ; Control-a
        hilight .hilight.ruby 1 "\\?\\\\C-[a-z]" .scheme.constant
        ; Meta-a
        hilight .hilight.ruby 1 "\\?\\\\M-\\\\C-[a-z]" .scheme.constant
        ; Meta-Control-a
        hilight .hilight.ruby 1 "\\?\\\\M-[a-z]" .scheme.constant
        ; Upper case constants commence with upper case character.
        ; hilight .hilight.ruby 1 "[A-Z]\\w+" .scheme.constant
    !endif
!endif

; Indentation. Comment out this block if causes problems
!if &sin "d" .fhook-ruby.setup
    0 indent  .hilight.ruby 0 25
    ; These will typically be at the start of a line.
    indent .hilight.ruby N "^[ \t]*module" t
    indent .hilight.ruby N "^[ \t]*class" t
    indent .hilight.ruby N "begin" t
    indent .hilight.ruby N "case" t
    indent .hilight.ruby N "def" t
    ; 'if' is tricky becuase it may appear as modifier 'expr if expr'
    indent .hilight.ruby N "^[ \t]*if" t
    ; 'unless' is tricky becuase it may appear as modifier 'expr unless expr'
    indent .hilight.ruby N "^[ \t]*unless" t
    ; 'while' is tricky becuase it may appear as modifier 'expr while expr'
    ; There is also another case of 'while expr do' where we want a single
    ; indent to 2. 
    indent .hilight.ruby N "^[ \t]*while.*do" t
    indent .hilight.ruby N "^[ \t]*while" t
    ; 'until' is tricky becuase it may appear as modifier 'expr until expr'
    ; There is also another case of 'until expr do' where we want a single
    ; indent to 2. 
    indent .hilight.ruby N "^[ \t]*until.*do" t
    indent .hilight.ruby N "^[ \t]*until" t
    ;
    indent .hilight.ruby N "do" t
    indent .hilight.ruby n "{" t
    ; Closing indents.
    indent .hilight.ruby O "end" -t
    indent .hilight.ruby o "}" -t
    ; Temporary indent items.
    indent .hilight.ruby S "else" -t
    indent .hilight.ruby S "elsif" -t
    indent .hilight.ruby S "ensure" -t
    indent .hilight.ruby S "rescue" -t
    indent .hilight.ruby S "when" -t
    ; Various brackets to ignore - strings, exec and regex.
    indent .hilight.ruby e "'" "'" "\\"
    indent .hilight.ruby e "\"" "\"" "\\"
    indent .hilight.ruby e "/" "/" "\\"
    indent .hilight.ruby e "`" "`" "\\"
    ; More complex backets of ruby, we cannot cover all here, do common ones.
    indent .hilight.ruby e "%[qQxrw](" ")" "\\"
    indent .hilight.ruby e "%[qQxrw]{" "}" "\\"
    indent .hilight.ruby e "%[qQxrw]!" "!" "\\"
    indent .hilight.ruby e "%[qQxrw]|" "|" "\\"
    indent .hilight.ruby e "%!" "!" "\\"
    indent .hilight.ruby e "%(" ")" "\\"
    indent .hilight.ruby e "%{" "}" "\\"
    indent .hilight.ruby e "%|" "|" "\\"
    ; Brackets
    indent .hilight.ruby b "(" ")"
    ; Continue lines
    indent .hilight.ruby c "\\\\" t
    ; Expressions at the end of a line - try with these
    indent .hilight.ruby c "[-+=*/<>]$" t
    indent .hilight.ruby c "[-+=*/<>][ \t]+$" t
    ; Ignore comments.
    indent .hilight.ruby i "#"
!endif

buffer-init-fhook "ruby"
