;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;  Created By    : Detlef Groth, University of Potsdam, Germany
;  Created       : Mon Mar 24 11:14:06 2025
;  Last Modified : <250603.1804>
;
;  Description   : Support for editing language files with generic
;                  macros file-exec, file-format and file-lint using the 
;                  buffer provided variables with commands for
;                  formatting, linting and executing a source code file
;  Notes         : Based on tcltools.emf 
;     
;  Example       ; to activate the three commands you have to declare three buffer
;                ; variables for formatting, linting and executing the current buffer
;                ; for instance for Python files you could add the following three lines
;                ; to your mypython.emf or to your username.emf file
;                set-variable %fhook-python-format "ruff format %f" ; using the ruff formatter
;                set-variable %fhook-python-lint   "ruff check %f"    ; using the ruff linter
;                set-variable %fhook-python-exec   "python3 %f"
;                ; for the Go programming language it could be within mygo.emf
;                set-variable %fhook-go-format     "go fmt %f"
;                set-variable %fhook-go-lint       "go vet %f"
;                set-variable %fhook-go-exec       "go run %f"
;                ; for the C programming language
;                set-variable %fhook-c-exec "gcc %f -o %b && ./%b"
;                set-variable %fhook-c-lint "cppcheck %f"
;                set-variable %fhook-c-format "astyle --indent=spaces=4 %f"
;  History       : 2025-04-14 - first version
;                  2025-05-29 - rewrite using file-tools-run anf add-next-line macros
;                  2025-06-01 - using find.emf for the macros to locate the problematic line
;
;  Copyright (c) 2025 Detlef Groth. License same as Jasspa's MicroEmacs
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

define-macro-file find return-get-next-line mouse-get-next-line

define-macro fhook-file-lint
  buffer-init-hooks
!emacro
; minimal defaults
add-next-line "*file-exec*" "%f:%l:\\d+"
add-next-line "*file-lint*" "%f:%l:\\d+"

define-macro file-lint
  set-variable #l0 &ind &cat &cat "%" $buffer-fhook "-lint"
  !if &seq #l0 "ERROR"
      -8 ml-write &cat &cat "Error: There is no variable %" $buffer-fhook "-lint declared!"
      !abort
  !endif
  &band @# 1 save-some-buffers @mna
  0x4088 file-tool-run #l0 $buffer-fname "*file-lint*"
  replace-filename-parenthesis
  buffer-init "file-lint"
  set-variable :mouse-word-select "mouse-get-next-line"
  buffer-bind-key return-get-next-line "return"
!emacro  

set-variable .fhook-file-lint.name "File Lint"
set-variable .fhook-file-lint.setup &reg "/history/fhook/file-lint" "acfhmw"
set-variable .fhook-file-lint.setup-mask "acfhmw"

!if &and &sin "h" .fhook-file-lint.setup &band .hilight.flags 0x02
  !iif &not &exi .hilight.file-lint  set-variable .hilight.file-lint &pinc  .hilight.next 1
  0 hilight .hilight.file-lint 2 200                                     $global-scheme
  hilight .hilight.file-lint   0  "\\.+:[0-9]+:[0-9]+"      .scheme.link  
  hilight .hilight.file-lint   0  "[-/A-Za-z0-9]+\\.*[A-Za-z0-9]+:[0-9]+:[0-9]+"      .scheme.link    
!endif

add-file-hook "*file-lint*" fhook-file-lint

define-macro file-format
  ; on Windows the syntax for format-opts might be something like
  ; C:/Program Files/GO/../go.exe fmt %s
  set-variable #l0 &ind &cat &cat "%" $buffer-fhook "-format"
  set-variable #l1 $buffer-bname
  !if &seq #l0 "ERROR"
    -8 ml-write &cat &cat "Error: There is no variable %" $buffer-fhook "-format declared!"
    !abort
  !endif
  &band @# 1 save-some-buffers @mna  
  0x4188 file-tool-run #l0 $buffer-fname "*file-format*"
  ;next-window-find-buffer #l1
  0 reread-file
!emacro

define-macro fhook-file-exec
  buffer-init-hooks
!emacro

define-macro file-exec
  set-variable #l0 &ind &cat &cat "%" $buffer-fhook "-exec"
  set-variable #l1 $buffer-fhook
  !if &seq #l0 "ERROR"
      -8 ml-write &cat &cat "Error: There is no variable %" $buffer-fhook "-exec declared!"
      !abort
  !endif
  &band @# 1 save-some-buffers @mna
  ; command line arguments
  !iif &not &exi :file-exec-args  set-variable :file-exec-args ""
  !iif &not &band @# 2  set-variable :file-exec-args @ml2 "Additional command-line arguments" :file-exec-args 
  set-variable #l0 &spr "%s %s" #l0 :file-exec-args
  0x4088 file-tool-run #l0 $buffer-fname "*file-exec*"
  replace-filename-parenthesis
  !if &seq #l1 "fhook-python"
      replace-filename-python
  !endif
  buffer-init "file-exec"
  ; clicking on errors does not jump to the file but openes a new 
  ; file.ext<1> buffer
  set-variable :mouse-word-select "mouse-get-next-line"
  buffer-bind-key return-get-next-line "return"
!emacro

set-variable .fhook-file-exec.name "File Exec"
set-variable .fhook-file-exec.setup &reg "/history/fhook/file-exec" "acfhmw"
set-variable .fhook-file-exec.setup-mask "acfhmw"

!if &and &sin "h" .fhook-file-exec.setup &band .hilight.flags 0x02
  !iif &not &exi .hilight.file-exec  set-variable .hilight.file-exec &pinc  .hilight.next 1
  0 hilight .hilight.file-exec 2 200                                     $global-scheme
  hilight .hilight.file-exec   0  "[/\\.A-Za-z0-9]+:[0-9]+:[0-9]+"      .scheme.link    
!endif

add-file-hook "*file-exec*" fhook-file-exec

; workaround for filenames in parenthesis like for the c3c compiler
0 define-macro replace-filename-parenthesis
  -1 buffer-mode "view"
  beginning-of-buffer
  replace-string "^(\\(.+[0-9]\\))" "\\1"
  beginning-of-buffer
  -1 buffer-mode "edit"
  1 buffer-mode "view"  
!emacro

0 define-macro replace-filename-python
  -1 buffer-mode "view"
  beginning-of-buffer
  replace-string "File \"\\(.+\\)\", line \\(.+\\)," "\\1:\\2:0"
  beginning-of-buffer
  -1 buffer-mode "edit"
  1 buffer-mode "view"  
!emacro
define-help "file-lint" 3
! 3 file-exec
! 3 file-lint
! 3 file-format
## NAME

__file-exec__ - execute the current script using a interpreter or after compilation  
__file-format__ - format the current file using a language dependent formatter  
__file-lint__ - format the current file using a language dependent formatter  

$a

## SYNOPSIS

_n_  __file-exec__  
__file-format__  
__file-lint__ 

## DESCRIPTION

The three commands described below require the definition of global variables 
which should declare the command lines to be used for executing, linting or 
formatting the current file. The variable names are of type:

  _fhook-FHOOK-(exec|format|lint)_ 

where _FHOOK_ is the file hook name of the file.  The variable declaration can be 
added to the users configuration file, _USERNAME.emf_ or into the _myFHOOK.emf_
file within the users configuration folder. These variables should point to the
tool or compiler or interpreter and take place holders for the filename or the file
buffer basename like this:

- "%f" - the filename of the currently edited file
- "%b" - the basename of the current file buffer name
- "%s" - will be replaced with the filename

See below for a few examples.

The __file-exec__  macro executes or compiles the currently edited file using 
a global variable which needs to be defined for the current file hook. See below
for a few examples for defining these global variables. If a numeric argument
is given the user is asked for possible command line arguments. After executing 
this macro a popup-window command should appear showing the output or possible 
errors of the code.

The __file-format__ macro formats the currently edited  file using the
a language specific formatter which needs to be defined using an user defined
global file hook dependent variable. See below for a few examples.

The __file-lint__   macro checks the currently edited file using an user an user
defined global variable for the current file hook.

After executing the macro a popup-window (`*lintr*`) displays the warning
messages of the linter package, the user can click on the hilighted lines
showing  warnings and jump directly to the problematic line. This requires that
the linter defined in the variable supports the _FILENAME:LINE:CHAR:_ syntax.
The same can jumping to the error be achieved by pressing the ENTER key on 
the hilighted line.

These three macros can be seen as simplified  versions for the Go, Python, R
and Tcl macros like  __go-lint__ or  __go-format__ etc.
They can be used as well to use  alternative  tools for  formatting  and linting
allowing easy support of other programming languages.

## EXAMPLE

```{emf}
    ; user-defined variables in the users emf or in the mypython.emf 
    set-variable %fhook-python-format "ruff format %f" ; using the ruff formatter
    set-variable %fhook-python-lint   "ruff check %f"  ; using the ruff linter
    set-variable %fhook-python-exec   "python3 %f"
    ; for the Go programming language it could be as well within username.emf or mygo.emf
    set-variable %fhook-go-format     "go fmt %f"
    set-variable %fhook-go-lint       "go vet %f"
    set-variable %fhook-go-exec       "go run %f"
    ; working with C++ code using cppcheck, astyle and g++
    set-variable %fhook-cpp-lint "cppcheck --quiet --enable=all --suppress=missingIncludeSystem %f"
    set-variable %fhook-cpp-exec "g++ %f 2>&1 -o %b; ./%b"
    set-variable %fhook-cpp-format "astyle %f"
    ; command execution
    file-exec          ; executes the current file using the fhook-FHOOKNAME-exec var
    0 file-exec        ; ask for command line arguments and calls then executes
    file-format        ; formats and reloads the currently edited file using the formatter
    file-lint          ; gives code advise for the currently edited file
```
      
## NOTES

The macros __file-exec__,  __file-format__  and __file-lint__ are implemented in the file `filtools.emf`.
  
## SEE ALSO

[file-tool-setup(3)](file-tool-setup\(3\))
!ehelp

