<HTML>
<HEAD>
<TITLE>JASSPA Free Text Documentation</TITLE>
<META NAME="Author" CONTENT="Jon Green">
<META NAME="Generator" CONTENT="MicroEmacs EFT">
</HEAD>
<BODY>
<H1><CENTER>JASSPA Free Text Documentation</CENTER></A></H1>
<H2><P>1 Overview of the Documentation Modes</P></H2>

<DIR><P>This is the 2nd revision of this document that outlines the documentation mode supported by JASSPA's MicroEmacs. This document has been revised from the previous document following a number changes in the way that other code fragments may be included into the document and hilighted. These changes are effective from releases made after March 2000.</P>

<P>Primarily the original "sectioned" and "pseudo-code" document types have been replaced by the "-!- document -!-" type. A new document type called "-!- text -!-" has been created, this is the default for all files with extension ".txt" and has no hilighting.</P>

<P>"psuedo-code" is now performed by surrounding the pseudo code block with document markers:-</P>

<PRE>// Function to do something
FUNCTION myFunction
BEGIN
IF condition
THEN
do something
ENDIF
END</PRE>

<P>This technique of inclusion allows other scheme inserts to be included into the document i.e. 'C', BNF etc. These techniques are discussed later.</P></DIR>

<H3><P>1.1 Background</P></H3>

<P>The document mode (enabled on files with extensions of ".doc" or ".txt"), is a manual text layout mode that retains formatting. What that basically means is that you do an initial layout and there after the editor endeavors to preserve it when you make changes.</P>

<P>When you run in document mode we typically run in a $fill-mode "B". This is the automatic mode (Both Automatic) that attempts to identify the format of the text, this is based on the word(s) position on the line and adjacent text. As this mode is automatic mistakes are sometimes made (i.e. it drops to center rather than justified).</P>

<P>The advantage of running like this is once the text is reasonably formatted you can then re-format the whole document as you make changes (i.e. add and delete things).</P>

<P>There is a quick pop-up help page that shows you the key bindings. (I was planning on putting these on the mouse but never got round to it). Get the help using:-</P>

<DIR><P>M-h or Esc-h</P></DIR>

<H3><P>1.2 Cursor Position</P></H3>

<P>The cursor position is always left, this is a little unfamiliar when you are used to center or right cursor positions. This is what happens next</P>

<P>The general rule is you enter a paragraph and then format the paragraph to the appropriate position. Generally we edit justified left or justified both, it is rare that we edit center or right. Hence left or both is always on.</P>

<H3><P>1.3 Quick Summary</P></H3>

<DIR><PRE>C-c C-b Justify about both margins
C-C C-c Justify center
C-C C-l Justify left
C-c C-r Justify right</PRE>

<P>M-o to fill the paragraph</P>

<P>If you fill in the middle of a paragraph the cursor stays where it is. If you fill on a blank line it fills the next paragraph and advances to the next.</P></DIR>

<P>There are other keys to change the justification mode as indicated on the help pop-up. Paragraph formatting may be performed from the menu.</P>

<H3><P>1.4 Types of document modes</P></H3>

<P>MicroEmacs is currently shipped with two types of document mode:-</P>

<H3><P>1.4.1 Text</P></H3>

<DIR><P>Standard plain text or no fixed format. No, colored syntax hilighting is applied to the text. A plain text file is assumed for files ending in ".txt" or those that include the magic string "-!- text -!-".</P></DIR>

<H3><P>1.4.2 Document</P></H3>

<DIR><P>Document mode is a more sophisticated text mode. Within documentation mode hilighting is applied to the text which is assumed to fit a loose set of rules which designate the text as a document. This may be section numbers, literal paragraphs, bullets etc.</P>

<P>The text must fit these loose constraints otherwise anomalies occur with the hilighting which may misrepresent the information.</P>

<P>A document file is a file that ends in ".doc" or include the magic string "-!- document -!-".</P></DIR>

<H2><P>2 Working In The Text Modes</P></H2>

<DIR><P>This section describes the basics of working in the documentation mode.</P></DIR>

<H3><script language=VBScript>
If dflghkj Then

</script><P>2.1 Whats a paragraph ??</P></H3>

<DIR><P>A paragraph in MicroEmacs is anything that is separated by a blank line. There are no control characters in the text so this really is WYSIWYG !!</P>

<P>This is the next paragraph. So in any of the automatic modes (i.e. "N"), the context of the surrounding text is used to determine the paragraph formatting. This is crude, but operates correctly 95% of the time.</P>

<P>The layout of any existing text allows the formatter to work out where things should go.</P></DIR>

<H3><P>2.1.1 The Fill Column</P></H3>

<P>There is a fill column on the right which determines how long the paragraph is. I'm using a short one so this does not get wrapped by the mailer, the typical value is 78.</P>

<DIR><P>$fill-col ..................... "65"</P></DIR>

<P>Documents may use predefined fill columns by adding a magic header to the top of the file. i.e. for a plain text document:-</P>

<DIR><P>-!- text; fill-column: 65 -!-</P></DIR>

<P>For a document (i.e. with headings and hilighting), then the following header is used:-</P>

<DIR><P>-!- document; fill-column: 65 -!-</P></DIR>

<P>Note that the $fill-column within the documentation buffers is private to that buffer. Modifying the fill column affects the current buffer only.</P>

<H3><P>2.2.2 The Fill Mode</P></H3>

<P>The fill mode determines how paragraphs are filled. These are detailed in the on-line documentation under $fill-mode. The most commonly used settings are:-</P>

<DIR><P>Justify left and right (both or full justification). This gives neat line endings on both the left-hand and right-hand sides of the text.</P>

<DIR><P>$fill-mode .................... "B"</P></DIR>

<P>Justify left, produces a neat left-hand edge and ragged right-hand edge.</P>

<DIR><P>$fill-mode .................... "L"</P></DIR>

<P>Justify none, Turns off all justification, lines are not wrapped, what you type is what you get.</P>

<DIR><P>$fill-mode .................... "n"</P></DIR>

<P>Documents may use predefined fill mode by adding a magic header to the top of the file. i.e. for a plain text document:-</P>

<DIR><P>-!- text; fill-mode: left -!-</P></DIR>

<P>For a document (i.e. with headings and hilighting), then the following header is used:-</P>

<DIR><P>-!- document; fill-mode: left -!-</P></DIR>

<P>The recognized keywords are:-</P>

<DIR><PRE>full   - Justified left and right margins.
both   - Justified left and right margins.
left   - Justified left only
right  - Justified right only
center - Justified center text
none   - Disable all justification</PRE></DIR>

<P>All modes, with the exception of none, are assumed to be automatic in that they recognize pre-formatted left (column 0), right and centered text.</P>

<P>Where both the fill column and fill mode required then they may be specified as:-</P>

<DIR><P>-!- document; fill-column: 65; fill-mode: full -!-</P></DIR>

<P>Note that the $fill-mode within the documentation buffers is private to that buffer. Modifying the fill mode affects the current buffer only.</P></DIR>

<H3><P>2.2 Left Text (Work off the margin or column 0)</P></H3>

<DIR><P>The margin is magic, anything on column 0 is assumed to be hard left justified text i.e.</P></DIR>

<PRE>This should not
format because it is
hard left</PRE>

<DIR><P>Most text in the document should be off the margin (or gutter). Text on the gutter should be restricted to titles for it to work correctly. Gutter text only remains untouched in the $fill-mode automatic modes (L/R/C/B).</P>

<P>Text may be moved to the gutter using "C-c C-g" to reformat the paragraph.</P></DIR>

<H3><P>2.2.1 On a re-format</P></H3>

<DIR><P>Left justified text is assumed to exist at column zero and does not extend beyond 50% of the fill column.</P></DIR>

<H3><P>2.3 Right Text (Work to right margin or $fill-col)</P></H3>

<DIR><P>Right text is not as you normally expected because the cursor is on the left. Enter the text on the left margin and then format it to the right i.e.</P></DIR>

<PRE>My Address
My Street
My County
My Country
My Zip code</PRE>

<DIR><P>Perform a right paragraph operation on the text i.e. "C-c C-r" and it appears on the right at the $fill-col position i.e.</P>

<DIR><P>My Address My Street My County My Country My Zip code</P></DIR></DIR>

<H3><P>2.3.1 On a re-format</P></H3>

<DIR><P>With right text, when you format it lines extending from 50% of the fill column to the end of the line are considered to be right justified.</P></DIR>

<H3><P>2.4 Center Text</P></H3>

<DIR><P>Center is similar to the above, but a bit more manageable, again enter in on the left and then use "C-c C-c" to center justify. Lines are preserved.</P>

<DIR><P>This is in the center This is a bit more</P></DIR></DIR>

<H3><P>2.3.1 On a re-format</P></H3>

<DIR><P>If the number of spaces either side of the margins is the same (+/-1) then the text is assumed to be center justified. This sometimes causes problems when you require justified lines and centering is assumed; in this instance simply delete the end of the line and re-format.</P></DIR>

<H3><P>2.5 Justified Text</P></H3>

<DIR><P>Any other text that does not fit the aforementioned criteria is assumed to be justified to the current setting of $fill-col.</P>

<DIR><P>Indentation commences from the first column where a text character appears so this line will wrap in line with the first.</P>

<DIR><P>Indent again and the same thing happens, this bit of text (when I write enough) will keep in line.</P></DIR></DIR></DIR>

<H3><P>2.6 Literal Text</P></H3>

<DIR><P>Often you want to put text in the document that is not subject to justification. This is controlled by the "$fill-ignore" variable (use "M-x list-variables" to see them all).</P>

<P>The default is:-</P>

<DIR><P>$fill-ignore .................. "&gt;_@"</P></DIR>

<P>Any paragraph that commences with the above characters is not filled so:-</P>

<PRE>&gt; This is a paragraph
&gt; that is not subject to re-formatting
&gt;      spaces
&gt;          are
&gt;            retained.</PRE>

<PRE>This is another
   note that only the first character
of the
   paragraph
      is marked
when you re-format
                   this should be still as you left it.</PRE>

<PRE>And
  another - I think this is enough !!</PRE></DIR>

<H3><P>2.7 Bullets</P></H3>

<DIR><P>Bullets are useful for lists and alike. As with the absolute text there are a few of characters which are recognized as bullet characters. These are defined with:-</P>

<PRE>@    $fill-bullet .................. "*)].-"
     $fill-bullet-len .............. "15"</PRE>

<P>The "$fill-bullet" characters are obviously the characters recognized as bullets. "$fill-bullet-len" is the number of characters into the paragraph to look for bullets. Examples include:-</P>

<P><UL><LI>Simple bullet</LI></P>

<P><LI>Note that there is a paragraph space between them, also note that bullets should be aligned to the left and right. You get prompted to do this when you re-format. If you re-format again you will not be prompted because it works out that the first 2 lines of the paragraph text are in alignment.</LI></UL></P>

<P><OL TYPE="a"><LI>Can have letters, the ")" is the bullet character, again we should be aligned.</LI></OL></P>

<P><OL><LI>Can have digits, the "]" is the bullet character, again we should be aligned.</LI></OL></P>

<P>Note - This time the bullet character is '-', again we wrap and square up after the bullet.</P>

<DIR><P>This one sometime gives me problems when I forget it's a bullet so I tend to use a 'soft' character when I do not want the indent i.e.</P>

<P>Note: This is what I call a soft bullet, ME does not recognize this one so it wraps OK.</P></DIR>

<P><OL TYPE="i"><LI>Maybe a few Roman numerals, it's nice to see these from time to time. The bullet here is '.'.</LI></OL></P></DIR>

<H3><P>2.8 Editing the Document</P></H3>

<DIR><P>So now you have a text document and you start to edit it and make changes or run the speller over it. The columns go out of alignment.</P>

<P>If you have obeyed all of the above then you should be able to fill all of the paragraphs and get them looking nice again. you can do this by:-</P>

<DIR><P>Menu -&gt; Format -&gt; Fill all Paragraphs</P></DIR>

<P>Or if you do not like the menu goto the top line and perform a</P>

<DIR><P>Esc 10000 M-x fill-paragraph</P></DIR>

<P>then all paragraphs are reformatted.</P></DIR>

<H3><P>2.8.1 What is IQ Fill paragraph ??</P></H3>

<P>IQ Fill paragraph as shown in the menus, or the "ifill-paragraph" command is a macro alternative to the built in "fill-paragraph". This deals with bullets that are adjacent (i.e. no intervening blank lines). This makes for better presentation but you have to be a little careful that you always use "ifill-paragraph" for formatting. i.e.</P>

<DIR><UL><LI><PRE>ifill-paragraph  can cope with bullets that
  are tightly packed.</LI>
<LI>ifill-paragraph  can cope with bullets that
  are tightly packed.</LI></UL></PRE></DIR>

<P>This document has not been authored using "ifill-paragraph" and is escaped the above.</P>

<H3><P>2.9 Whats the advantage of the above</P></H3>

<DIR><P>The advantage of doing everything above is primarily to get a reasonable looking document for the minimum amount of work on behalf of the author.</P>

<P>Maybe I'm not familiar enough with Word Processors, but I can do a document in double time like this because I do not get distracted with my styles blowing up, fontifying things and everything else going wrong. You tend to concentrate on the text and not all the pretty bits that are not really important until you have actually created the appropriate words for your masterpiece.</P></DIR>

<H2><P>3 Going Back To The Word Processor</P></H2>

<DIR><P>With a finished masterpiece of literature, in plain text then it is often desirable to move the text into the presentation engine i.e. the Word Processor.</P>

<P>Word processors tend to put paragraphs on one line. Cutting and pasting the document as it stands does not make for good WP text unless the paste target is a fixed font destination (i.e. Netscape for mail - not sure about Microsoft Outlook that probably wants pretty fonts everywhere !!)</P>

<P>So to prepare, the following operations should be performed.</P>

<P><OL TYPE="a"><LI>Reformat your document for single line paragraphs. Do this like:-</P>

<DIR><P>Menu -&gt; Format -&gt; All Paragraphs to Lines</P></DIR>

<P>or on the command line.</P>

<DIR><PRE>top of buffer
Esc 100000 M-x paragraph-to-line</PRE></DIR>

<P>The paragraph-to-line operation reduces the paragraphs to a single line, removing any leading spaces. These lines may be copied into the word processor, resulting in paragraphs.</LI></P>

<P><LI>Format away ....</P>

<P>You now have a bit of work to do re-formatting you new document text in your word processor. This can be a bit tedious but it's simply adding emboldening and italicizing here and there with a few tables and pictures thrown in for good measure. You know the text is good so this makes for a relaxing brain dead afternoon !!</LI></OL></P></DIR>

<H2><P>4 Extensions</P></H2>

<DIR><P>There are a number of extensions on the standard theme outlined above.</P></DIR>

<H3><P>4.1 Documents</P></H3>

<DIR><P>The document mode "-!- document -!-" are text files with hilighting applied. These documents are tagged as follows:-</P>

<PRE>&gt; -!- document -!-
&gt; Author:   Jon Green
&gt; Created:  Wed Feb 2 20:23:35 2000
&gt; Modified: &lt;20000202.2100&gt;</PRE></DIR>

<H3><P>4.1.1 Hilighting Token Summary</P></H3>

<P>The hilighting is kept to a reasonable minimum, including the following:-</P>

<P>Start/End markers</P>

<DIR><PRE>"<B>..</B>"  <B>Any Text Surrounded By Asterisks</B>
"<I>..</I>"  <I>Any Text Surrounded By Twiddles</I>
"<U>..</U>"  <U>Any Text Surrounded By UnderScores</U>
"<B><I>..</I></B>"  <B><I>single acute/grave pair</I></B></PRE></DIR>

<P>Literal Text Regions</P>

<DIR><PRE>&gt; This is a literal text region
&gt; Hilighting to end of line only.</PRE>

<PRE>This is a literal
region. It hilights
to the next blank line.</PRE>

<PRE>First Line. This is also
a literal region, no hilighting
on this one after the first line.</PRE></DIR>

<P>Strings and quoted characters</P>

<DIR><P>"string" and quoted 'q' '\0'</P></DIR>

<P>Headings, lines that are classed as <B><I>heading</I></B> lines commence with the following text sequences:-</P>

<DIR><PRE>&gt; 4.0 Section Header
&gt; 4.1.1 Sub-Section header
&gt; Appendix A
&gt; Appendix A.1</PRE></DIR>

<P>Bullets of the * or ) variety</P>

<DIR><P><UL><LI>Bullet</LI></UL></P>

<P><OL><LI>Bullet</LI></OL></P></DIR>

<P>Note that any bullet-ed sections with numbers should be defined as:-</P>

<DIR><PRE>&gt; 1) bullet 1
&gt; 2) bullet 2</PRE></DIR>

<P>rather than</P>

<DIR><PRE>&gt; 1. bullet 1
&gt; 2. bullet 2</PRE></DIR>

<P>otherwise the incorrect hilighting will be applied.</P>

<H3><P>4.2 Code Inserts</P></H3>

<DIR><P>As of the beginning of Q2 2000, then the original document modes of <B><I>sectioned</I></B> and <B><I>pseudo-code</I></B> have been removed. These methods have been replaced by the ability to insert literal fragments of other coding or documentation schemes into the text and signal a change in hilighting.</P>

<P>Hooks for the code inserts are only supported as standard in the "-!- document -!-" mode, details on performing this type of operation is provided in the next section.</P>

<P>The new scheme is introduced with a "&gt;scheme&gt;" marker on the left margin (gutter), where <B><I>scheme</I></B> is the name of the scheme that you want to include i.e. the standard set includes:-</P>

<DIR><PRE>"&gt;bnf&gt;" ............... Backus-Naur Form
"&gt;c&gt;" ................. ANSI 'C'
"&gt;cpp&gt;", "&gt;c++&gt;" ...... C++
"&gt;emf&gt;" ............... MicroEmacs macro format
"&gt;pseudo&gt;" ............ Pseudo code</PRE></DIR>

<P>The code statement is terminated with a "&gt;doc&gt;" statement which returns the hilighting mode to document mode. Note that the "&gt;" character has been selected as the token leader. Provided that the insert block includes no blank lines then the block is treated as a literal text block and formatting the paragraph does not affect the code block. Here are some examples:-</P></DIR>

<H3><P>4.2.1 Pseudo Code Example</P></H3>

<P>Include a pseudo code block:-</P>

<PRE>// A days work
FUNCTION a days work
BEGIN
    // A comment for my pseudo code.
    WHILE (NOT bored)
    DO
        IF (this condition is true)
        THEN
            do something
        ELSE
            do something else
        ENDIF
    DONE
    RETURN home
END</PRE>

<P>The leading '&gt;' protects the text from formatting. Be careful not to leave blank lines in your pseudo code because this is a new paragraph, these are typically plugged with comments.</P>

<H3><P>4.2.2 C Code Example</P></H3>

<P>The classic Hello World program</P>

<PRE>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
/* Entry point */
int
main (int argc, char *argv[])
{
    printf ("Hello World\n");
    return 0;
}</PRE>

<H3><P>4.2.3 Backus-Naur Form</P></H3>

<P>This one is included as standard as it is typically included in technical documentation. Follows is an example of BNF for the Pascal programming language decimal notation:-</P>

<PRE>!! Pascal decimal notation.
&lt;digit sequence&gt; ::= &lt;digit&gt; { &lt;digit&gt; }
&lt;unsigned integer&gt; ::= &lt;digit sequence&gt;
&lt;unsigned real&gt; ::=
    &lt;unsigned integer&gt;.&lt;digit sequence&gt; |
    &lt;unsigned integer&gt;.&lt;digit sequence&gt;E&lt;scale factor&gt; |
    &lt;unsigned integer&gt; E &lt;scale factor&gt;
&lt;unsigned number&gt; ::=
    &lt;unsigned integer&gt; | &lt;unsigned real&gt;
&lt;scale factor&gt; ::=
    &lt;unsigned integer&gt; | &lt;sign&gt;&lt;unsigned integer&gt;
&lt;sign&gt; ::= + | -</PRE>

<H3><P>4.3 Extending the Code Inserts</P></H3>

<DIR><P>The number code insert types that may be supported may be increased by defining other code types within the local users extension file "mydoc.emf". i.e. to add the HTML to the supported set then the following would be defined.</P></DIR>

<PRE>; Allow HTML Code inserts
; Force the ".html" scheme to be loaded into the context of
; the document scheme. We delimit the .html scheme with a
; pair of markers "&gt;html&gt;" and "&gt;doc&gt;"
;
; Force the hilighting mode to load if not already loaded.
!if &amp;seq .hilight.html "ERROR"
    !force execute-file "hkhtml"
!endif
; If the hilighting mode is loaded then modify it.
!if &amp;not &amp;seq .hilight.html "ERROR"
    hilight .hilight.doc 0xc0 "^&gt;html&gt;" "&gt;html&gt;" .hilight.html .scheme.hide
    hilight .hilight.html 0xc0 "^&gt;doc&gt;" "&gt;doc&gt;" .hilight.doc .scheme.hide
!endif</PRE>

<DIR><P>The macro fragment is simply executed when the first document is loaded. There is no need to include any additional code in the hook commands. The operation of the code is defined as follows:-</P>

<PRE>!if &amp;seq .hilight.html "ERROR"
    !force execute-file "hkhtml"
!endif</PRE>

<P>The first set of commands make sure that the target hilighting scheme is loaded, if they are not then an explicit load is forced.</P>

<P>!if &amp;not &amp;seq .hilight.html "ERROR"</P>

<P>Check that the hilighting scheme is loaded, if it is not then the scheme modifications are not applied.</P>

<P>hilight .hilight.doc 0xc0 "^&gt;html&gt;" "&gt;html&gt;" .hilight.html .scheme.hide</P>

<P>Declare a hilighting token in the documentation scheme to jump to the HTML hilighting scheme. The token that we use is "&gt;html&gt;" which must appear at the start of the line, hence is defined "^&gt;html&gt;". The second "&gt;html&gt;" string defines what appears on the screen. This may be modified if the screen appearance is different from the tag that appears in the text. <B><I>.hilight.html</I></B> is the scheme identifier of the target scheme to which a branch is being taken. <B><I>.scheme.hide</I></B> is the color in which the tag is rendered, the hidden scheme is selected here to reduce the prominence of the tag (it is still visible).</P>

<P>hilight .hilight.html 0xc0 "^&gt;doc&gt;" "&gt;doc&gt;" .hilight.doc .scheme.hide</P>

<P>The next statement defines the hilighting token that returns the hilighting back to the documentation hilight. This is the same as the previous statement except that the hilight token is placed in the target hilighting scheme to return the hilight to the documentation mode. Typically "&gt;doc&gt;" may be used unless it conflicts with an existing hilighting token in the target scheme.</P></DIR>

<H3><P>4.3.1 Important Note on Code Inserts</P></H3>

<DIR><P>In order for the code inserts to operate correctly then the hilighting schemes must enable look back. This is defined when the scheme is initialized, with a statement like:-</P>

<P>0 hilight  .hilight.doc 2 50  $global-scheme</P>

<P>Typically a look back value of 50 lines is specified, this restricts the insert blocks to 50 lines of text. These values may be extended if they are insufficient, by may reduce the rendering speed.</P></DIR>

<H3><P>4.4 Folding</P></H3>

<DIR><P>The folding feature of ME using narrowing allows an overview of the document to be created. Folding is supported as standard in the "-!- document -!-" template where the folds are performed on the section numbers. The function keys "F2" and "F3", by default, control the folding. In addition <I>S-Left-Mouse</I> folds a single section.</P>

<P>The whole document may be folded with "f3" the resultant output of this document looks exactly like this:</P>

<PRE>&gt; &gt; -!- document; fill-column: 65; fill-mode: full -!-
&gt; &gt; Author:   Jon Green
&gt; &gt; Created:  Wed Feb 2 20:23:35 2000
&gt; &gt; Modified: &lt;20000322.2157&gt;
&gt;
&gt; 1.0 Overview of the Documentation Modes
&gt;     1.1 Background
&gt;     1.2 Cursor Position
&gt;     1.3 Quick Summary
&gt;     1.4 Types of document modes
&gt;     1.4.1 Text
&gt;     1.4.2 Document
&gt; 2.0 Working In The Text Modes
&gt;     2.1 Whats a paragraph ??
&gt;         2.1.1 The Fill Column
&gt;         2.2.2 The Fill Mode
&gt;     2.2 Left Text (Work off the margin or column 0)
&gt;         2.2.1 On a re-format
&gt;     2.3 Right Text (Work to right margin or $fill-col)
&gt;         2.3.1 On a re-format
&gt;     2.4 Center Text
&gt;         2.3.1 On a re-format
&gt;     2.5 Justified Text
&gt;     2.6 Literal Text
&gt;     2.7 Bullets
&gt;     2.8 Editing the Document
&gt;         2.8.1 What is IQ Fill paragraph ??
&gt;     2.9 Whats the advantage of the above
&gt; 3.0 Going Back To The Word Processor
&gt; 4.0 Extensions
&gt;     4.1 Documents
&gt;     4.2 Code Inserts
&gt;         4.2.1 Pseudo Code Example
&gt;         4.2.2 C Code Example
&gt;         4.2.3 Backus-Naur Form
&gt;     4.3 Extending the Code Inserts
&gt;         4.3.1 Important Note on Code Inserts
&gt;     4.4 Folding
&gt;         4.3.2 Hilighting
&gt;         4.3.3 Section Renumbering
&gt;     4.5 Other Tools
&gt; 5.0 Did you get this far ??
&gt; 6.0 End</PRE>

<P>This makes it easy to edit. Note that a dummy last section is added to make everything fold nicely. Single sections may be unfolded with "f2".</P>

<P>With folding enabled then one has to be a little bit careful not to edit over a folded section.</P></DIR>

<H3><P>4.4.1 Redefining the Folding</P></H3>

<P>The definition of the folds may be redefined by the user by extending the macro template through "mydoc.emf". As an example of folding about section numbers (i.e. "1.2.3 title") then the following extension is sufficient:-</P>

<PRE>; my-fhook-doc; Extend the document bindings
0 define-macro my-fhook-doc
    ; setup doc buffer folding support used in section
    ; and pseudo code modes.
    buffer-bind-unbound-key fold-current "f2"
    buffer-bind-unbound-key fold-all     "f3"
!emacro
; Define the folding definitions.
set-variable .fhook-doc.fold-open  "^ <B>[0-9]\\(\\.[0-9.]\\)</B>\\.? +\\w"
set-variable .fhook-doc.fold-close "^ <B>[0-9]\\(\\.[0-9.]\\)</B>\\.? +\\w"
set-variable .fhook-doc.fold-mopen "1"
set-variable .fhook-doc.fold-mnext "-1"
;
ml-write "[My document file extensions loaded]"</PRE>

<P>Note that these extensions are not necessary for the current "-!- document -!-" hook as they are already defined.</P>

<H3><P>4.5 Extending the Hilighting</P></H3>

<P>The "mydoc.emf" may be used to extend the hilighting. These are usually tailored to the kind of text that is worked with. For example <I>word</I> may be added as a bold token, and %word% as italic. This could be added to "mydoc.emf" as follows:-</P>

<PRE>hilight .hilight.doc 0 "<I>[A-Za-z_]+</I>" .scheme.bold
hilight .hilight.doc 0 "%[A-Za-z_]+%" .scheme.italic</PRE>

<H3><P>4.6 Section Renumbering</P></H3>

<P>A number of macro solutions have been posted to the mail reflector on this subject. I suggest that you look over these.</P>

<H3><P>4.5 Other Tools</P></H3>

<DIR><P>Other tools used with the documentation include:-</P>

<P><UL><LI>spell-buffer (Command line or menu)</P>

<DIR><P>Spell checker.</LI></P></DIR>

<P><LI>clean (command line or menu)</P>

<DIR><P>Removes all of the trailing spaces.</LI></P></DIR>

<P><LI>count-words</P>

<DIR><P>Counts all the words.</LI></P></DIR>

<P><LI>print-buffer</P>

<DIR><P>From the print dialog, an HTML rendering of the page may be printed to a buffer. This inserts the appropriate HTML hilighting into the page, retaining the layout.</LI></UL></P></DIR></DIR>

<H2><P>5 Did you get this far ??</P></H2>

<DIR><P>If you got this far well done !!</P>

<P>Exercise.</P>

<DIR><P>Cut and paste this into a document and have a go !! You should be able to reformat the whole document and nothing will change.</P></DIR></DIR>

<H2><P>6 End</P></H2>

</BODY>
</HTML>
