; -!- emf -!-
;
; Copyright (C) 1998-2023 JASSPA (www.jasspa.com)
;
; This is part of JASSPA's MicroEmacs, see the LICENSE file for licensing and
; copying information.
;
; Synopsis:    Miscellaneous macros
; Authors:     Steven Phillips & Jon Green
;
!if &not &exi %alarm-numb
!endif
; save-all - saves any changes to any buffer, registry or dictionary
define-macro save-all
  @# save-some-buffers @mna
  &bor 2 @# save-registry @mna
  &bor 2 @# save-dictionary @mna
  !if @?
  !elif &not &seq "tfs://" &lef $user-path 6
    set-variable #l0 @mc5 "Save session (?/y/n) ? " "nNyY" "(Y)es, (N)o, (C-g)Abort ? "
    !iif &iseq #l0 "y"  0 save-session
  !endif
  ml-write "[Save all complete]"
!emacro
; Emacs open-line implementation
define-macro open-line
  @# insert-newline
  @# backward-char
!emacro
define-macro set-title
  !force set-variable $frame-title @1
  !iif &not $status  set-variable $frame-title @ml20 "Frame title" &con &seq $frame-title "ERROR" "" $frame-title
!emacro
; Note: bit 8 of @# is used internal to indicate a region insert
define-macro encase
  !if &band @# 2
    set-variable #l0 2
  !else
    0 show-region
    set-variable #l0 &con &equ &band &set #l1 $result 5 5 8 0
  !endif
  !if &not &exi .n
    set-variable @# &bor &bor &band @# 1 4 #l0
  !elif &les @# 2
    set-variable @# &bor &con @? &band @# 1 .n #l0
    !iif &les @# 2  set-variable @# &bor @# 4
  !endif
  !if &band @# 4
    set-variable .s @ml10 "Starting text" &con &exi .s .s ""
    set-variable .e @ml10 "Ending text" &con &exi .e .e ""
    set-variable .n &band @# 1
  !endif
  !iif &not &band @# 10  !return
  !iif &not &or &band @# 2 &band #l1 2  3 show-region
  set-alpha-mark "\x86"
  set-variable #l0 $window-line
  set-variable #l1 $window-col
  !if &band @# 2
    exchange-point-and-mark
    set-alpha-mark "\x85"
  !else
    -2 show-region
    set-alpha-mark "\x85"
  !endif
  !if &not &band @# 1
    set-variable #l3 0
  !elif &gre #l0 $window-line
    set-variable #l3 0
  !elif &les #l0 $window-line
    set-variable #l3 1
  !else
    set-variable #l3 &les #l1 $window-col
  !endif
  !iif &band @# 2  exchange-point-and-mark
  goto-alpha-mark &cond #l3 "\x86" "\x85"
  insert-string .s
  goto-alpha-mark &cond #l3 "\x85" "\x86"
  insert-string .e
!emacro

define-macro get-next-indent-change
  !if &not $buffer-indent
    ml-write "[ERROR: buffer does not have an indent scheme]"
    !abort
  !endif
  !if &seq @wc ""
    beginning-of-buffer
  !else
    forward-line
  !endif
  set-variable #l2 &con &band @# 1 "" " "
  !while &not &seq @wc ""
    !if &not &seq #l2 &trr &set #l1 @wl
      beginning-of-line
      tab @mna
      !if &not &seq #l1 @wl
        ml-write &spr "[Indent changed on line %d]" $window-line
        !return
      !endif
    !endif
    forward-line
  !done
!emacro

define-macro check-line-length
  !repeat
    end-of-line
    !if &gre $window-acol $buffer-fill-col
      ml-write "[line too long]"
      !abort
    !endif
    !force forward-line
  !until &not $status
!emacro

define-macro number-items
  set-variable #l1 @ml "Number offset"
  set-variable #l2 @ml "Chars per Number"
  set-variable #l3 @ml "Number of lines"
  set-variable #l4 &spr "%%%s%dd" &con @# "" "0" #l2
  !while &gre &pdec #l3 1 0
    set-variable #l5 $window-col
    insert-string &spr #l4 &pinc #l1 1
    set-variable #l5 &sub $window-col #l5
    set-variable #l6 #l5
    !while &pdec #l5 1
      !iif &seq @wc "\n"  !break
      forward-delete-char
    !done
    #l6 backward-char
    forward-line
  !done
!emacro

define-macro time
  !force set-variable #l2 @1
  !iif &not $status  set-variable #l2 @ml00 "Time command"
  set-variable #l0 $time
  !force execute-line #l2
  set-variable #l1 $time
  set-variable #l2 &add &mid #l0 16 2 &mul 60 &add &mid #l0 14 2 &mul 60 &mid #l0 12 2
  set-variable #l3 &add &mid #l1 16 2 &mul 60 &add &mid #l1 14 2 &mul 60 &mid #l1 12 2
  !if &les &set #l4 &sub &rig #l1 18 &rig #l0 18 0
    set-variable #l2 &add #l2 1
    set-variable #l4 &add 1000 #l4
  !endif
  set-variable .msec &add &mul &sub #l3 #l2 1000 #l4
  ml-write &spr "Command took %d.%03d sec" &sub #l3 #l2 #l4
!emacro

; The default compare-windows ignores white space. The -exact extension checks
; white space as well.
define-macro compare-windows-exact
  0 compare-windows
!emacro

; toggles the displaying of white characters
define-macro display-whitespaces
  set-variable $system &bxor $system 0x80000
  screen-update
!emacro

; Steve Philips - mailed to Jasspa group on 28th Sept 2004.
; Writes a region to a file. If invoked from another macro then a string
; paramter specifies the name of the file to write, if the name is not
; specified then the user is prompted for the name.
define-macro write-region
  copy-region
  set-variable #l0 $buffer-fname
  set-position "\x88"
  !force delete-buffer "*write-region-tmp*"
  find-buffer "*write-region-tmp*"
  yank
  set-variable $buffer-fname #l0
  !force set-variable #l1 @1
  !if $status
    !force !force @# write-buffer #l1 @mna
  !else
    !force !force @# write-buffer @mna
  !endif
  !if &not $status
    !force delete-buffer $buffer-bname
    goto-position "\x88"
    !abort
  !endif
  delete-buffer $buffer-bname
  goto-position "\x88"
!emacro

define-macro execute-region
  set-alpha-mark "a"
  3 narrow-buffer
  !force !force !force execute-buffer $buffer-bname
  !iif &set #l0 &not $status  set-alpha-mark "a"
  end-of-buffer
  2 narrow-buffer
  goto-alpha-mark "a"
  !if #l0
    ml-write &spr "[Error executing region in %s, line %d]" $buffer-bname $window-line
    !abort
  !endif
!emacro
