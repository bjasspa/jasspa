; -!- emf -!-
; This is part of the JASSPA MicroEmacs macro files
; Copyright (C) 1997-2016 JASSPA (www.jasspa.com)
; See the file me.emf for copying and conditions.
;
; Synopsis:    Binary mode tools
; Authors:     Steven Phillips
;
define-macro bin-txt-to-hex
  !force set-variable #l1 @1
  !iif &not $status  set-variable #l1 @ml "String"
  !iif &gre &len #l1 510  -8 ml-write "[ERROR: Invalid string given, too long to convert]"
  set-variable #l4 ""
  set-variable #l2 0
  !while &not &seq "" &set #l3 &mid #l1 &pinc #l2 1 1
    set-variable #l4 &spr "%s%02x" #l4 &atoi #l3
  !done
  set-variable $result &sup #l4
!emacro

define-macro bin-hex-to-txt
  !force set-variable #l1 @1
  !iif &not $status  set-variable #l1 @ml "Hex string"
  !iif &not &xse #l1 "\\h+"  -8 ml-write "[ERROR: Invalid hex string given, non-hex chars found]"
  !iif &band &len #l1 1  -8 ml-write "[ERROR: Invalid hex string given, half byte given]"
  set-variable #l4 ""
  set-variable #l2 0
  !while &not &seq "" &set #l3 &mid #l1 &pinc #l2 2 2
    !iif &not &seq #l3 "00"  set-variable #l4 &cat #l4 &itoa &cat "0x" #l3
  !done
  set-variable $result #l4
!emacro

0 define-macro ibin-hex-to-dis-txt
  set-variable #l1 @1
  set-variable #l4 ""
  set-variable #l2 0
  0 set-char-mask "d"
  set-variable #l5 $result
  !while &not &seq "" &set #l3 &mid #l1 &pinc #l2 2 2
    !if &seq &set #l3 &itoa &cat "0x" #l3 ""
      set-variable #l4 &cat #l4 "."
    !elif &sin #l3 #l5
      set-variable #l4 &cat #l4 #l3
    !else
      set-variable #l4 &cat #l4 "."
    !endif
  !done
  set-variable $result #l4
!emacro

0 define-macro bin-get-line-info 
  !if &seq &trb @wl ""
    !if &not @?
      set-variable #p9 "||||"
    !elif @#
      !abort
    !else
      set-variable #p9 "|||0|"
    !endif
    !return
  !elif &not &xseq @wl "\\([\\h?]+\\):\\(\\( +\\h\\h\\)+ +\\)|  \\(.*\\)"
    !abort
  !endif
  set-variable #l1 @s1
  set-variable #l2 @s2
  set-variable #l3 @s4
  set-variable #l9 &rep #l2 " " ""
  set-variable #l8 &spr "|%s%n|%s|" &lef #l1 8 &sub 8 &len #l1 "?" #l9
  !if &not @?
    set-variable #p9 &cat #l8 "|"
  !elif &not @#
    set-variable #p9 &cat #l8 "0|"
  !elif &les @# &set #l4 &add 1 &len #l1
    !abort
  !elif &les @# &set #l5 &add #l4 &len #l2
    set-variable #l5 &len &rep &lef #l2 &sub @# #l4 " " ""
    !iif &band #l5 1  !abort
    set-variable #p9 &cat #l8 &cat &div #l5 2 "|"
  !elif &les @# &set #l5 &add #l5 3
    !abort
  !else
    set-variable #l4 &sub @# #l5
    !iif &gre &mul #l4 2 &len #l9  !abort
    set-variable #p9 &cat #l8 &cat #l4 "|"
  !endif
!emacro

0 define-macro bin-set-line
  set-variable #l1 @1
  set-variable #l2 @2
  ibin-hex-to-dis-txt #l2
  set-variable #l3 $result
  set-variable #l2 &xrep #l2 "\\(..\\)" "\\1 "
  set-variable @wl &spr "%s?: %s%n |  %s" &lef #l1 7 #l2 &sub 48 &len #l2 " " #l3
!emacro

define-macro bin-move-backward
  !if &bmo "binary"
    !force &set #l1 $window-col bin-get-line-info
    !iif &not $status  -8 ml-write "[ERROR: Bad cursor position or badly formatted line]"
  !elif &not &bmo "rbin"
    ml-write "[ERROR: Not a binary or rbin buffer]"
    !abort
  !elif &band $window-col 1
    ml-write "[ERROR: Bad cursor position, currently in the middle of a character]"
    !abort
  !endif
  !force set-variable #l5 @1
  !iif &not $status  set-variable #l5 @ml "Move backward by"
  calc #l5
  set-variable #l5 .calc.answer
  !if &bmo "binary"
    set-variable #l5 &sub #l5 &lget #l9 3
    &div &add #l5 15 16 backward-line
    set-variable #l5 &sub 15 &mod &add #l5 15 16
    !if &gre #l1 58
      set-variable $window-col &add 62 #l5
    !else
      set-variable $window-col &add 10 &mul #l5 3
    !endif
  !else
    set-variable #l1 $window-line
    &mul #l5 2 backward-char
    set-variable #l2 $window-line
    &sub #l1 $window-line backward-char
    &sub #l2 $window-line backward-char
  !endif
!emacro       

define-macro bin-move-forward
  !if &bmo "binary"
    !force &set #l1 $window-col bin-get-line-info
    !iif &not $status  -8 ml-write "[ERROR: Bad cursor position or badly formatted line]"
  !elif &not &bmo "rbin"
    ml-write "[ERROR: Not a binary or rbin mode buffer]"
    !abort
  !elif &band $window-col 1
    ml-write "[ERROR: Bad cursor position, currently in the middle of a character]"
    !abort
  !endif
  !force set-variable #l5 @1
  !iif &not $status  set-variable #l5 @ml "Move forward by"
  calc #l5
  set-variable #l5 .calc.answer
  !if &bmo "binary"
    set-variable #l5 &add #l5 &lget #l9 3
    &div #l5 16 forward-line
    set-variable #l5 &mod #l5 16
    !if &gre #l1 58
      set-variable $window-col &add 62 #l5
    !else
      set-variable $window-col &add 10 &mul #l5 3
    !endif
  !else
    set-variable #l1 $window-line
    &mul #l5 2 forward-char
    set-variable #l2 $window-line
    &sub $window-line #l1 forward-char
    &sub $window-line #l2 forward-char
  !endif
!emacro       

define-macro bin-yank-to-hex
  set-position "\x82"
  set-variable #l1 &cat &con &gmo "cr" "0D" "" &con &gmo "lf" "0A" ""
  !force 0 delete-buffer "*bin-tmp*"
  find-buffer "*bin-tmp*"
  yank
  !if @#
    beginning-of-buffer
    replace-string "^[\\h?]\\{8\\}: *" ""
    beginning-of-buffer
    replace-string "|.*$" ""
    beginning-of-buffer
    replace-string " " ""
    end-of-buffer
    backward-char
  !else
    !iif &not $window-col  insert-newline
    insert-newline
    beginning-of-buffer
    !while &gre $window-eline &add $window-line 1
      !if &seq @wc "\n"
        insert-string #l1
      !else
        insert-string &spr "%02X" &ato @wc
      !endif
      forward-delete-char
      !iif &gre $window-col 511  insert-newline
    !done
    backward-char
    end-of-line
    ; ignore last 0x0a
    &len #l1 backward-char
  !endif
  set-mark
  beginning-of-buffer
  copy-region
  !force 0 delete-buffer "*bin-tmp*"
  goto-position "\x82"
!emacro
define-macro bin-hex-yank-rbin-insert
  set-variable #l0 $window-line
  yank
  set-alpha-mark "\x81"
  set-variable #l1 $window-line
  set-variable $window-line #l0
  !repeat
    end-of-line
    !if &gre $window-col 512
      set-variable $window-col 512
      insert-newline
      set-variable #l1 &con &gre $window-line #l1 0 &add #l1 1
    !elif &les $window-col 512
      forward-delete-char
      set-variable #l1 &sub #l1 1
    !else
      forward-line
    !endif
  !until &gre $window-line #l1
  goto-alpha-mark "\x81"
!emacro
define-macro bin-hex-yank-bin-insert
  !force $window-col bin-get-line-info
  !if &not $status
    ml-write "[ERROR: Bad cursor position or badly formatted line]"
    !abort
  !elif &equ &mul &lget #l9 3 2 &len &lget #l9 2
    forward-line
    beginning-of-line
    set-variable #l9 "||0|"
  !endif
  set-position "\x82"
  !force 0 delete-buffer "*bin-tmp*"
  find-buffer "*bin-tmp*"
  yank
  exchange-point-and-mark
  !if &lget #l9 3
    insert-string &lef &lget #l9 2 &mul 2 &lget #l9 3
    end-of-buffer
    backward-char
    insert-string &rig &lget #l9 2 &mul 2 &lget #l9 3
    beginning-of-buffer
    set-variable #l0 &lget #l9 1
  !else
    set-variable #l0 "????????"
  !endif
  !while &not &seq @wc "" 
    end-of-line
    !if &band $window-col 1
      !force 0 delete-buffer "*bin-tmp*"
      goto-position "\x82"
      ml-write "[ERROR: Bad hex string found, odd number of chars]"
      !abort
    !elif &gre $window-col 31
      !if &gre $window-col 32
        set-variable $window-col 32
        insert-newline
        backward-char
      !endif
      bin-set-line #l0 @wl
      set-variable #l0 "????????"
      forward-line
    !elif &les &sub $window-eline $window-line 2
      !if $window-col
        bin-set-line #l0 @wl
      !endif
      forward-line
    !else
      forward-delete-char
    !endif
  !done
  set-mark
  beginning-of-buffer
  copy-region
  !force 0 delete-buffer "*bin-tmp*"
  goto-position "\x82"
  set-variable #l2 $window-line
  set-variable #l1 $window-col
  beginning-of-line
  !force !force yank
  !if &set #l0 $status
    !if &lget #l9 3
      set-mark
      forward-line
      -1 kill-region
    !endif
    set-mark
    set-variable $window-line #l2
    set-variable $window-col #l1
    exchange-point-and-mark
    !if &lget #l9 3
      &sub 17 &lget #l9 3 backward-char
      !if &les &set #l2 $window-col 62
        backward-line
        end-of-line
        &sub 62 #l2 backward-char
      !endif
      !if &les #l1 60
        bin-swap-section
      !endif
    !endif
  !endif
  -1 yank
  !return #l0
!emacro
0 define-macro ibin-copy-region
  set-position "\x82"
  !force 0 delete-buffer "*bin-tmp*"
  find-buffer "*bin-tmp*"
  yank
  insert-newline
  beginning-of-buffer
  !if &equ @1 1
    replace-string "^[\\h?]\\{8\\}: *" ""
    beginning-of-buffer
    replace-string "|.*$" ""
    beginning-of-buffer
    replace-string " " ""
    beginning-of-buffer
  !endif
  set-variable #l4 0
  set-variable #l2 0
  !while &gre $window-eline &add $window-line 1
    !if &set #l0 &isin @wc "0123456789abcdef"
      forward-delete-char
      !if &not &set #l1 &isin @wc "0123456789abcdef"
        ml-write "[ERROR: Current yank has bad hex byte code]"
        !abort
      !elif &and &equ #l2 13 &equ &set #l2 &add &mul &sub #l0 1 16 &sub #l1 1 10
        ; last char was a \r this is a \n so nothing to do as newline already inserted - could test for eol consistency but bin warning below should be enough
      !elif &or &equ #l2 13 &equ #l2 10
        insert-newline
        set-variable #l4 &add #l4 1
      !else
        insert-string &itoa #l2
        set-variable #l4 &add #l4 1
      !endif
      forward-delete-char
    !elif &seq @wc "\n"
      forward-delete-char
    !else
      ml-write "[ERROR: Current yank has invalid hex character]"
      !abort
    !endif
  !done
  0 buffer-info
  set-variable #l5 &lget $result 5
  set-mark
  beginning-of-buffer
  -1 yank
  copy-region
  !force 0 delete-buffer "*bin-tmp*"
  goto-position "\x82"
  set-variable $result &sub #l4 #l5
!emacro

define-macro bin-yank
  !if &les @# 1
    @# yank
    !return
  !elif &seq @y ""
    @# yank
    !return
  !endif
  !if &xseq @y "\\h\\h\\(\\h\\h\\|\n\\)*"
    set-variable #l1 2
  !elif &xseq &trb @y "\\h\\h\\( \\h\\h\\)+"
    set-variable #l1 1
  !elif &xseq @y "\\([?\\h]\\{8\\}:\\)? ?\\h\\h\\( \\h\\h\\)* +|  .\\{1,16\\}\n\\([?\\h]\\{8\\}:\\( \\h\\h\\)+ +|  .\\{1,16\\}\n\\)*\\([?\\h]\\{8\\}:\\( \\h\\h\\)+ ?\\)?"
    set-variable #l1 1
  !elif &xseq @y "\\([?\\h]\\{8\\}:\\)? ?\\h\\h\\( \\h\\h\\)* +|  .\\{1,16\\}\n\\([?\\h]\\{8\\}:\\( \\h\\h\\)+ +|  .\\{1,16\\}\n\\)\\{11\\}[\x01-\xff]*"
    set-variable #l1 1
  !else
    set-variable #l1 0
  !endif
  !if &bmo "rbin"
    !if &band &set #l9 $window-col 1
      ml-write "[ERROR: Bad cursor position, currently in the middle of a byte]"
      !abort
    !endif
  !elif &bmo "binary"
    !force $window-col bin-get-line-info
    !if &not $status
      ml-write "[ERROR: Bad cursor position or badly formatted line]"
      !abort
    !endif
  !else
    !if #l1
      ibin-copy-region #l1
      set-variable #l2 $result
    !endif
    @# yank
    !if #l1
      -1 yank
      !iif #l2  ml-write &spr "[WARNING: Binary data contained %d characters that cannot be represented in a normal text buffer]" #l2
    !endif
    !return
  !endif
  !iif &les #l1 2  #l1 bin-yank-to-hex
  !if &bmo "rbin"
    !repeat
      bin-hex-yank-rbin-insert
    !until &not &dec @# 1
  !else
    !repeat
      bin-hex-yank-bin-insert
    !until &not &dec @# 1
  !endif
  !iif &les #l1 2  -1 yank
!emacro

define-macro bin-copy-region
  set-variable #l1 0
  !if &les @# 0
  !elif &bmo "binary"
    set-variable #l1 1
  !elif &bmo "rbin"
    set-variable #l1 2
  !endif
  @# copy-region
  !if #l1
    ibin-copy-region #l1
    !iif $result  ml-write &spr "[WARNING: Binary data contained %d characters that cannot be represented in a normal text buffer]" $result
  !else
    0 bin-yank-to-hex
  !endif
!emacro

define-macro bin-insert-hex-string
  !if &not &or &bmo "binary" &bmo "rbin"
    ml-write "[ERROR: Not a binary or rbin mode buffer]"
    !abort
  !endif
  !force set-variable #l1 @1
  !if &not $status
    set-variable #l1 @ml "Bin hex string"
  !endif
  set-variable #l1 &sup &rep #l1 "\n" ""
  !if &not &xse #l1 "\\h+"
    ml-write "[ERROR: Invalid hex string given, non-hex chars found]"
    !abort
  !elif &band &set #l2 &len #l1 1
    ml-write "[ERROR: Invalid hex string given, half byte given]"
    !abort
  !elif &bmo "binary"
    !force $window-col bin-get-line-info
    !if &not $status
      ml-write "[ERROR: Bad cursor position or badly formatted line]"
      !abort
    !endif
    set-variable #l0 &lget #l9 1
    set-variable #l3 &lget #l9 2
    set-variable #l4 &mul 2 &lget #l9 3
    set-variable #l5 &spr "%s%s%s" &lef #l3 #l4 #l1 &rig #l3 #l4
    set-variable #l3 &len #l5
    set-variable #l6 $window-line
    !while &gre #l3 0
      bin-set-line #l0 &lef #l5 32
      set-variable #l0 "????????"
      !if &gre &dec #l3 32 0
        end-of-line
        insert-newline
        set-variable #l5 &rig #l5 32
      !endif
    !done
    set-variable $window-line #l6
    bin-move-forward &add &lget #l9 3 &div #l2 2
  !else
    !if &band $window-col 1
      ml-write "[ERROR: Bad cursor position, currently in the middle of a character]"
      !abort
    !endif
    !while #l2
      !if &gre &set #l3 $window-col 511
        set-variable $window-col 512
        insert-newline
        set-variable $window-col &sub #l3 512
      !elif &gre &add #l3 #l2 512
        insert-string &lef #l1 &set #l4 &sub 512 #l3
        set-variable #l1 &rig #l1 #l4
        set-variable #l2 &sub #l2 #l4
        insert-newline
      !else
        insert-string #l1
        set-variable #l2 0
        set-alpha-mark "\x81"
        end-of-line
        !if &gre $window-col 512
          set-variable $window-col 512
          insert-newline
          end-of-line
          set-variable #l4 $window-col
          forward-line
          end-of-line
          !if &seq @wc ""
          !elif &les &add $window-col #l4 513
            beginning-of-line
            backward-delete-char
          !endif
        !endif
        goto-alpha-mark "\x81"
      !endif
    !done
  !endif
!emacro

define-macro bin-insert-string
  !if &not &or &bmo "binary" &bmo "rbin"
    ml-write "[ERROR: Not a binary or rbin mode buffer]"
    !abort
  !endif
  !force set-variable #l1 @1
  !if &not $status
    set-variable #l1 @ml "Bin String"
  !endif
  bin-txt-to-hex #l1
  set-variable #l2 $result
  bin-insert-hex-string #l2
!emacro


0 define-macro ibin-hex-search-forward
  set-variable #l2 &len &set #l1 @1
  set-alpha-mark "\x81"
  !if &bmo "binary"
    set-variable #l3 &spr " %s " &lef #l1 2
    !repeat
      !force search-buffer "ME" #l3
      !if &not $status
        set-variable @# -1
      !else
        set-alpha-mark "\x82"
        set-variable #l4 2
        !while &les #l4 #l2
          !if &seq @wc " "
            forward-char
          !elif &seq @wc "|"
            beginning-of-line
            forward-line
            !force search-buffer "ME" ":"
          !elif &iseq @wc &mid #l1 &pinc #l4 1 1
            forward-char
            !tjump &not &iseq @wc &mid #l1 &pinc #l4 1 1 3
            forward-char
          !else
            ; not a match - move on
            goto-alpha-mark "\x82"
            backward-char
            set-variable #l4 &add #l2 1
          !endif
        !done
        !if &equ #l4 #l2
          ;found
          set-variable @# &sub @# 1
        !endif
      !endif
    !until &les @# 1
    !if @#
      goto-alpha-mark "\x81"
      -8 ml-write "[Not found]"
    !else
      set-alpha-mark "\x81"
      goto-alpha-mark "\x82"
      3 backward-char
      -3 show-region
      goto-alpha-mark "\x81"
      3 show-region
      ; 2 screen-update
    !endif
  !else
    set-variable #l3 &lef #l1 2
    !repeat
      !force search-buffer "ME" #l3
      !if &not $status
        set-variable @# -1
      !elif &band $window-col 1
        backward-char
      !else
        set-alpha-mark "\x82"
        set-variable #l4 2
        !while &les #l4 #l2
          !if &seq @wc "\n"
            forward-char
          !elif &iseq @wc &mid #l1 &pinc #l4 1 1
            forward-char
          !else
            ; not a match - move on
            goto-alpha-mark "\x82"
            set-variable #l4 &add #l2 1
          !endif
        !done
        !if &equ #l4 #l2
          ;found
          set-variable @# &sub @# 1
        !endif
      !endif
    !until &les @# 1
    !if @#
      goto-alpha-mark "\x81"
      -8 ml-write "[Not found]"
    !else
      set-alpha-mark "\x81"
      goto-alpha-mark "\x82"
      2 backward-char
      -3 show-region
      goto-alpha-mark "\x81"
      3 show-region
      ; 2 screen-update
    !endif
  !endif
!emacro

define-macro bin-hex-search-forward
  !iif &not &or &bmo "binary" &bmo "rbin"  -8 ml-write "[ERROR: Not a binary or rbin mode buffer]"
  !iif &les @# 1  -8 ml-write "[ERROR: Numeric arg must be greater than zero]"
  !force set-variable #l1 @1
  !iif &not $status  set-variable #l1 @ml "Bin hex search"
  set-variable #l1 &rep &rep #l1 " " "" "\n" ""
  !iif &not &xse #l1 "\\h+"  -8 ml-write "[ERROR: Invalid hex string given, non-hex chars found]"
  !iif &band 1 &len #l1  -8 ml-write "[ERROR: Invalid hex string given, half byte given]"
  @# ibin-hex-search-forward #l1
!emacro

define-macro bin-search-forward
  !iif &not &or &bmo "binary" &bmo "rbin"  -8 ml-write "[ERROR: Not a binary or rbin mode buffer]"
  !iif &les @# 1  -8 ml-write "[ERROR: Numeric arg must be greater than zero]"
  !force set-variable #l1 @1
  !iif &not $status  set-variable #l1 @ml15 "Bin search" @h4 0
  bin-txt-to-hex #l1
  set-variable #l2 $result
  @# ibin-hex-search-forward #l2
!emacro
