;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; C hook - This file is invoked when a C file is loaded.
;
; Notes:
;       There is a distinction between C++ and C because of problems with
;       hilighting. ".cpp", ".cc" and ".hpp" are assumed to be C++ files.
;       Also recognise magic-string for C++ as:- "-!- cmode; c++ -!-" in
;       the first line.
;
; Copyright (c) 1997-2001 JASSPA.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

define-macro fhook-c
    ; if arg is 0 this is a new file so add template 
    !if &not @#
        ; Is it an include h file or a c file?
        !if &iseq &mid $buffer-bname &rsin "." $buffer-bname 1 "h"
            etfinsrt "h"
        !else
            etfinsrt "c"
        !endif
    !endif
    set-variable $buffer-mask "luh1"
    buffer-initialize
    ; execute user extensions if defined
    !if &exist my-fhook-c
        my-fhook-c
    !endif
!emacro

; buffer-initialize variables
set-variable .fhook-c.setup &reg "/history" "fhook/c" "bdfhnopx"
set-variable .fhook-c.setup-mask "abdefhikmnoptux>"
set-variable .fhook-c.tags "ctags"
set-variable .fhook-c.comment "|/*|*/|*| * | * |f|"
set-variable .fhook-c.command-flag  "|t|t|thbo|bo|th|th|th|t|t|t|t|t|t|"
set-variable .fhook-c.command-name  "|c-to-cpp-convert||c-box|c-box||c-slashify|c-deslashify||c-hash-set-define|c-hash-unset-define|c-hash-eval|c-hash-eval|c-hash-del|"
set-variable .fhook-c.command-nbind "||||||||||||1||"
set-variable .fhook-c.command-kbind "|||esc q|esc o||||||||||"
set-variable .fhook-c.command-desc  "|Convert to C&++||Restyle c&omment|||Slashify region|Deslashify region||&Set #define|&Unset #define|Evaluate &#'s|Evaluate #'s use &Narrow|&Remove # evaluation|"

; Set up the folds for C
set-variable .fhook-c.fold-open  "^{"
set-variable .fhook-c.fold-close "^}"

!if &and &sin "h" .fhook-c.setup &band .hilight.flags 0x02 
    ; Hi-light C Mode
    !if &not &exi .hilight.c
        set-variable .hilight.c &pinc .hilight.next 1
    !endif
    0 hilight .hilight.c  2 50
    ; comments, strings and quotes
    hilight .hilight.c 0x3a "#" "\\"       .scheme.prepro
    hilight .hilight.c   20 "/\\*" "*/" ""   .scheme.comment
    ; the following is strictly C++ commenting - but people don't seem to know the difference
    hilight .hilight.c   18 "//"           .scheme.comment
    hilight .hilight.c    4 "\"" "\"" "\\" .scheme.string
    hilight .hilight.c    0 "'.'"      .scheme.quote
    hilight .hilight.c    0 "'\\\\.'"  .scheme.quote
    hilight .hilight.c    0 "'\\\\'"       .scheme.error
    hilight .hilight.c    0 "'\\\\''"      .scheme.quote
    ; Function names and goto labels
    !if &band .hilight.flags 0x04
        hilight .hilight.c    0 "^\\w+\\}\\s (" .scheme.function
        hilight .hilight.c    0 "^\\w+\\}(" .scheme.function
    !endif
    hilight .hilight.c    0 "^\\w+\\}:" .scheme.link
    ; keywords
    hilight .hilight.c    1 "break"        .scheme.keyword
    hilight .hilight.c    1 "case"         .scheme.keyword
    hilight .hilight.c    1 "continue"     .scheme.keyword
    hilight .hilight.c    1 "default"      .scheme.keyword
    hilight .hilight.c    1 "do"           .scheme.keyword
    hilight .hilight.c    1 "else"         .scheme.keyword
    hilight .hilight.c    1 "for"          .scheme.keyword
    hilight .hilight.c    1 "goto"         .scheme.keyword
    hilight .hilight.c    1 "if"           .scheme.keyword
    hilight .hilight.c    1 "return"       .scheme.keyword
    hilight .hilight.c    1 "switch"       .scheme.keyword
    hilight .hilight.c    1 "while"        .scheme.keyword
    ; tokens
    hilight .hilight.c    1 "auto"         .scheme.type
    hilight .hilight.c    1 "char"         .scheme.type
    hilight .hilight.c    1 "const"        .scheme.type
    hilight .hilight.c    1 "double"       .scheme.type
    hilight .hilight.c    1 "enum"         .scheme.type
    hilight .hilight.c    1 "extern"       .scheme.type
    hilight .hilight.c    1 "float"        .scheme.type
    hilight .hilight.c    1 "int"          .scheme.type
    hilight .hilight.c    1 "long"         .scheme.type
    hilight .hilight.c    1 "register"     .scheme.type
    hilight .hilight.c    1 "short"        .scheme.type
    hilight .hilight.c    1 "signed"       .scheme.type
    hilight .hilight.c    1 "size_t"       .scheme.type
    hilight .hilight.c    1 "sizeof"       .scheme.keyword
    hilight .hilight.c    1 "static"       .scheme.type
    hilight .hilight.c    1 "struct"       .scheme.type
    hilight .hilight.c    1 "typedef"      .scheme.type
    hilight .hilight.c    1 "union"        .scheme.type
    hilight .hilight.c    1 "unsigned"     .scheme.type
    hilight .hilight.c    1 "void"         .scheme.type
    hilight .hilight.c    1 "volatile"     .scheme.type
    ; Add some system types
    hilight .hilight.c    1 "FILE"         .scheme.type
    ; Pre-processor directives
    hilight .hilight.c    0 "__DATE__"     .scheme.prepro
    hilight .hilight.c    0 "__FILE__"     .scheme.prepro
    hilight .hilight.c    0 "__LINE__"     .scheme.prepro
    hilight .hilight.c    0 "__STDC__"     .scheme.prepro
    hilight .hilight.c    0 "__TIME__"     .scheme.prepro
    !if &band .hilight.flags 0x08
        ; hilight constants, e.g. numbers
        hilight .hilight.c 1 "[[:digit:]]+"       .scheme.constant
        hilight .hilight.c 1 "-[[:digit:]]+"      .scheme.constant
        hilight .hilight.c 1 "0[xX][[:xdigit:]]+" .scheme.constant
        hilight .hilight.c 1 "[[:digit:]]+\\.[[:digit:]]+"  .scheme.constant
        hilight .hilight.c 1 "-[[:digit:]]+\\.[[:digit:]]+" .scheme.constant
        hilight .hilight.c 1 "[[:digit:]]+\\.[[:digit:]]+f"  .scheme.constant
        hilight .hilight.c 1 "-[[:digit:]]+\\.[[:digit:]]+f" .scheme.constant
    !endif
!endif
;
; setup useful C fuctions to auto-load cmacros
define-macro-file cmacros c-slashify c-deslashify c-hash-eval c-hash-set-define c-hash-unset-define c-hash-del
define-macro-file cbox c-box
define-macro-file hkcpp fhook-cpp
;
;
; c to cpp file converter
define-macro c-to-cpp-convert
    beginning-of-buffer
    1 buffer-mode "magic"
    !force -1 search-forward "-[*!]- [Cc] -[*!]-"
    !if $status
        4 backward-char
        insert-string "++"
    !else
        !force -1 search-forward "-[*!]- [Cc]++ -[*!]-"
        !if &not $status
            !force -1 search-forward "/\\*"
            !if $status
                insert-string " -*- C++ -*- "
            !else
                insert-string "/* -*- C++ -*- */\n"
            !endif
        !endif
    !endif
    set-variable $buffer-fhook "fhook-cpp"
    fhook-cpp
!emacro

ml-write "[C file hook loaded]"

; load in user extensions if found
!force execute-file "myc"

