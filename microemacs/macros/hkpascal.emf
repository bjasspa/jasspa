; -!- emf -!-
;
; Copyright (C) 2000-2025 JASSPA (www.jasspa.com)
;
; This is part of JASSPA's MicroEmacs, see the LICENSE file for licensing and
; copying information.
;
; Synopsis:    Pascal mode hook
; Authors:     Steven Phillips, Detlef Groth
;
define-macro fhook-pascal
  set-variable $buffer-mask "luh1"
  @# buffer-init "pascal"
  buffer-init-hooks
!emacro

; buffer-init variables
set-variable .fhook-pascal.setup &reg "/history/fhook/pascal" "bfghinopx"
set-variable .fhook-pascal.setup-mask "abefghikmnoptux"
set-variable .fhook-pascal.comment "|{|}|*|* | *|fr|"
set-variable .fhook-pascal.exact -1

; Set up collapse for pascal
set-variable .fhook-pascal.collapse-open  "^\\([Pp]rocedure \\|[Ff]unction \\|Type \\w+\\)"
set-variable .fhook-pascal.collapse-close "^[Ee]nd;\\|\\'"
set-variable .fhook-pascal.collapse-mclose "1"
set-variable .fhook-pascal.collapse-mnext "-1"

; setup item-list
set-variable .fhook-pascal.item-list-s1 "^[Pp]*rocedure[ \t]+\\([.\\w]+\\)"
set-variable .fhook-pascal.item-list-r1 "Proc \ecB\\1\ecA"
set-variable .fhook-pascal.item-list-s2 "^[Ff]*unction[ \t]+\\([.\\w]+\\)"
set-variable .fhook-pascal.item-list-r2 "Func \ecB\\1\ecA"
set-variable .fhook-pascal.item-list-s3 "^[Tt]ype[ \t]+\\(\\w+\\) = [Rr]ecord"
set-variable .fhook-pascal.item-list-r3 "Rcrd \ecB\\1\ecA"
set-variable .fhook-pascal.item-list-s4 "^[Tt]ype[ \t]+\\(\\w+\\) = [Oo]bject"
set-variable .fhook-pascal.item-list-r4 "Objc \ecB\\1\ecA"
set-variable .fhook-pascal.item-list-s5 "^[Tt]ype[ \t]+\\(\\w+\\) = [Cc]lass"
set-variable .fhook-pascal.item-list-r6 "Clss \ecB\\1\ecA"

!if &and &sin "h" .fhook-pascal.setup &band .hilight.flags 0x02 
  ; High-light Pascal Mode
  !if &not &exist .hilight.pascal
    set-variable .hilight.pascal &pinc .hilight.next 1
  !endif
  0 hilight  .hilight.pascal 3 50            $global-scheme
  hilight .hilight.pascal 4 "{" "}" ""       .scheme.comment
  hilight .hilight.pascal 4 "(\\*" "*)" ""   .scheme.comment
  hilight .hilight.pascal 2 "//"             .scheme.comment
  hilight .hilight.pascal 0x1004 "'" "'" ""  .scheme.string
  
  hilight .hilight.pascal 1 "asm"            .scheme.keyword
  hilight .hilight.pascal 1 "begin"          .scheme.keyword
  hilight .hilight.pascal 1 "case"           .scheme.keyword
  hilight .hilight.pascal 1 "class"          .scheme.keyword  
  hilight .hilight.pascal 1 "const"          .scheme.keyword
  hilight .hilight.pascal 1 "constructor"    .scheme.keyword
  hilight .hilight.pascal 1 "destructor"     .scheme.keyword
  hilight .hilight.pascal 1 "do"             .scheme.keyword
  hilight .hilight.pascal 1 "downto"         .scheme.keyword
  hilight .hilight.pascal 1 "else"           .scheme.keyword
  hilight .hilight.pascal 1 "end"            .scheme.keyword
  hilight .hilight.pascal 1 "file"           .scheme.keyword
  hilight .hilight.pascal 1 "for"            .scheme.keyword
  hilight .hilight.pascal 1 "function"       .scheme.keyword
  hilight .hilight.pascal 1 "goto"           .scheme.keyword
  hilight .hilight.pascal 1 "if"             .scheme.keyword
  hilight .hilight.pascal 1 "implementation" .scheme.keyword
  hilight .hilight.pascal 1 "in"             .scheme.keyword
  hilight .hilight.pascal 1 "inline"         .scheme.keyword
  hilight .hilight.pascal 1 "interface"      .scheme.keyword
  hilight .hilight.pascal 1 "label"          .scheme.keyword
  hilight .hilight.pascal 1 "nil"            .scheme.keyword
  hilight .hilight.pascal 1 "object"         .scheme.keyword
  hilight .hilight.pascal 1 "of"             .scheme.keyword
  hilight .hilight.pascal 1 "procedure"      .scheme.keyword
  hilight .hilight.pascal 1 "program"        .scheme.keyword
  hilight .hilight.pascal 1 "public"         .scheme.keyword
  hilight .hilight.pascal 1 "private"        .scheme.keyword
  hilight .hilight.pascal 1 "protected"      .scheme.keyword
  hilight .hilight.pascal 1 "repeat"         .scheme.keyword
  hilight .hilight.pascal 1 "set"            .scheme.keyword
  hilight .hilight.pascal 1 "then"           .scheme.keyword
  hilight .hilight.pascal 1 "to"             .scheme.keyword
  hilight .hilight.pascal 1 "type"           .scheme.keyword
  hilight .hilight.pascal 1 "unit"           .scheme.keyword
  hilight .hilight.pascal 1 "until"          .scheme.keyword
  hilight .hilight.pascal 1 "uses"           .scheme.keyword
  hilight .hilight.pascal 1 "var"            .scheme.keyword
  hilight .hilight.pascal 1 "while"          .scheme.keyword
  hilight .hilight.pascal 1 "with"           .scheme.keyword
  
  hilight .hilight.pascal 1 "array"          .scheme.type
  hilight .hilight.pascal 1 "boolean"        .scheme.type
  hilight .hilight.pascal 1 "byte"           .scheme.type
  hilight .hilight.pascal 1 "char"           .scheme.type
  hilight .hilight.pascal 1 "comp"           .scheme.type
  hilight .hilight.pascal 1 "double"         .scheme.type
  hilight .hilight.pascal 1 "extended"       .scheme.type
  hilight .hilight.pascal 1 "integer"        .scheme.type
  hilight .hilight.pascal 1 "int64"          .scheme.type  
  hilight .hilight.pascal 1 "longint"        .scheme.type
  hilight .hilight.pascal 1 "longword"       .scheme.type  
  hilight .hilight.pascal 1 "packed"         .scheme.type
  hilight .hilight.pascal 1 "real"           .scheme.type
  hilight .hilight.pascal 1 "record"         .scheme.type
  hilight .hilight.pascal 1 "shortint"       .scheme.type
  hilight .hilight.pascal 1 "single"         .scheme.type
  hilight .hilight.pascal 1 "string"         .scheme.type
  hilight .hilight.pascal 1 "text"           .scheme.type
  hilight .hilight.pascal 1 "variant"        .scheme.type  
  hilight .hilight.pascal 1 "word"           .scheme.type
  
  hilight .hilight.pascal 1 "and"            .scheme.operator
  hilight .hilight.pascal 1 "div"            .scheme.operator
  hilight .hilight.pascal 1 "mod"            .scheme.operator
  hilight .hilight.pascal 1 "not"            .scheme.operator
  hilight .hilight.pascal 1 "or"             .scheme.operator
  hilight .hilight.pascal 1 "shl"            .scheme.operator
  hilight .hilight.pascal 1 "shr"            .scheme.operator
  hilight .hilight.pascal 1 "xor"            .scheme.operator
  
  hilight .hilight.pascal 1 "false"          .scheme.operator
  hilight .hilight.pascal 1 "true"           .scheme.operator
  
  hilight .hilight.pascal 1 "eof"            .scheme.operator
  hilight .hilight.pascal 1 "eoln"           .scheme.operator
!endif

; setup file-* tools
add-next-line "*pascal-exec*" "^%f(%l,\\d+).+"
add-next-line "*pascal-lint*" "^%f(%l,\\d+).+"
set-variable .fhook-pascal.coms "\bfpc\b" 
set-variable .fhook-pascal.exec1   "\b%v[com].exe\b%v[com].exe -h\b0\b\b%v[com] %\"%p%f%\" %& .\\%b %v[args|20|Additional command-line arguments|]\b"
set-variable .fhook-pascal.exec2   "\b%v[com]\b%v[com] -h\b0\b\b%v[com] %\"%p%f%\" %& ./%b %v[args|20|Additional command-line arguments|]\b"
; input-output can be the same file for ptop !! does inline replacement
set-variable .fhook-pascal.format1 "\bptop\bptop -h\b0\b\bptop %\"%f%\" %\"%f%\"\bPtop\b"
set-variable .fhook-pascal.lint1   "\b%v[com]\b%v[com] -h\b0\b\b%v[com] -Cn %\"%f%\"\bFpc -Cn\b"

buffer-init-fhook "pascal"
