; -!- emf -!-
;
; Copyright (C) 2001-2024 JASSPA (www.jasspa.com)
;
; This is part of JASSPA's MicroEmacs, see the LICENSE file for licensing and
; copying information.
;
; Synopsis:    Generic macros for creating a list of items defined in current buffer
; Authors:     Detlef Groth & Steven Phillips
;
; Notes:
;     To add support for a new buffer type a list of search/replace strings must
;     be created. The search strings must use regex (magic mode) and groups \(..\)
;     to get the found function name into the replace string, e.g. given the ME
;     macro definition is:
;
;         define-macro macro-name
;
;     Searching for "define-macro \([a-z-]+\)" and replacing with "Macro \1" will
;     work... most of the time. The space between define-macro and the name does
;     not have to be a single space and the name does not have to contain just
;     lower case latters, so these search strings should be a flexible as 
;     possible, try "define-macro\s +\(\w+\)".
;
;     This however is not as optimal as it could be and if you have large files
;     this could become slow. Performance can be greatly increased if it can be
;     anchored to the start of the line, e.g. "^define-macro\s +\(\w+\)", but to
;     allow for intial white spaces and the optional numeric argument, you really
;     need "^\s *[0-9]*\s *define-macro\s +\(\w+\)".
;
;     To hilight the function name you need to encase it in a meth magic
;     hilighting string, "\CCBmacro-name\CCA" where \CC is a ^C char, so the
;     replace string should be "Macro \CCB\1\CCA".
;
;     Now all thats needed is to set these variables as fhook command variables,
;     for macro files, the file hook command is fhook-emf, therefore the
;     following is required:
;
;    set-variable .fhook-emf.item-list-s1 "^[ \t]*[0-9]*[ \t]*define-macro[ \t]+\\(\\w+\\)"
;    set-variable .fhook-emf.item-list-r1 "Macr \CCB\\1\CCA"
;
;    Also note that you can have as many of these search and replace variables as you
;    require, i.e. .item-list-s1, .item-list-s2, .item-list-s3, ...
;    but the more you have the slower it will be, often a good regex can do the
;    job of 2 or 3.
;
!iif &not &exi meth-add-format  execute-file "meth"

0 define-macro item-list-order
  !if &not @?
  !elif &equ @# .item-list.order
    set-variable .item-list.order &sub 0 @# 
  !else
    set-variable .item-list.order @# 
  !endif
  -1 buffer-mode "view"
  2 goto-line
  set-mark
  end-of-buffer
  set-variable #l0 &lget .item-list.scol &abs .item-list.order
  !iif &less .item-list.order 0  set-variable #l0 &sub -1 #l0
  #l0 sort-lines
  -1 buffer-mode "edit"
  1 buffer-mode "view"
  beginning-of-buffer
!emacro

0 define-macro item-list-set-order
  set-variable #l0 0
  !while &not &seq "" &set #l1 &lget .item-list.bcol &inc #l0 1
    !if &gre &add 1 $window-col #l1
      !if &les $window-col &set #l2 &lget .item-list.ecol #l0
        !goto got-col
      !endif
    !endif
  !done
  !abort
*got-col
  !if @#
    #l0 item-list-order
  !else
    set-variable $window-col #l1
    -3 show-region
    set-variable $window-col #l2
    3 show-region
    set-cursor-to-mouse
    show-region
  !endif
!emacro

0 define-macro item-list-mouse-pick
  !if &gre $window-line 1
    set-variable .item-list.find $window-line
  !else
    !force 0 item-list-set-order
    !if $status
      set-cursor-to-mouse
      show-region
    !endif
  !endif
  goto-position "\x82"
!emacro

0 define-macro item-list-mouse-drop
  !if &equ $window-line 1
    !force 1 item-list-set-order
  !elif &seq @wc ""
    ml-write "[Invalid line]"
  !else
    !if &equ .item-list.find $window-line
      set-variable .item-list.find 0
      0 item-list-find
    !endif
    !return
  !endif
  goto-position "\x82"
!emacro

define-macro item-list-find
  !iif &les $window-line 2  -8 ml-write "[Invalid line!]"
  set-variable #l0 &mid :next-file 1 &sub &len :next-file 2
  beginning-of-line
  search-buffer "me" "^\CEH *\\([0-9]+\\)\CE"
  set-variable #l1 @s1
  !if @#
    popup-window #l0
  !else
    set-variable #l2 $window-id
    goto-position "\x82"
    !if &not &seq $buffer-bname #l2
      !force 0 popup-window #l0
      !if $status
      !elif &equ #l2 $window-id
        popup-window #l0
      !else
        find-buffer #l0
      !endif
    !endif
  !endif
  #l1 goto-line
  recenter
!emacro

define-macro item-list-create
  set-position "\x86"
  !force set-variable #l6 @1
  !iif &not $status  set-variable #l6 "*item-list*"
  set-variable #l1 $buffer-bname
  set-variable #l3 $buffer-mask
  !force set-variable #l5 @3
  !if &set @# $status
    set-variable #l0 @2
  !else
    !if &exi :chook
      set-variable #l8 :chook
    !elif &seq &set #l8 &rig $buffer-fhook 6 ""
      set-variable #l8 "default"
    !endif
    !if &not &exi &ind &spr ".fhook-%s.item-list-s1" #l8
      find-buffer #l6
      -1 buffer-mode "undo"
      -1 buffer-mode "view"
      beginning-of-buffer
      set-mark
      end-of-buffer
      -1 kill-region
      insert-string "<No item list>"
      goto-position "\x86"
      !return
    !endif
    set-variable #l0 &ind &spr ".fhook-%s.item-list-s1" #l8
    set-variable #l5 &ind &spr ".fhook-%s.item-list-r1" #l8
  !endif
  set-variable #l9 &cond &les &ind &spr ".fhook-%s.exact" #l8 0 -1 1
  find-buffer #l6
  -1 buffer-mode "undo"
  -1 buffer-mode "view"
  1 buffer-mode "magic"
  #l9 buffer-mode "exact"
  beginning-of-buffer
  set-mark
  end-of-buffer
  -1 kill-region
  set-variable .item-list.scol &con @# "|0|0|0|" "|10|17|0|"
  insert-string &con @# "Occurrences: " "Type Item     <Order by Position>"
  set-variable $line-scheme .scheme.header
  ; to simple click the function
  buffer-bind-create "bio" "return" "" item-list-find
  buffer-bind-create "bio" "delete" "" item-list-close
  buffer-bind-create "bio" "1" "1" item-list-order
  buffer-bind-create "bio" "2" "2" item-list-order
  buffer-bind-create "bio" "3" "3" item-list-order
  set-variable :mouse-pick-1 item-list-mouse-pick
  set-variable :mouse-drop-1 item-list-mouse-drop
  set-variable $buffer-hilight .hilight.meth
  set-variable :next-file &spr "*%s*" #l1
  set-variable $buffer-mask #l3
  find-buffer #l1
  set-variable #l2 &cat "m" &con &equ #l9 1 "e" "E"
  set-variable #l9 1
  set-variable #l4 1
  !repeat
    beginning-of-buffer
    !repeat
      !force search-buffer #l2 #l0
      !iif &not $status  !break
      set-variable #l3 $window-line
      set-variable #l7 $window-col
      find-buffer #l6
      set-variable $window-line &inc #l4 1
      insert-string @s0
      !if &not &seq #l5 "ERROR"
        #l4 goto-line
        -1 replace-string #l0 #l5
      !endif
      !while &gre $window-line #l4
        backward-line
        end-of-line
        insert-space
        forward-delete-char
      !done
      end-of-line
      insert-newline
      backward-line
      insert-string &spr "\CEH%6d\CEh" #l3
      find-buffer #l1
      set-variable $window-line #l3
      set-variable $window-col #l7
    !done
    !iif @#  !break
    !iif &seq "ERROR" &set #l0 &ind &spr ".fhook-%s.item-list-s%d" #l8 &inc #l9 1  !break
    set-variable #l5 &ind &spr ".fhook-%s.item-list-r%d" #l8 #l9
  !done
  find-buffer #l6
  end-of-buffer
  backward-delete-char
  item-list-order
  goto-position "\x86"
!emacro

define-macro item-list-close
  !force 0 popup-window "*item-list*"
  !if $status
    !force delete-window
    -1 find-buffer "*item-list*"
  !endif
!emacro

define-macro item-list
  !iif &not &exi &ind &spr ".%s.item-list-s1" $buffer-fhook  -8 ml-write "[item-list not setup]"
  item-list-create "*item-list*"
  !force 0 popup-window "*item-list*"
  !if $status
    goto-position "\x86"
  !else
    delete-other-windows
    !if &equ @# 2
      split-window-vertically
    !else
      split-window-horizontally
      change-window-width .width
    !endif
    find-buffer "*item-list*"
    3 next-window
  !endif
!emacro
!iif &not &exist .item-list.width  set-variable .item-list.width 25

define-macro occur
  !force set-variable #l1 @1
  !if &not $status
    0 show-region
    !if &set #l0 &equ &band $result 5 5
      copy-region
      !iif &set #l0 &len &set #l1 @y  str-to-regex #l1
      -1 yank
    !endif
    !iif &not #l0  set-variable #l1 @ml05 "Occur"
  !endif
  !iif &not &bmod "magic"  str-to-regex #l1
  set-variable #l6 &cond @? &con &equ @# 2 28 15 &div $window-width 3
  ; find out how many regex groups are being used
  set-variable #l4 &sub &len #l1 &len &rep #l1 "\\(" "X"
  set-variable #l2 &spr "\\(%s\\)" #l1
  !if &not &seq &lef #l1 1 "^"
    set-variable #l2 &spr "\\(.\\{0,%d\\}\\)%s" #l6 #l2
    set-variable #l3 &spr "\CCdOccr\CCA \\1\CCD\\2\CCA"
    set-variable #l4 &add #l4 1
  !else
    set-variable #l3 &spr "\CCdOccr\CCA \CCD\\1\CCA"
  !endif
  set-variable #l5 &rig #l1 &sub &len #l1 1
  !if &not &seq #l5 "$"
    set-variable #l2 &spr "%s\\(.\\{0,%d\\}\\)" #l2 &con @? #l6 $window-width
    set-variable #l3 &spr "%s\\%d" #l3 &add #l4 2
  !endif
  ; force the order back to position
  set-variable .item-list.order 1
  item-list-create "*occur*" #l2 #l3
  popup-window "*occur*"
  goto-position "\x86"
!emacro

set-variable .item-list.find 0
set-variable .item-list.bcol "|0|5|14|"
set-variable .item-list.ecol "|4|9|33|"
set-variable .item-list.order 3

;0 add-next-line "*item-list*"
;add-next-line "*item-list*" "^ *%l "
0 add-next-line "*occur*"
add-next-line "*occur*" "^ *%l "

