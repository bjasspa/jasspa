; -!- emf -!-
; This is part of the JASSPA MicroEmacs macro files
; Copyright (C) 1996-2009 JASSPA (www.jasspa.com)
; See the file me.emf for copying and conditions.
;
; Synopsis:    Setup file for Microsoft Windows.
; Authors:     Jon Green
;
; Notes on the standard configuration
; ===================================
;
; The "Terminal" font is the standard DOS font used
; for the DOS window. This is an OEM fixed width
; character set which contains all of the conventional
; symbols found in the DOS shell.
;
; The fonts are the same as shown in the DOS window the
; last 2 arguments are the width x height, the terminal
; equivelents (Bit Mapped) are commented here.
;
; 8x8  regular weight seems to offer the best resolution
;      for 14/15" monitors.
;
; 7x12 A good replacement for 8x8 if it is not operating
;      correctly !!.
;
; 6x8  regular weight is more suitable for 17-21" monitors
;      which offer better resolutions.
;
; Standard Terminal Fonts - standard weight use  0 4
; Standard Terminal Fonts - heavy weight use     0 7
!if &band $system 0x01
  ; using a console interface
  1 change-font .change-font.wftp
!else
  ; using our own window
  define-macro change-font-size
    !if &not &and @? @#
      set-variable .dpth &lget .ofnt 5
      5 change-font &lget .ofnt 2 &lget .ofnt 8 &lget .ofnt 3 &lget .ofnt 6 &lget .ofnt 7
      ml-write &spr "[Text Zoom reset  (%s: %dx%d)]" &lget .ofnt 8 &lget .ofnt 4 &lget .ofnt 5
    !elif &les &set #l0 &add .dpth @# 5
      -8 ml-write "[Text too small]"
    !else
      !if &exi .font
        set-variable #l1 .font
      !elif &band 6 &lget .ofnt 1
        set-variable #l1 &lget .ofnt 8
      !else
        set-variable #l1 "Lucida Console"
      !endif
      1 change-font &lget .ofnt 2 #l1 &lget .ofnt 3 0 &set .dpth #l0
      ml-write &spr "[Text Zoom: %d%%  (%s: %dx%d)]" &div &mul &lget $result 5 100 &lget .ofnt 5 &lget $result 8 &lget $result 4 &lget $result 5
    !endif
  !emacro
  set-variable #l0 &reg &spr "/history/%s/font" $platform ""
  set-variable #l1 &reg &spr "/history/%s/font-weight" $platform "0"
  set-variable #l2 &reg &spr "/history/%s/font-width" $platform "0"
  set-variable #l3 &reg &spr "/history/%s/font-depth" $platform "0"
  !force 1 change-font .change-font.wftp #l0 #l1 #l2 #l3
  set-variable .change-font-size.ofnt $result
  set-variable .change-font-size.dpth &lget .change-font-size.ofnt 5
  global-bind-key change-font-size "C-="
  1 global-bind-key change-font-size "C-+"
  -1 global-bind-key change-font-size "C--"
!endif
0 define-macro pipe-me
  !if &not &exi .mcmd
    !if &seq "mec" &mid &set #l0 $progname &set #l3 &rsin "/" #l0 3
    !elif &seq "R" &stat "t" &set #l2 &cat &set #l1 &lef #l0 #l3 "mec.exe"
      set-variable #l0 #l2
    !elif &seq "R" &stat "t" &set #l2 &cat #l1 "mecw.exe"
      set-variable #l0 #l2
    !elif &not &seq "ERROR" &set #l2 &which "mec.exe"
      set-variable #l0 #l2
    !elif &not &seq "ERROR" &set #l2 &which "mecw.exe"
      set-variable #l0 #l2
    !endif
    !iif &sin " " #l0  set-variable #l0 &spr "\"%s\"" #l0
    !iif &sin "/mecw" #l0  set-variable #l0 &cat #l0 " -n"
    set-variable .mcmd #l0
  !endif
  ipipe-shell-command &spr "%s %s %s" .mcmd &con &ban @# 2 "-P" "-p" @1 @mna
!emacro
; Add A-f4 as an exit binding
global-bind-key save-buffers-exit-emacs "A-f4"
;
; Setup the get-next-line stuff for grep and compiling
;
set-variable $line-template "[0-9]+"
set-variable $file-template "\\([a-zA-Z]:\\)?\\([-~+_{$.#@\\m\\\\/][^\\n*?\"<>|:]*[\\\\/]\\)?[-~+_{$.#@\\m]\\([^\\n\\\\/*?\"<>()|:]*([-\\m.]+)\\)*\\([^\\n\\\\/*?\"<>()|:]*[\\m_}=]\\)?"
set-variable %xgrep-com "grep -n"
add-next-line "*grep*" "%f: %l:"
; These definitions are for the Microsoft MSCV 2.0+ compiler
set-variable %compile-com "nmake "
0 add-next-line "*compile*"
; MS VS errors and warning
add-next-line "*compile*" "^ *%f(%l\\(,\\d+\\)?) ?: \\(fatal error\\|error\\|warning\\)"
; GNU gcc & Java style errors and warning
add-next-line "*compile*" "^ *\\(\\[\\m+\\] \\)?%f:%l:\\(\\d+:\\)? \\(fatal error\\|error\\|warning\\)"
; Load additional hooks required for windows.
define-macro-file hkipipe ishell perldb
;--- COMSHELL
; As command.com's prompt echoing is broken ishell is useless without
; the following 2 variables which enable ME's command-line support
; NOTE - if you use a different prompt (i.e. not "PATH>") then you
; must configure .ishell.prompt appropriately
set-variable .ishell.prompt "^[^>\n]*>"
set-variable .ishell.noecho "1"
;--- CYGWIN
; Try to find cygwin automatically.
!if &not &exi %cygwin-path
  !if &seq "D" &stat "t" "c:/cygwin"
    set-variable %cygwin-path "c:/cygwin"
    !if &not &exi $INFOPATH
      set-variable $INFOPATH &cat %cygwin-path "/usr/share/info"
    !endif
  !endif
!endif
; Define the cygwin dummy macro. This reports an error if the cygwin environment
; has not been defined in the user start-up file.
define-macro cygwin
  !if &seq %cygwin-path "ERROR"
    ; Bitch if the environment is not defined.
    5000 ml-write "[Error: %cygwin-path not set - see hkcygwin.emf]"
    !abort
    ; See if bash exists.
  !elif &seq "R" &stat "t" &cat %cygwin-path "/bin/bash.exe"
    ; Load the macro file and execute the cygwin session.
    execute-file "hkcygwin"
    !if $status
      cygwin
    !endif
  !else
    5000 ml-write &spr "[Error: Cannot find bash program. %s]" &cat %cygwin-path "/bin/bash.exe"
    !abort
  !endif
!emacro
; Define a dummy man macro. This reports an error if the cygwin environment
; has not been defined in the user start-up file.
define-macro man
  !if &not &exi %man-com
    !if &seq %cygwin-path "ERROR"
      ; Bitch if the environment is not defined.
      5000 ml-write "[Error: %cygwin-path not set - see hkcygwin.emf]"
      !abort
      ; See if the max.exe file exists.
    !elif &seq "R" &stat "t" &cat %cygwin-path "/bin/man.exe"
      ; Load the macro file and execute the man file
      set-variable %man-com &cat %cygwin-path "/bin/man.exe"
    !else
      5000 ml-write "[Error: Cannot find man program.]"
      !abort
    !endif
  !endif
  execute-file "hkman"
  !if $status
    man
  !endif
!emacro
