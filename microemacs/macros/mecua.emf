; -!- emf -!-
; This is part of the JASSPA MicroEmacs macro files
; Copyright (C) 2001-2009 JASSPA (www.jasspa.com)
; See the file me.emf for copying and conditions.
;
; Created:     Wed Feb 21 2001
; Adapted:     Gabriel Tabares-Barreiro
; Synopsis:    CUA (Standard GUI keybindings) emulation
; Authors:     Steven Phillips, Gabriel Tabares-Barreiro
;
; Notes:
;     This is currently only a partical implementation created for proof
;     of concept, please feel free to improve and submit correction.
;
;     See osdcua.emf for OSD main menu changes for this emulation.
;
define-macro-file osd osd-new-buffer osd-close osd-undo osd-redo
define-macro-file osdmisc osd-find-tag osd-search osd-goto-line
define-macro-file osdhelp osd-help

; cua-get-region - turn the current show-region into the current ME region,
; command aborts if no valid hilight region, argument n is a bitwise flag
; modifying the behaviour: 
;   0x01 - if set then report failure
;   0x02 - cursor does not have to be in region
0 define-macro cua-get-region
    0 show-region
    set-variable #l0 $result
    !if &equ &band #l0 5 5
        ; a region is hilighted, sanity check that the cursor is
        ; in it before killing it
        set-position "\x81"
        !if &band @# 2
        !elif &not &band #l0 2
        !elif &not &band #l0 8
            !force backward-char
            0 show-region
            !if &not &band $result 8
                goto-alpha-mark "\x81"
                !if &band @# 1
                    ml-write "[Cursor is not within current region]"
                    !bell
                !endif
                !abort
            !endif
        !endif
        2 show-region
        set-alpha-mark "\x81"
        -2 show-region
        set-mark
        goto-alpha-mark "\x81"
    !elif &band @# 1
        ml-write "[No region in this window]"
        !bell
        !abort
    !else
        !abort
    !endif
!emacro

; cut & copy only operate on the current hilight region
define-macro cut
    3 cua-get-region
    kill-region @mna
!emacro
define-macro copy
    3 cua-get-region
    copy-region
    goto-position "\x81"
    show-region
!emacro
; paste must remove the hilight region first if there is one 
define-macro paste
    !force 0 cua-get-region
    !if $status
        -1 kill-region @mna
    !endif
    @# yank @mna
!emacro

define-macro select-all
    set-position "\x81"
    beginning-of-buffer
    -3 show-region
    end-of-buffer
    3 show-region
    goto-position "\x81"
    show-region
!emacro

define-macro backspace
    !force 0 cua-get-region
    !if $status
        -1 kill-region @mna
    !elif @?
        @# backward-delete-char @mna
    !else
        backward-delete-char @mna
    !endif
!emacro

define-macro delete
    !force 0 cua-get-region
    !if $status
        -1 kill-region @mna
    !elif @?
        @# forward-delete-char @mna
    !else
        forward-delete-char @mna
    !endif
!emacro

define-macro cua-lower-case-region
    3 cua-get-region
    lower-case-region @mna
    exchange-point-and-mark
    -3 show-region
    exchange-point-and-mark
    3 show-region
    goto-position "\x81"
    show-region
!emacro

define-macro cua-upper-case-region
    3 cua-get-region
    upper-case-region @mna
    exchange-point-and-mark
    -3 show-region
    exchange-point-and-mark
    3 show-region
    goto-position "\x81"
    show-region
!emacro

define-macro forward-paragraph-start
    beginning-of-line
    !force 2 forward-paragraph
    !if $status
        backward-paragraph
    !endif
!emacro

define-macro forward-word-start
    !if &inw @wc
        !force forward-word
    !endif
    !force forward-word
    !if $status
        backward-word
    !endif
!emacro

define-macro previous-buffer
     &neg @# next-buffer
!emacro

; get rid of all default ME bindings
-1 global-unbind-key "y"
; create safety bindings so we can still do things
; Must bind the first prefix (for numeric args), execute-named-command & abort
1 global-bind-key prefix "A-a"
global-bind-key execute-named-command "A-c"
global-bind-key abort-command "esc"

; CUA emulation
global-bind-key tab "tab"
global-bind-key next-buffer "C-tab"
global-bind-key previous-buffer "S-C-tab"
global-bind-key newline "return"
global-bind-key backward-char "left"
global-bind-key backward-line "up"
global-bind-key forward-char "right"
global-bind-key forward-line "down"
global-bind-key backward-word "C-left"
global-bind-key forward-word-start "C-right"
5 global-bind-key backward-line "C-up"
5 global-bind-key forward-line "C-down"
1 global-bind-key scroll-up "C-up"
1 global-bind-key scroll-down "C-down"
global-bind-key backspace "backspace"
ml-bind-key backward-delete-char "backspace"
global-bind-key backward-kill-word "C-backspace"
149 global-bind-key buffer-mode "insert"
global-bind-key delete "delete"
ml-bind-key forward-delete-char "delete"
global-bind-key forward-kill-word "C-delete"
global-bind-key beginning-of-line "home"
global-bind-key beginning-of-buffer "C-home"
global-bind-key end-of-line "end"
global-bind-key end-of-buffer "C-end"
global-bind-key scroll-up "page-up"
global-bind-key scroll-down "page-down"

global-bind-key select-all "C-a"
global-bind-key expand-abbrev-handle "C-b"
global-bind-key copy "C-c"
global-bind-key goto-matching-fence "C-e"
global-bind-key isearch-forward "C-f"
global-bind-key isearch-backward "A-C-f"
global-bind-key goto-line "C-g"
global-bind-key insert-file "C-i"
global-bind-key ifill-paragraph "C-j"
global-bind-key lower-case-word "A-l"
global-bind-key cua-lower-case-region "C-l"
global-bind-key set-alpha-mark "C-m"
global-bind-key osd-new-buffer "C-n"
global-bind-key find-file "C-o"
global-bind-key print-buffer "C-p"
global-bind-key query-replace-string "C-r"
global-bind-key save-buffer "C-s"
global-bind-key write-buffer "A-C-s"
global-bind-key goto-alpha-mark "C-t"
global-bind-key upper-case-word "A-u"
global-bind-key cua-upper-case-region "C-u"
global-bind-key paste "C-v"
global-bind-key yank-rectangle "A-C-v"
global-bind-key osd-close "C-w"
global-bind-key cut "C-x"
global-bind-key osd-redo "C-y"
global-bind-key osd-undo "C-z"
global-bind-key split-window-horizontally "C-t"
global-bind-key split-window-vertically "A-C-t"
global-bind-key help "f1"
global-bind-key major-mode-help "C-f1"
global-bind-key grep  "f2"
global-bind-key hunt-forward "f3"
global-bind-key hunt-backward "S-f3"
global-bind-key osd-close "C-f4"
global-bind-key save-buffers-exit-emacs "A-f4"

global-bind-key context-menu "menu"

; reconfigure the buffer bindings
set-variable .buffer-bind-key.map-from "|C-c C-c|C-c C-d|"
set-variable .buffer-bind-key.map-to   "|C-#|C-~|"

0 define-macro msshift-pick
    set-variable .msshift.state 1
!emacro

0 define-macro msshift
    !if &equ .state 2
        3 show-region
    !endif
    set-variable .state -1
!emacro

0 define-macro msshift-move
    !if &equ .msshift.state 1
        -3 show-region
        set-variable .msshift.state 2
    !endif
    set-variable #l1 &cbind &rep @cck "S-" ""
    set-variable @cl @cl
    !if @?
        @# execute-named-command #l1
    !else
        execute-named-command #l1
    !endif
    set-variable @cc #l1
!emacro

set-variable .msshift.state -1

global-bind-key msshift-pick "S-pick"
global-bind-key msshift "S-drop"

set-variable #l0 0
!while &not &seq "" &set #l1 &lget "|up|down|left|right|home|end|page-up|page-down|C-left|C-right|C-up|C-down|C-home|C-end|" &inc #l0 1
    !if &not &seq &cbin #l1 "ERROR"
        !if &seq &nbin #l1 ""
            global-bind-key msshift-move &cat "S-" #l1
        !else
            &nbin #l1 global-bind-key msshift-move &cat "S-" #l1
        !endif
    !endif
!done

; redo the mouse
!force exec-file "mouse"
