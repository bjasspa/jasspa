; -!- emf -!-
;
; Copyright (C) 1998-2024 JASSPA (www.jasspa.com)
;
; This is part of JASSPA's MicroEmacs, see the LICENSE file for licensing and
; copying information.
;
; Synopsis:    Contains buffer formating commands, namely:
; Authors:     Steven Phillips, Jon Green & Dan Phillips
;
; clean - clean all redundant white-spaces
; If an argument is given it runs in spotless mode which removes blank
; ines as well
define-macro clean
  ;
  ; Prepare to clean up file.
  ; Remember position & magic mode
  319 set-position "\x81"
  set-variable #l1 &not &bmod magic
  !iif #l1  1 buffer-mode "magic"
  ;
  ; Get rid of trailing white space on EOL
  beginning-of-buffer
  replace-string "[\t ]+$" ""
  beginning-of-buffer
  replace-string "[ ]+\t" "\t"
  ;
  ; Strip trailing blank lines.
  end-of-buffer
  backward-line
  !while &and &gre $window-line 1 &sequal @wc "\n"
    set-mark
    forward-line
    -1 kill-region
    backward-line
  !done
  ;
  ; if argument given then run a 'spotless' macro, i.e.
  ; Reduce multiple blank lines to single blanks
  !if @?
    !repeat
      beginning-of-buffer
      replace-string "\n\n\n" "\n\n"
      beginning-of-buffer
      !force search-forward "\n\n\n"
    !until &not $status
  !endif
  ;
  ; Clean up - restore buffer modes etc.
  ; Move back to starting position & restore original magic mode
  !force goto-position "\x81"
  !iif #l1  -1 buffer-mode "magic"
  !if &seq @p ""
    screen-update
    ml-write "[Cleaned up buffer]"
  !endif
!emacro
;
; Insert a normal none c-mode/indent tab (still effected by tab mode)
define-macro normal-tab
  ; Remember we have set indent
  set-variable #l1 $buffer-indent
  set-variable $buffer-indent 0
  !force !force @# tab
  set-variable #l2 $status
  set-variable $buffer-indent #l1
  !return #l2
!emacro
;
; tabs-to-spaces - Convert all of the tabs to spaces.
define-macro tabs-to-spaces
  ; Remember line
  set-variable #l0 $window-line
  beginning-of-buffer
  !force search-forward "\t"
  !while $status
    set-variable #l1 $window-acol
    backward-delete-char
    &sub #l1 $window-acol insert-space
    !force search-forward "\t"
  !done
  goto-line #l0
  screen-update
  ml-write "[Converted tabs]"
!emacro
;
; sort-case-lines
; Sort lines case insensitivelly regardless of the current 'exact' mode
; setting.
define-macro sort-lines-ignore-case
  set-variable #l0 &bmod exact
  -1 buffer-mode "exact"
  !if @?
    @# sort-lines
  !else
    sort-lines
  !endif
  &cond #l0 1 -1 buffer-mode "exact"
!emacro

; transpose-region-line
; Improved transpose-lines supporting a region, defaults to current line if no region
define-macro transpose-region-line
  !iif &not @#  !return
  0 show-region
  !if &band $result 0x01
    !if &set #l0 &con &set #l0 &sub &set #l1 $window-line &set #l2 $window-mark-line #l0 &sub &set #l3 $window-col &set #l4 $window-mark-col
      !if &les @# 0
        !iif &or &equ #l1 1 &equ #l2 1  -8 ml-write "[top of buffer]"
      !elif &or &gre &add #l1 2 $window-eline &gre &add #l2 2 $window-eline
        -8 ml-write "[end of buffer]"
      !endif
      !if &gre #l0 0
        !if #l3
          beginning-of-line
          forward-line
        !endif
        set-mark
        set-variable $window-line #l2
      !else
        beginning-of-line
        set-mark
        set-variable $window-line &add #l2 &con #l4 1 0
      !endif
      kill-region
      set-variable #l0 $window-line
      !force @# forward-line
      set-variable #l0 &sub $window-line #l0
      yank
      -1 yank
      set-variable $window-line &add #l2 #l0
      set-variable $window-col #l4
      set-mark
      -3 show-region
      set-variable $window-line &add #l1 #l0
      set-variable $window-col #l3
      3 show-region
      !return &equ @# #l0
    !endif
  !endif
  set-variable #l0 $window-col
  @# transpose-lines
  set-variable $window-col #l0
!emacro

define-macro paragraph-to-line
  set-variable #l1 $buffer-fill-mode
  set-variable $buffer-fill-mode "o"
  !force !force &sub 0 @# fill-paragraph
  !if &not $status
    set-variable $buffer-fill-mode #l1
    !abort
  !endif
  set-variable $buffer-fill-mode #l1
!emacro
;
; create the delete-indentation command usually bound to "esc ^" & "esc %"
define-macro delete-indentation
  !iif &not &set #l0 &gre @# 0  set-variable @# &abs @#
  !while &gre &pdec @# 1 0
    beginning-of-line
    backward-delete-char
    !while &sin @wc " \t"
      forward-delete-char
    !done
    backward-char
    !while &sin @wc " \t"
      forward-delete-char
      backward-char
    !done
    forward-char
    !iif &not &seq @wc "\n"  #l0 insert-space
  !done
!emacro
; ifill-paragraph - intelligently try to fill paragraphs by spotting bullet lists etc.
0 define-macro ifill-para
  !while &seq &trr @wl ""
    forward-line
  !done
  set-variable #l0 $window-line
  forward-paragraph
  set-variable #l1 $window-line
  set-variable #l4 1
  !while &gre $window-line #l0
    !force &sub #l0 $window-line search-buffer "mb" &spr "^\\(\\([ \t]*\\)\\(\\a\\|[ivx]+\\|\\(\\d\\)\\d?\\)?\\([%s]\\)[ \t]\\|[^\\w\n]+$\\)" .b
    !iif &not $status  !break
    set-variable #l2 $window-line
    backward-line
    !if &seq @wl ""
    !elif &seq @s3 ""
      end-of-line
      insert-newline
      set-variable #l1 &add #l1 1
      set-variable #l4 &add #l4 1
    !else
      end-of-line
      set-variable #l3 &spr "^%s%s%s[ \t]" @s2 &con &len @s4 "\\d\\d?" &con &sub 1 &len @s3 "[ivx]+" "\\a" @s5
      !force &sub #l0 &add $window-line 1 search-buffer "mb" #l3
      !if $status
        set-variable $window-line #l2
        backward-line
        end-of-line
        insert-newline
        set-variable #l1 &add #l1 1
        set-variable #l4 &add #l4 1
        !repeat
          !force &sub #l0 $window-line search-buffer "mb" #l3
          !iif &not $status  !break
          backward-line
          end-of-line
          insert-newline
          set-variable #l1 &add #l1 1
          set-variable #l2 &add #l2 1
          set-variable #l4 &add #l4 1
        !done
        set-variable $window-line #l2
      !endif
    !endif
  !done
  set-variable $window-line #l0
  set-variable #l1 0
  !repeat
    !if &len .m
      @# fill-paragraph .m
    !else
      set-variable #l5 $recent-keys
      @# fill-paragraph @mna
      !if &seq #l5 &set #l6 $recent-keys
      !elif &lfin "|a |o |" &slo &lef #l6 2
        set-variable .m &lef #l6 1
      !endif
    !endif
    set-variable #l2 $window-line
    !if #l1
      set-variable $window-line #l1
      forward-delete-char
      set-variable $window-line &sub #l2 1
    !endif
    set-variable #l1 $window-line
  !until &not &dec #l4 1
!emacro
define-macro ifill-paragraph
  !iif &not @#  !return
  !iif &not @?  set-alpha-mark "\xb1"
  !if &les @# 0
    set-variable #l0 -1
    set-variable @# &abs @#
  !else
    set-variable #l0 1
  !endif
  set-variable .ifill-para.m ""
  set-variable #l1 ""
  set-variable #l2 $fill-bullet
  !while &len &set #l3 &lef #l2 1
    set-variable #l1 &spr "%s\\x%02x" #l1 &atoi #l3
    set-variable #l2 &rig #l2 1
  !done
  set-variable .ifill-para.b #l1
  end-of-line
  backward-paragraph
  !repeat
    #l0 ifill-para
  !until &not &dec @# 1
  !iif &not @?  goto-alpha-mark "\xb1"
!emacro
;
0 define-macro restyle-region-int
  set-variable #l0 $window-line
  set-alpha-mark "\x82"
  exchange-point-and-mark
  !if &gre $window-line #l0
    set-variable #l0 $window-line
    set-alpha-mark "\x82"
    exchange-point-and-mark
  !endif
  !if $buffer-indent
    !while &les $window-line #l0
      beginning-of-line
      tab @mna
      forward-line
    !done
    beginning-of-line
  !else
    !if &seq $buffer-fhook "fhook-nroff"
      set-variable #l1 "1 nroff-para"
    !elif &seq $buffer-fhook "fhook-latex"
      set-variable #l1 "1 latex-para"
    !else
      set-variable #l1 "1 ifill-paragraph"
    !endif
    !while &les $window-line #l0
      execute-line #l1
      set-mark
      goto-alpha-mark "\x82"
      set-variable #l0 $window-line
      exchange-point-and-mark
    !done
  !endif
!emacro

define-macro restyle-region
  ml-write "[Restyling...]"
  set-variable #l0 $mouse
  set-variable #l1 $system
  set-variable $mouse &bor 0x50000 &band 0xffff #l0
  set-variable $system &bor $system 0x1000
  !force !force restyle-region-int
  set-variable #l2 $status
  set-variable $system #l1
  set-variable $mouse #l0
  !iif &not #l2 !abort
  ml-write "[Restyle complete]"
!emacro

define-macro restyle-buffer
  319 set-position "\x81"
  end-of-buffer
  set-mark
  beginning-of-buffer
  restyle-region
  !force goto-position "\x81"
  -1 show-region
!emacro

; Increase or decrease the indent by the buffer indent.
;
; Note. In order to allow the command to be symmetrical (i.e. we can increase
; and then decrease an indent without loosing a region) then we have to
; adjust the mark and point positions when they are not at column zero
; otherwise there is a danger that we loose the end line from the indentation
; when the position is on white space before a character loosing a line from
; the region. To maintain the region then if the end point is not a column 0
; then we adjust the point or mark position at the end of the region such
; that it is at the end of the line.
define-macro indent-increase
  !iif &not @?  set-variable @# $buffer-indent-width
  !iif &not @#  !return
  0 show-region
  !if &set #l0 &equ &band $result 5 5
    !iif &not &band $result 2  3 show-region
    set-alpha-mark "\x81"
    set-variable #l2 $window-line
    set-variable #l4 $window-col
    -2 show-region
    set-alpha-mark "\x82"
    set-variable #l1 $window-line
    set-variable #l3 $window-col
    !if &set #l5 &les #l2 #l1
      ; Bottom to top selection - switch vars
      set-variable #l1 #l2
      set-variable #l2 $window-line
      set-variable #l3 #l4
      set-variable #l4 $window-col
    !endif
    ; If bottom col is 0 then last line is not included - dec the line count
    !iif &not #l4  set-variable #l2 &sub #l2 1
    set-variable $window-line #l1
  !else
    set-alpha-mark "\x81"
    set-variable #l1 &set #l2 $window-line
  !endif
  !repeat
    beginning-of-line
    search-buffer "em" "[^ \t]"
    backward-char
    set-variable #l3 &add $window-acol @#
    !if $window-col
      $window-col backward-delete-char
      -1 yank
    !endif
    !if &les #l3 1
    !elif &bmod "tab"
      #l3 insert-space
    !else
      insert-string &spr "%n%n" &div #l3 $tab-width "\t" &mod #l3 $tab-width " "
    !endif
    forward-line
  !until &gre $window-line #l2
  !if #l0
    !if #l4
      ; If bottom line was include (col > 0) check it still is and if not move to first non [ \t]
      goto-alpha-mark &con #l5 "\x82" "\x81"
      !if &not $window-col
        search-buffer "em" "[^ \t]"
        backward-char
        set-alpha-mark &con #l5 "\x82" "\x81"
      !endif
    !endif
    goto-alpha-mark "\x82"
    -3 show-region
    goto-alpha-mark "\x81"
    !force show-region
  !else
    goto-alpha-mark "\x81"
  !endif
!emacro

define-macro indent-decrease
  !iif &not @?  set-variable @# $buffer-indent-width
  &neg @# indent-increase
!emacro
