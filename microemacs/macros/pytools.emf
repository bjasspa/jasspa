; -!- emf -!-
; This is part of the JASSPA MicroEmacs macro files
; Copyright (C) 2024 JASSPA (www.jasspa.com)
; See the file me.emf for copying and conditions.
;
; Synopsis:    Macros useful for Python development
; Authors:     Detlef Groth & Steven Phillips
;
define-macro fhook-py-doc
  buffer-init-hooks
!emacro

; buffer-init variables
set-variable .fhook-py-doc.name "Python Doc"
set-variable .fhook-py-doc.setup &reg "/history/fhook/py-doc" "acfhmw"
set-variable .fhook-py-doc.setup-mask "acfhmw"

!if &and &sin "h" .fhook-py-doc.setup &band .hilight.flags 0x02
  !iif &not &exi .hilight.py-doc  set-variable .hilight.py-doc &pinc .hilight.next 1
  0 hilight .hilight.py-doc 0            .scheme.text
  hilight .hilight.py-doc 2 "^[A-Z].+"   .scheme.header
  hilight .hilight.py-doc 2 "^    class" .scheme.keyword
!endif

!if &sin "f" .fhook-py-doc.setup
  ; setup emf collapsing
  set-variable .fhook-py-doc.collapse-open  "^\\([A-Z]\\|    class\\)"
  set-variable .fhook-py-doc.collapse-close "^\\([A-Z]\\|    class\\|\\'\\)"
  set-variable .fhook-py-doc.collapse-mnext "-1"
!endif
; setup item-list
set-variable .fhook-py-doc.item-list-s1 "^\\([A-Z][A-Z]\.+\\)"
set-variable .fhook-py-doc.item-list-r1 "SECT \ecB\\1\ecA"
set-variable .fhook-py-doc.item-list-s2 "^    class +\\([^(]+\\)"
set-variable .fhook-py-doc.item-list-r2 "  class \ecB\\1\ecA"

add-next-line "*py-exec*" "^ *File \"%f\", line %l"
add-next-line "*py-lint*" "^%f:%l:\\d+: "

0 define-macro py-python-setup
  !iif &exi %python-com !return
  set-variable #l0 0
  !while &not &seq "" &set #l1 &lget "|python3|python2|python|" &inc #l0 1
    !if &not &seq "ERROR" &which #l1
      set-variable %python-com #l1
      ml-write &spr "Python %s executable found in path" #l1
      !return
    !endif
  !done
  !if &seq $platform "windows"
    ; Add code to look for python on windows
  !endif
  -24 ml-write "Error: Python executable not found, please install Python or set %python-com"
!emacro

0 define-macro py-tools-ipipe
  !if &not &exi :ipp-last
    set-variable :ipp-last 4
    set-variable :mouse-word-select "mouse-get-next-line"
    buffer-bind-key return-get-next-line "return"
  !endif
  goto-alpha-mark "I"
  !if &sub &set #l0 $window-line
    set-variable $window-line &sub :ipp-last 1
    !repeat
      !force 6 get-next-line
      !if &not $status
        set-variable $window-line #l0
      !elif &les $window-line #l0
        !if &seq $buffer-bname "*py-exec*"
          set-variable $line-scheme .scheme.error
        !elif &seq "C" &set #l1 &mid @wl &add &sin ": " @wl 1 1
          set-variable $line-scheme .scheme.comment
        !elif &seq "W" #l1
          set-variable $line-scheme .scheme.constant
        !elif &seq "R" #l1
          set-variable $line-scheme .scheme.constant
        !else
          set-variable $line-scheme .scheme.error
        !endif
      !endif
    !until &not &les $window-line #l0
    set-variable :ipp-last #l0
  !endif
  !if &not @#
    ; command finished - check if UTF8
    buffer-is-utf8 #l1
    !if #l1  
      -1 buffer-mode "view"
      4 change-buffer-charset "utf8" "display"
      -1 buffer-mode "edit"
      1 buffer-mode "view"
    !endif
  !endif
!emacro

define-macro py-doc
  !iif &not &exi %python-com  py-python-setup
  !force set-variable #l0 @1
  !iif &not $status  set-variable #l0 @ml00 "Python help on"
  0 pipe-shell-command &spr "LANG=en_US %s -m pydoc %s" %python-com #l0 "*py-doc*"
  -1 buffer-mode "view"
  beginning-of-buffer
  3 kill-line
  buffer-is-utf8 #l1
  !iif #l1  4 change-buffer-charset "utf8" "display"
  beginning-of-buffer
  -1 buffer-mode "edit"
  1 buffer-mode "view"
  buffer-init "py-doc"
  ; some terminals might need this
  !iif &band $system 0x01  screen-update
!emacro    

define-macro py-exec
  !iif &not &seq $buffer-fhook "fhook-python"  -8 ml-write &spr "Error: '%s' is not a Python file!" $buffer-bname
  !iif &seq $buffer-fname ""  -8 ml-write &spr "Error: Buffer '%s' does not have a file name!" $buffer-bname
  !iif &not &exi %python-com  py-python-setup
  &band @# 1 save-some-buffers @mna
  !iif &not &exi :py-exec-args  set-variable :py-exec-args ""
  !iif &not &band @# 2  set-variable :py-exec-args @ml2 "Additional command-line arguments" :py-exec-args 
  0x80 ipipe-shell-command &spr "%s %s %s" %python-com $buffer-fname :py-exec-args "*py-exec*" py-tools-ipipe @nma
!emacro

define-macro py-format
  !iif &not &seq $buffer-fhook "fhook-python"  -8 ml-write &spr "Error: '%s' is not a Python file!" $buffer-bname
  !iif &seq $buffer-fname ""  -8 ml-write &spr "Error: Buffer '%s' does not have a file name!" $buffer-bname
  !iif &not &exi %python-com  py-python-setup
  !if &bmod "edit"
    set-variable #l0 @mc5 "Save buffer first (?/y/n) ? " "nNyY" "(Y)es, (N)o, (C-g)Abort ? "
    !iif &iseq #l0 "y"  save-buffer 
  !endif
  set-variable #l3 "Py-format options"
  !if &not &and &exi %py-format-opts &len %py-format-opts 
    !if &not &seq &which "yapf" "ERROR"
      set-variable %py-format-opts "yapf -i"
    !elif &not &seq &which "black" "ERROR"
      set-variable %py-format-opts "black -q"
    !else
      set-variable %py-format-opts ""
      set-variable #l3 "Py-format options [try: yapf -i / black -q]"
      set-variable @# &band &bnot 2 
    !endif
    set-variable @# &bor @# 2
  !endif
  !iif &band @# 2  set-variable %py-format-opts @ml2 #l3 %py-format-opts
  !iif &seq %py-format-opts ""  -8 ml-write "Py-format Error: Command needs formatter module and options!"
  3 pipe-shell-command &spr "%s -m %s %s" %python-com %py-format-opts $buffer-fname
  !if $result
    popup-window "*command*"
    -8 ml-write &spr "Error: Python %s failed - ls formatter installed?" &trr &lef %py-format-opts &sin " " &cat %py-format-opts " "
  !endif
  0 reread-file
!emacro

define-macro py-lint
  !iif &not &seq $buffer-fhook "fhook-python"  -8 ml-write &spr "Error: '%s' is not a Python file!" $buffer-bname
  !iif &seq $buffer-fname ""  -8 ml-write &spr "Error: Buffer '%s' does not have a file name!" $buffer-bname
  !iif &not &exi %python-com  py-python-setup
  !if &bmod "edit"
    set-variable #l2 @mc5 "Save buffer first (?/y/n) ? " "nNyY" "(Y)es, (N)o, (C-g)Abort ? "
    !iif &iseq #l0 "y"  save-buffer 
  !endif 
  !if &not &exi %py-lint-opts
    set-variable %py-lint-opts ""
    set-variable @# &bor @# 2
  !endif
  !iif &band @# 2  set-variable %py-lint-opts @ml2 "Pylint options" %py-lint-opts
  0x80 ipipe-shell-command &spr "%s -m pylint %s %s" %python-com %py-lint-opts $buffer-fname "*py-lint*" py-tools-ipipe @nma
!emacro
