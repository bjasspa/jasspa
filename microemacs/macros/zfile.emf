; -!- emf -!-
; This is part of the JASSPA MicroEmacs macro files
; Copyright (C) 1999-2004 JASSPA (www.jasspa.com)
; See the file me.emf for copying and conditions.
;
; Created:     Sun Jan 10 1999
; Synopsis:    Compressed file/archive support.
; Authors:     Steven Phillips & Jon Green
;
; Some standard zfile-setup definitions are:-
;
; GNU Tar file hilighting.
!if &not &exist .hilight.tar
    set-variable .hilight.tar &pinc .hilight.next 1
!endif
0 hilight .hilight.tar 0                           $global-scheme
hilight .hilight.tar 0x102 "l"                     .scheme.dir-slink
hilight .hilight.tar 0x102 "d"                     .scheme.dir
hilight .hilight.tar 0x112 "-"                     $global-scheme
hilight .hilight.tar 0x012 "[0-9][0-9]:[0-9][0-9] \\{\"" .scheme.file
hilight .hilight.tar 0x012 "[0-9][0-9]:[0-9][0-9] \\{"   .scheme.file
; zipinfo -sh hilighting
!if &not &exist .hilight.zip
    set-variable .hilight.zip &pinc .hilight.next 1
!endif
0 hilight .hilight.zip 0                           $global-scheme
hilight .hilight.zip 0x002 "Archive:"              .scheme.header
hilight .hilight.zip 0x102 "l"                     .scheme.dir-slink
hilight .hilight.zip 0x102 "d"                     .scheme.dir
hilight .hilight.zip 0x112 "-"                     $global-scheme
hilight .hilight.zip 0x012 "[0-9][0-9]:[0-9][0-9] \\{\"" .scheme.file
hilight .hilight.zip 0x012 "[0-9][0-9]:[0-9][0-9] \\{"   .scheme.file
;
; Set up the defaults for the standard archives.
; Edit the following section to define your defaults and then execute
; "zfile-default". Note that this is a hidden function and it will 
; not complete.
;
0 define-macro zfile-default
    ; -- .Z : Compressed file.
    set-registry &cat "/history/" $platform "Z-extract" "zcat \"%zf\" > \"%fb\""
    set-registry &cat "/history/" $platform "Z-remove"  "rm -f \"%fb\""
    ; -- .bz : bzip2 file.
    set-registry &cat "/history/" $platform "bz-extract" "bzcat \"%zf\" > \"%fb\""
    set-registry &cat "/history/" $platform "bz-remove"  "rm -f \"%fb\""
    ; -- .bz2 : bzip2 file.
    set-registry &cat "/history/" $platform "bz2-remove" "bzcat \"%zf\" > \"%fb\""
    set-registry &cat "/history/" $platform "bz2-remove" "rm -f \"%fb\""
    ; -- .gz : gzip file
    set-registry &cat "/history/" $platform "bz2-remove" "gzcat \"%zf\" > \"%fb\""
    set-registry &cat "/history/" $platform "bz2-remove" "rm -f \"%fb\""
    ; -- .tar : GNU Tar file
    set-registry &cat "/history/" $platform "tar-cut-to"   ""
    set-registry &cat "/history/" $platform "tar-extract"  "gtar xf \"%zf\" \"%fb\""
    set-registry &cat "/history/" $platform "tar-file-col" "51"
    set-registry &cat "/history/" $platform "tar-file-end" "$"
    set-registry &cat "/history/" $platform "tar-list"     "gtar tvf \"%zb\""
    set-registry &cat "/history/" $platform "tar-remove"   "rm -rf \"%fb\""
    set-registry &cat "/history/" $platform "tar-hilight"  "tar"
    ; -- .tar.Z : Compressed Tar file
    set-registry &cat "/history/" $platform "tar.Z-cut-to"   ""
    set-registry &cat "/history/" $platform "tar.Z-extract"  "gtar Zxf \"%zf\" \"%fb\""
    set-registry &cat "/history/" $platform "tar.Z-file-col" "51"
    set-registry &cat "/history/" $platform "tar.Z-file-end" "$"
    set-registry &cat "/history/" $platform "tar.Z-list"     "gtar Ztvf \"%zb\""
    set-registry &cat "/history/" $platform "tar.Z-remove"   "rm -rf \"%fb\""
    set-registry &cat "/history/" $platform "tar.Z-hilight"  "tar"
    ; -- .tar.bz : bzip2 tar file.
    set-registry &cat "/history/" $platform "tar.bz-cut-to"   ""
    set-registry &cat "/history/" $platform "tar.bz-extract"  "gtar jxf \"%zf\" \"%fb\""
    set-registry &cat "/history/" $platform "tar.bz-file-col" "51"
    set-registry &cat "/history/" $platform "tar.bz-file-end" "$"
    set-registry &cat "/history/" $platform "tar.bz-list"     "gtar jtvf \"%zb\""
    set-registry &cat "/history/" $platform "tar.bz-remove"   "rm -rf \"%fb\""
    set-registry &cat "/history/" $platform "tar.bz-hilight"  "tar"
    ; -- .tar.bz2 : bzip2 tar file.
    set-registry &cat "/history/" $platform "tar.bz2-cut-to"   ""
    set-registry &cat "/history/" $platform "tar.bz2-extract"  "gtar jxf \"%zf\" \"%fb\""
    set-registry &cat "/history/" $platform "tar.bz2-file-col" "51"
    set-registry &cat "/history/" $platform "tar.bz2-file-end" "$"
    set-registry &cat "/history/" $platform "tar.bz2-list"     "gtar jtvf \"%zb\""
    set-registry &cat "/history/" $platform "tar.bz2-remove"   "rm -rf \"%fb\""
    set-registry &cat "/history/" $platform "tar.bz2-hilight"  "tar"
    ; -- .tar.gz : gzip tar file.
    set-registry &cat "/history/" $platform "tar.gz-cut-to"   ""
    set-registry &cat "/history/" $platform "tar.gz-extract"  "gtar zxf \"%zf\" \"%fb\""
    set-registry &cat "/history/" $platform "tar.gz-file-col" "51"
    set-registry &cat "/history/" $platform "tar.gz-file-end" "$"
    set-registry &cat "/history/" $platform "tar.gz-list"     "gtar ztvf \"%zb\""
    set-registry &cat "/history/" $platform "tar.gz-remove"   "rm -rf \"%fb\""
    set-registry &cat "/history/" $platform "tar.gz-hilight"  "tar"
    ; -- .tbz : bzip2 tar file.
    set-registry &cat "/history/" $platform "tbz-cut-to"   ""
    set-registry &cat "/history/" $platform "tbz-extract"  "gtar jxf \"%zf\" \"%fb\""
    set-registry &cat "/history/" $platform "tbz-file-col" "51"
    set-registry &cat "/history/" $platform "tbz-file-end" "$"
    set-registry &cat "/history/" $platform "tbz-list"     "gtar jtvf \"%zb\""
    set-registry &cat "/history/" $platform "tbz-remove"   "rm -rf \"%fb\""
    set-registry &cat "/history/" $platform "tbz-hilight"  "tar"
    ; -- .tbz2 : bzip2 tar file.
    set-registry &cat "/history/" $platform "tbz2-cut-to"   ""
    set-registry &cat "/history/" $platform "tbz2-extract"  "gtar jxf \"%zf\" \"%fb\""
    set-registry &cat "/history/" $platform "tbz2-file-col" "51"
    set-registry &cat "/history/" $platform "tbz2-file-end" "$"
    set-registry &cat "/history/" $platform "tbz2-list"     "gtar jtvf \"%zb\""
    set-registry &cat "/history/" $platform "tbz2-remove"   "rm -rf \"%fb\""
    set-registry &cat "/history/" $platform "tbz2-hilight"  "tar"
    ; -- .tar.gz : gzip tar file.
    set-registry &cat "/history/" $platform "tgz-cut-to"   ""
    set-registry &cat "/history/" $platform "tgz-extract"  "gtar zxf \"%zf\" \"%fb\""
    set-registry &cat "/history/" $platform "tgz-file-col" "51"
    set-registry &cat "/history/" $platform "tgz-file-end" "$"
    set-registry &cat "/history/" $platform "tgz-list"     "gtar ztvf \"%zb\""
    set-registry &cat "/history/" $platform "tgz-remove"   "rm -rf \"%fb\""
    set-registry &cat "/history/" $platform "tgz-hilight"  "tar"
    ; -- .zip : zip file.
    set-registry &cat "/history/" $platform "zip-cut-to"   "^Archive"
    set-registry &cat "/history/" $platform "zip-extract"  "unzip -o \"%zf\" \"%fb\""
    set-registry &cat "/history/" $platform "zip-file-col" "52"
    set-registry &cat "/history/" $platform "zip-file-end" "$"
    set-registry &cat "/history/" $platform "zip-list"     "zipinfo -sh \"%zb\""
    set-registry &cat "/history/" $platform "zip-remove"   "rm -f \"%fb\""
    set-registry &cat "/history/" $platform "zip-hilight"  "zip"
!emacro
;
; Load in a file from an archive list 
; 
0 define-macro zfile-loadfile
    !if &les :zfcol 0
        ml-write &spr "[find-zfile error: Registry entry \"/history/%s/%s-file-col\" not setup]" $platform :zftype
        !abort
    !endif
    !if &seq "" &set #l0 &reg "/history" &spr "%s/%s-file-end" $platform :zftype ""
        ml-write &spr "[find-zfile error: Registry entry \"/history/%s/%s-file-end\" not setup]" $platform :zftype
        !abort
    !endif
    !if &seq "" &set #l9 &reg "/history" &spr "%s/%s-extract" $platform :zftype ""
        ml-write &spr "[find-zfile error: Registry entry \"/history/%s/%s-extract\" not setup]" $platform :zftype
        !abort
    !endif
    set-variable #l7 &reg "/history" &spr "%s/%s-remove" $platform :zftype ""
    set-variable $window-acol :zfcol
    !force regex-forward #l0
    !force -2 show-region
    set-mark
    set-variable $window-acol :zfcol
    copy-region
    set-variable #l2 @y
    -1 yank
    !if &seq #l2 ""
        ml-write "[find-zfile error: Invalid line]"
        !abort
    !endif
    set-variable #l4 $buffer-fname
    ; get a tmp file name and use the path of it as our scratch area
    ; use &stat to get '/'s in a windows and dos system
    set-variable #l0 &stat "a" $temp-name
    set-variable #l0 &lef #l0 &ris "/" #l0
    ; create the output file name and check if it exists
    set-variable #l3 &cat #l0 #l2
    !if &seq &set #l5 &stat "t" #l3 "R"
        !if &iseq @mc1 &spr "Over-write file %s (y/n) ? " #l3 "yYnN" "n"
            !return
        !endif
    !elif &not &seq #l5 "X"
        ml-write &spr "[find-zfile error: Cannot output to file \"%s\"]" #l3
        !abort
    !endif
    ; create a temporary buffer, set the filename to the path and kick off extract
    find-buffer "*zfile log*"
    set-variable $buffer-fname #l0
    set-variable #l9 &rep #l9 "%zb" &rig #l4 &rsin "/" #l4 
    !if &band $system 0x400
        set-variable #l4 &rep #l4 "/" "\\"
    !endif
    set-variable #l9 &rep &rep #l9 "%zf" #l4 "%fb" #l2
;    set-variable $debug 1
    0 pipe-shell-command #l9 "*zfile log*" @mna
    find-file #l3 @mna
    set-variable $buffer-fname ""
    set-variable #l5 $buffer-bname
    find-buffer "*zfile log*"
    !if &not &seq #l7 ""
        shell-command &rep #l7 "%fb" #l2
    !endif
    set-variable $buffer-fname ""
    -1 find-buffer "*zfile log*"
!emacro
;
; Extract a file from a compressed single file archive
; 
0 define-macro zfile-extract
    set-variable #l4 &stat "a" @1
    !if &seq "" &set #l9 &reg "/history" &spr "%s/%s-extract" $platform @2 ""
        ml-write &spr "[find-zfile error: Registry entry \"/history/%s/%s-extract\" not setup]" $platform @2
        !abort
    !endif
    ; get a tmp file name and use the path of it as our scratch area
    ; use &stat to get '/'s in a windows and dos system
    set-variable #l0 &stat "a" $temp-name
    set-variable #l0 &lef #l0 &ris "/" #l0
    ; create the output file name and check if it exists
    set-variable #l2 &rig #l4 &ris "/" #l4
    set-variable #l2 &lef #l2 &sub &len #l2 &add 1 &len @2
    set-variable #l3 &cat #l0 #l2
    !if &seq &set #l5 &stat "t" #l3 "R"
        !if &iseq @mc1 &spr "Over-write file %s (y/n) ? " #l3 "yYnN" "n"
            !return
        !endif
    !elif &not &seq #l5 "X"
        ml-write &spr "[find-zfile error: Cannot output to file \"%s\"]" #l3
        !abort
    !endif
    ; create a temporary buffer, set the filename to the path and kick off extract
    find-buffer "*zfile log*"
    set-variable $buffer-fname #l0
    set-variable #l9 &rep #l9 "%zb" &rig #l4 &rsin "/" #l4 
    !if &band $system 0x400
        set-variable #l4 &rep #l4 "/" "\\"
    !endif
    set-variable #l9 &rep &rep #l9 "%zf" #l4 "%fb" #l3
    0 pipe-shell-command #l9 "*zfile log*" @mna
    find-file #l3 @mna
    set-variable $buffer-fname ""
    set-variable #l5 $buffer-bname
    find-buffer "*zfile log*"
    ; Get the remove action if there is one.
    set-variable #l7 &reg "/history" &spr "%s/%s-remove" $platform @2 ""
    !if &not &seq #l7 ""
        shell-command &rep #l7 "%fb" #l3
    !endif
    set-variable $buffer-fname ""
    -1 find-buffer "*zfile log*"
!emacro

0 define-macro zfile-mouse-pick-1
    !if &les :zfcol 0
        ml-write &spr "[find-zfile error: Registry entry \"/history/%s/%s-file-col\" not setup]" $platform :zftype
        set-variable :zmpl -1
    !elif &les $window-acol :zfcol
        set-variable :zmpl -1
    !else
        set-variable :zmpl $window-line
        !if &seq "" &set #l0 &reg "/history" &spr "%s/%s-file-end" $platform :zftype ""
            ml-write &spr "[find-zfile error: Registry entry \"/history/%s/%s-file-end\" not setup]" $platform :zftype
            !abort
        !endif
        regex-forward #l0
        -2 show-region
        -3 show-region
        set-variable $window-acol :zfcol
        3 show-region
    !endif
    set-cursor-to-mouse
    show-region
!emacro
0 define-macro zfile-mouse-drop-1
    !if &les :zmpl 0
    !elif &not &les $window-acol :zfcol
        zfile-loadfile
    !endif
!emacro

define-macro find-zfile
    !force set-variable #l0 @1
    !if &not $status
        set-variable #l0 @ml01 "Find zfile"
    !endif
    ; Loop and get the extension
    set-variable #l8 #l0
*again    
    !if &not &sin "." #l8
        ml-write &spr "[find-zfile error: Unknown file type \"%s\", run zfile-setup]" #l0
        !abort
    !endif
    ; Get the next extension if there is one.
    set-variable #l8 &rig #l8 &sin "." #l8
    !if &iseq "" &set #l9 &reg "/history" &spr "%s/%s-list" $platform #l8 ""
        !if &iseq "" &set #l9 &reg "/history" &spr "%s/%s-extract" $platform #l8 ""
            ; Neither a list or extraction command.
            !goto again
        !else
            ; Extraction command do this now.
            zfile-extract #l0 #l8
            !return
        !endif
    !endif
    ;
    ; get the absolute file name
    ;
    set-variable #l0 &stat "a" #l0
    ; see if this has already been loaded
    set-variable #l2 $buffer-bname
    set-variable $buffer-names "[*].*"
    !while &not &seq &set #l3 $buffer-names ""
        find-buffer #l3
        !if &seq $buffer-fname #l0
            !return
        !endif
    !done
    ; create a unique buffer name
    set-variable #l2 &rig #l0 &rsin "/" #l0
    set-variable #l3  #l2
    set-variable #l4 0
    set-variable $buffer-names &cat "[*]" #l3
    !if &not &seq $buffer-names ""
        set-variable #l3 &spr "%s<%d>" #l2 &inc #l4 1
        !jump -3
    !endif
    set-variable #l3 &cat "*" #l3
    ; pop-up buffer and set the file name so the execution only needs the base name
    find-buffer #l3
    set-variable $buffer-fname #l0
    ; execute the list command into the buffer
    set-variable #l9 &rep &rep #l9 "%zb" #l2 "%zf" #l0
    0 pipe-shell-command #l9 #l3 @mna
    set-variable $buffer-fname #l0
    -1 buffer-mode "view"
    set-mark
    2 forward-line
    !if &seq "" &set #l1 &reg "/history" &spr "%s/%s-cut-to" $platform #l8 ""
    !else
        !force regex-forward #l1
        !if $status
            -2 show-region
        !endif
    !endif
    !force -1 kill-region "y"
    insert-string &spr "%s file: %s\n\n" #l8 #l0
    beginning-of-buffer
    -1 buffer-mode "edit"
    1 buffer-mode "view"
    buffer-bind-create "boi" "return" "" zfile-loadfile
    set-variable :zftype #l8
    set-variable :zfcol &reg "/history" &spr "%s/%s-file-col" $platform #l8 "-1"
    set-variable :mouse-pick-1 zfile-mouse-pick-1
    set-variable :mouse-drop-1 zfile-mouse-drop-1
    set-variable #l9 &reg "/history" &spr "%s/%s-hilight" $platform :zftype ""
    !if &not &seq #l9 "" 
        set-variable $buffer-hilight &ind &cat ".hilight." #l9
    !endif
!emacro

define-macro zfile-setup
    set-variable #l0 @ml "zfile extension"
    set-variable #l1 @ml2 "zfile list command (%zb=zbase %zf=zfile)" &reg "/history" &spr "%s/%s-list" $platform #l0 ""
    set-registry "/history" &spr "%s/%s-list" $platform #l0 #l1
    set-variable #l1 @ml2 "zfile cut to search string" &reg "/history" &spr "%s/%s-cut-to" $platform #l0 ""
    set-registry "/history" &spr "%s/%s-cut-to" $platform #l0 #l1
    set-variable #l1 @ml2 "zfile list file column" &reg "/history" &spr "%s/%s-file-col" $platform #l0 ""
    set-registry "/history" &spr "%s/%s-file-col" $platform #l0 #l1
    set-variable #l1 @ml2 "zfile file end search string" &reg "/history" &spr "%s/%s-file-end" $platform #l0 ""
    set-registry "/history" &spr "%s/%s-file-end" $platform #l0 #l1
    set-variable #l1 @ml2 "zfile extract command (%zb=zbase %zf=zfile %fb=fbase)" &reg "/history" &spr "%s/%s-extract" $platform #l0 ""
    set-registry "/history" &spr "%s/%s-extract" $platform #l0 #l1
    set-variable #l1 @ml2 "zfile remove extract command (%fb=fbase)" &reg "/history" &spr "%s/%s-remove" $platform #l0 ""
    set-registry "/history" &spr "%s/%s-remove" $platform #l0 #l1
!emacro
