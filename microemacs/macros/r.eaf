 "" "<FOLD-> \CCcProgram Flow:\CCA"
for "for (i in \p) {\r\r}\P" "  for"
if "if (\p) {\r\r}\P" "  if"
elif "elseif (\p) {\r\r}\P"  "  elif"
else "else {\r\p}\r\P" "  else"
while "while (\p) {\r\r}\P" "  while"
fun "\p <- function(...) {\r\r}\P" "  fun"
main "main <- function(argv) {\r    \p\r\B}\rif (sys.nframe() == 0L && !interactive()) {\r   binname <- gsub(\"--file=\",\"\", grep(\"--file\", commandArgs(), value=TRUE)[1])\rmain(c(binname, commandArgs(trailingOnly=TRUE)))\r\B}\r\P" "  main"
openw "fout = file(\"\pfilename\",'w')\rcat(\"hello line\\n\",file=fout)\rclose(fout)\r\P"  "  openw" 
openr "fin  = file(\"\pfilename\", \"r\")\rwhile(length((line = readLines(fin,n=1)))>0) {\r    \pprint(line)\r}\rclose(fin)\P" "  openr"
whilef "while(length((line = readLines(fin, n=1)))>0) {\r    \pprint(line)\r}\r\P" "  whilef"
 "" ""
 "" "</FOLD><FOLD+> \CCcDBI:\CCA"
dbcon   "con <- dbConnect(RSQLite::SQLite(), dbname=\"\p\")\rdbDisconnect(con)\r\P" "  dbcon"
dbpg1 "con <- dbConnect(RPostgres::Postgres(), dbname=\"\p\")\rdbDisconnect(con)\P" "  dbpg1"
dbpg2 "con <- dbConnect(RPostgres::Postgres(), dbname=\"\p\", host=\"HOST\", port=5432,\r    user=\"USERNAME\", password=\"PASSWORD\")\rdbDisconnect(con)\r\P" "  dbpg2"
dblfd  "\pfields <- dbListFields(con,\"tname\")\r\P"         "  dblfd"
dbltb  "\ptables <- dbListTables(\pcon)\r\P"                 "  dbltb"
dbrtb  "\ptab <- dbReadTable(con,\"\ptname\")\P"             "  dbrtb"
dbwtb  "dbWriteTable(con,\"\ptname\",df)\r\P"                "  dbwtb"
dbgtq  "df <- dbGetQuery(con,\"\psql-code\")\r\P"            "  dbgtq"
dbgti  "info <- dbGetInfo(\p)\r\P"                           "  dbgti"
dbsql  "qry <- dbSendQuery(con,\"\psql-code\")\r\P"          "  dbsql"
dbfet  "\ptab <- dbFetch(qry)\P"                             "  dbfet"
dbwhi  "while (!dbHasCompleted(qry)) {\r  chunk <- dbFetch(qry, n = 1)\r\pprint(chunk)\r}\r\P" "  dbwhi"
dbclr  "dbClearResult(qry)\r"                                "  dbclr"
dbdco  "dbDisconnect(con)\r"                                 "  dbdco"
inrex  "RSQLite::initRegexp(con)\r"                          "  inrex"
inext  "RSQLite::initExtension(con)\r"                       "  inext"
 "" ""
 "" "</FOLD><FOLD+> \CCcDocumentation:\CCA"
rdoc "#' \pfunc title\r#'\r#'  `func` short explanation\r#'\r#' long explanation\r#'\r#' @param p description\r#' @return value explanation\r#' @keywords keyword\r#' @export\r#'\r#' @examples\r#' x = 1\r" "  rdoc"
mkhead "#' ---\r#' title: \p 0.0\r#' author: Dr. Detlef Groth, Schwielowsee, Germany\r#' documentclass: scrartcl\r#' geometry:\r#' - top=20mm\r#' - right=20mm\r#' - left=20mm\r#' - bottom=30mm\r#' ---\r\P" "  mkhead"
mkname "#'\r#' ## NAME\r#'\r#' **\p**  - ...\P" "  mkname"
mktoc "#'\r#' ## <a name='toc'></a>TABLE OF CONTENTS\r#' \r#'  - [SYNOPSIS](#synopsis)\r#'  - [DESCRIPTION](#description)\r#'  - [COMMAND](#command)\r#'  - [Methods](#methods)\r#'  - [EXAMPLE](#example)\r#'  - [INSTALLATION](#install)\r#'  - [SEE ALSO](#see)\r#'  - [CHANGES](#changes)\r#'  - [TODO](#todo)\r#'  - [AUTHOR](#authors)\r#'  - [LICENSE AND COPYRIGHT](#license)\r" "  mktoc"
mksyn "#' \r#' ## <a name='synopsis'>SYNOPSIS</a>\r#' \r#' Usage as package:\r#' \r#' ```\r#' ...\r#' ```\r#' \r#' Usage as command line application:\r#' \r#' ```\r#' Rscript \p ...\r#' ```\r\P" "  mksyn"
mkcmd "#' \r#' ## <a name='command'>COMMAND</a>\r#' \r#' **...\p**(*option(s)*\r#' \r#' > ...\r\P" "  mkdoc"
mkmeths "#' \r#' ## <a name='methods'>Methods</a>\r#' \r#' The \ppackage/command/class ... provides the following methods/functions\r\P" "  mkmeths"
mkmeth "#' \r#' <a name='\pfunName'> </a>\r#' **funName(options)**\r#'\r#' > title ...\r#'\r#' > description ...\r#'\r#' > Arguments:\r#'\r#' > - _x_ - this is a variable x, default: 1\r#'\r#' > Returns: value\r#'\r#' > Examples:\r#'\r#' > ```{r}\r#'\r#' > ```\r#'\r#' > See also: [func](#func)\r#'\r\P" "  mkmeth"
mkexp "#' \r#' ## <a name='example'>EXAMPLE</a>\r#' \r#' ```\r#' \p...\r#' ```\r\P" "  mkexp"
mkins "#' \r#' ## <a name='install'>INSTALLATION</a>\r#' \r#' The \p... package/class can be installed either as command line application or as a R library ...\P" "  mkins"
mksee "#' \r#' ## <a name='see'>SEE ALSO</a>\r#' #' - [\ptitle](https://wwwurl.org)\r\P" "  mksee"
mkchg "#' \r#' ## <a name='changes'>CHANGES</a>\r#' \r#' - 2020-\pxx-xx Relase 0.1\r\P" "  mkchg"
mktodo "#' \r#' ## <a name='todo'>TODO</a>\r#' \r#' - " "  mktodo"
mkaut "#' \r#' ## <a name='authors'>AUTHOR(s)</a>\r#' \r#' The **\p...** package was written by Dr. Detlef Groth, Schwielowsee, Germany.\r\P" "  mkaut"
 "" ""
 "" "</FOLD><FOLD+> \CCctcltk:\CCA"
tktop "tt\p=tktoplevel()\P" "  tktop"
tvstyle "ttk::style configure Treeview.Heading -padding [list 3 3 10 3]\r" "  tvstyle"
tvtab "tvtab=ttktreeview(\p,show=\"headings\")\r\P" "  tvtab"
tvtree "tvtree=ttktreeview(\p,show=\"tree headings\")" "  tvtree"
tkmbox "tkmessageBox(title=\"Title!\",icon=\"error\", message = \"Error: ...\",type=\"ok\")" "  tkmbox"
tkmbyn "ans=tclvalue(tkmessageBox(title=\"Question!\",icon=\"question\", message = \"Do you ...\",type=\"yesnocancel\"))" "  tkmbyn"
 "" "</FOLD>"
