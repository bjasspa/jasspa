; -!- emf -!-
;
; Copyright (C) 1997-2024 JASSPA (www.jasspa.com)
;
; This is part of JASSPA's MicroEmacs, see the LICENSE file for licensing and
; copying information.
;
; Synopsis: JavaScript Object Notation file hook.
; Authors:  Steven Phillips
;
; Notes:    Basic hilight and indentation rules, hook
;           also has a json-parse while load json data
;           into a given ME registry node
;
; To use json-parse move cursor to the start of the json data, this should be a value (such as a '[' for array, '{'
; for object etc) then execute json-parse giving it the path to the required reg node. Cursor is moved to the end of
; the value or point of first error.
;
; First char of reg value is the type rest is either array size, no. name-value pairs in object or the value.
;
define-macro fhook-json
  set-variable $buffer-mask "luh1"
  @# buffer-init "json"
  buffer-init-hooks
!emacro

; buffer-init variables
set-variable .fhook-json.name "JSON"
set-variable .fhook-json.setup &reg "/history/fhook/json" "ghiop"
set-variable .fhook-json.setup-mask "adeghikmoptu"
set-variable .fhook-json.command-flag  "|th|th|"
set-variable .fhook-json.command-name  "|json-parse||"
set-variable .fhook-json.command-nbind "|||"
set-variable .fhook-json.command-kbind "|||"
set-variable .fhook-json.command-desc  "|JSON \Hparse||"

!if &and &sin "h" .fhook-json.setup &band .hilight.flags 0x02
  !if &not &exist .hilight.json
    set-variable .hilight.json &pinc .hilight.next 1
  !endif
  0 hilight .hilight.json 0                $global-scheme
  hilight .hilight.json 4 "\"" "\"" "\\"   .scheme.string
  hilight .hilight.json 1 "\"\\w+\"\\}:"   .scheme.keyword
  hilight .hilight.json 1 "\"\\w+\" +\\}:" .scheme.keyword
  hilight .hilight.json 1 "false"          .scheme.constant
  hilight .hilight.json 1 "null"           .scheme.constant
  hilight .hilight.json 1 "true"           .scheme.constant
  !if &band .hilight.flags 0x08
    ; hilight constants, e.g. numbers
    hilight .hilight.json 1 "\\d+"         .scheme.constant
    hilight .hilight.json 1 "-\\d+"        .scheme.constant
    hilight .hilight.json 1 "\\d+\\.\\d+"  .scheme.constant
    hilight .hilight.json 1 "-\\d+\\.\\d+" .scheme.constant
  !endif
!endif
!if &sin "d" .fhook-json.setup
  0 indent  .hilight.json 0 10
  indent .hilight.json n "{" t
  indent .hilight.json o "}" -t
  indent .hilight.json n "\\[" t
  indent .hilight.json o "]" -t
  indent .hilight.json e "\"" "\"" "\\"
!endif

buffer-init-fhook "json"

0 define-macro json-parse-skip
  !repeat
    !iif &seq @wc ""  -8 ml-write &spr "[JSON parse error: Missing %s]" @1
    !if $window-col
    !elif &ban $line-flags 16
      !force -1 search-buffer "me" "^\\([^\"\n]\\|\"\\([^\"\n\\\\]\\|\\\\.\\)*\"\\)*\\([]{},:\"]\\)"
      !iif &not $status  -8 ml-write "[JSON parse error: Unexpected long line]"
      !if &seq @s3 "\""
        backward-char
        insert-newline
        forward-line
        !force -1 search-buffer "me" "^\\([^\"\n\\\\]\\|\\\\.\\)*\""
        !iif &not $status  -8 ml-write "[JSON parse error: Value too long, cannot find end]"
        set-variable #l0 $line-flags
        insert-newline
        !iif &band #l0 16  set-variable $line-flags &bor $line-flags 16
        backward-line
        beginning-of-line
        !force backward-delete-char
        !iif &not $status  -8 ml-write "[JSON parse error: Value too long, cannot join line]"
        set-variable $line-flags &band $line-flags &bnot 16
        backward-line
      !endif
      beginning-of-line
    !endif
    !iif &not &sin @wc "\n\t " !return
    forward-char
  !done
!emacro

0 define-macro json-parse-value
  json-parse-skip "value"
  set-variable #l0 @1
  set-mark
  !if &seq @wc "\""
    forward-char
    !force search-buffer "me" "\\([^\"\\\\]\\|\\\\.\\)*\""
    !iif &not $status  -8 ml-write "[JSON parse error: String format error]"
    backward-char
    copy-region
    set-registry #l0 @y
    -1 yank
    forward-char
    !return
  !elif &seq @wc "["
    forward-char
    set-variable #l1 0
    set-variable #l9 0
    !repeat
      3 json-parse-value &spr "%s/%s" #l0 #l1
      !iif &equ #l9 1  -8 ml-write "[JSON parse error: Expected value before array ',']"
      !iif &equ #l9 2  !break
      set-variable #l1 &add #l1 1
      3 json-parse-value &spr "%s/%s" #l0 #l1
      !iif &not #l9  -8 ml-write "[JSON parse error: Expected array ',' or ']']"
      !iif &equ #l9 2  !break
      set-variable #l2 1
      set-variable #l9 0
    !done
    set-registry #l0 &cat "[" #l1
    !return
  !elif &seq @wc "{"
    forward-char
    set-variable #l1 0
    set-variable #l9 0
    !repeat
      json-parse-pair #l0
      !iif &equ #l9 2  !break
      !iif &equ #l9 1  -8 ml-write "[JSON parse error: Expected name-value pair before ',' separator]"
      set-variable #l1 &add #l1 1
      json-parse-pair #l0
      !iif &equ #l9 2  !break
      !iif &not #l9  -8 ml-write "[JSON parse error: Expected ',' separator between name-value pairs]"
    !done
    set-registry #l0 &cat "{" #l1
    !return
  !elif &sin @wc "-0123456789."
    !repeat
      forward-char
    !until &not &sin @wc "-0123456789.eE"
    copy-region
    set-registry #l0 &cat "#" @y
    -1 yank
    !return
  !elif &set #l1 &sin @wc "fnt"
    set-variable #l2 &lget "|false|null|true|" #l1
    set-variable #l3 0
    !repeat
      forward-char
      !if &seq "" &set #l4 &mid #l2 &inc #l3 1 1
        set-registry #l0 &lget "|b0|n|b1|" #l1
        !return
      !endif
    !until &not &seq @wc #l4
  !elif &and &band @# 2 &sin @wc ",]"
    set-variable #p9 &sin @wc ",]"
    forward-char
    !return
  !endif
  exchange-point-and-mark
  ml-write &spr "[JSON parse error: Unexpected value "%s..."]" &lef #l1 5
  !abort
!emacro

0 define-macro json-parse-pair
  json-parse-skip "name or '}'"
  !if &set #p9 &sin @wc ",}"
    forward-char
    !return
  !endif
  !iif &not &seq @wc "\""  -8 ml-write "[JSON parse error: Expectd value name]"
  set-mark
  forward-char
  !force search-buffer "me" "\\([^\"\\\\]\\|\\\\.\\)*\""
  !iif &not $status  -8 ml-write "[JSON parse error: Name string format error]"
  copy-region
  execute-line &cat "set-variable #l1 " @y
  -1 yank
  !while &sin @wc "\n\t "
    !iif &seq @wc ""  -8 ml-write "[JSON parse error: Missing name or '}']"
    forward-char
  !done
  !iif &not &seq @wc ":"  -8 ml-write "[JSON parse error: Expectd name value ':' separator]"
  forward-char
  set-variable #l0 &spr "%s/%s" @1 #l1
  json-parse-value #l0
!emacro

define-macro json-parse
  !force set-variable #l0 @1
  !iif &not $status  set-variable #l0 @ml10 "Registry entry" "/json/test"
  !force delete-registry #l0
  json-parse-value #l0
!emacro
