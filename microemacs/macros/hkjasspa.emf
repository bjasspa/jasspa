;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;  Created By    : Jon Green
;  Created       : Mon Sep 7 22:47:22 1998
;  Last Modified : <010307.1148>
;
;  Description   : Quick hack for the faq lists !!
;
;  Notes
;
;  History
;
;  Copyright (c) 1998 Jon Green.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
!if &band .hilight.flags 0x02
    !if &not &exist .hilight.jbug
        set-variable .hilight.jbug &pinc .hilight.next 1
    !endif
    ; Buglist hilighting
    0 hilight  .hilight.jbug 1                   $global-scheme
    hilight .hilight.jbug 0x102 "_"              .scheme.header
    hilight .hilight.jbug 0x20  "author:"        .scheme.keyword
    hilight .hilight.jbug 0x20  "created:"       .scheme.keyword
    hilight .hilight.jbug 0x20  "bug:"           .scheme.keyword
    hilight .hilight.jbug 0x20  "date:"          .scheme.keyword
    hilight .hilight.jbug 0x20  "report by:"     .scheme.keyword
    hilight .hilight.jbug 0x20  "release:"       .scheme.keyword
    hilight .hilight.jbug 0x20  "systems:"       .scheme.keyword
    hilight .hilight.jbug 0x20  "status:"        .scheme.keyword
    hilight .hilight.jbug 0x20  "description:"   .scheme.keyword
    hilight .hilight.jbug 0x20  "fixed on:"      .scheme.keyword
    hilight .hilight.jbug 0x20  "fixed by:"      .scheme.keyword
    hilight .hilight.jbug 0x20  "fix:"           .scheme.keyword
    hilight .hilight.jbug 0x20  "comment on:"    .scheme.keyword
    hilight .hilight.jbug 0x20  "comment by:"    .scheme.keyword
    hilight .hilight.jbug 0x20  "comment:"       .scheme.keyword
    hilight .hilight.jbug 0x22  ">"              .scheme.variable
!endif

define-macro jasspa-bug-add-new
    !if &seq &set #l0 &find "buglist" ".txt" "ERROR"
        ml-write "[Buglist not on-line]"
        !abort
    !endif
    find-file #l0
    beginning-of-buffer
    search-forward "^Bug:"
    set-variable #l0 &rig @wl 4
    beginning-of-line
    2 backward-line
    set-variable #l1 $time
    set-variable #l1 &spr "%s/%02d/%02d" &lef #l1 4 &mid #l1 7 2 &mid #l1 9 2
    insert-string &spr "%n\n\nBug:        %d\nDate:       %s\nReport By:  \nSystems:    \nStatus:     Open.\n\nDescription:\n\n    \n" 78 "_" &add #l0 1 #l1
    7 backward-line
    end-of-line
!emacro

define-macro jasspa-bug-fixed
    !if &not &seq &lef $buffer-bname 11 "buglist.txt"
        ml-write "[Not in buglist.txt]"
        !abort
    !endif
    search-backward "^_____"
    search-forward  "^Status:"
    forward-word
    set-mark
    backward-word
    kill-region
    -1 yank
    insert-string "Closed"
    search-forward  "^_____"
    beginning-of-line
    set-variable #l0 &reg "/history" "user-name" ""
    set-variable #l1 $time
    set-variable #l1 &spr "%s/%02d/%02d" &lef #l1 4 &mid #l1 7 2 &mid #l1 9 2
    insert-string &spr "Fixed On:   %s\nFixed By:   %s\nFix:\n\n    \n" #l1 #l0
    backward-line
    end-of-line
!emacro

define-macro ehf-doc-test
    set-variable #l0 @ml01 "Ehf file"
    find-file #l0
    set-variable #l2 $buffer-bname
    set-variable #l1 @ml01 "evar.def source file"
    find-file #l1
    set-variable #l3 $buffer-bname
    !force delete-buffer "*ehf-result*"
    find-buffer "*ehf-result*"
    insert-string "Undocumented Commands\n\n"
    !force delete-buffer "*ehf-tmp*"
    delete-other-windows
    ml-write "[Extracting tags from ehf file]"
    find-buffer #l2
    beginning-of-buffer
    !force regex-forward "^!.[2-5]"
    !while $status
        beginning-of-line
        set-mark
        forward-line
        copy-region
        find-buffer "*ehf-tmp*"
        yank
        find-buffer #l2
        !force regex-forward "^!.[2-5]"
    !done
    ml-write "[Processing Commands]"
    find-buffer "*ehf-tmp*"
    set-variable $command-names ".*"
    !while &not &seq &set #l4 $command-names ""
        beginning-of-buffer
        !force regex-forward &spr "^!.[23] %s$" #l4
        !if $status
            beginning-of-line
            kill-line
        !else
            find-buffer "*ehf-result*"
            insert-string &spr "    %s\n" #l4
            find-buffer "*ehf-tmp*"
        !endif
    !done
    find-buffer "*ehf-result*"
    insert-string "\nDead Commands\n\n"
    find-buffer "*ehf-tmp*"
    beginning-of-buffer
    !force regex-forward "^!.[23] "
    !while $status
        beginning-of-line
        4 forward-delete-char
        -1 yank
        kill-line
        find-buffer "*ehf-result*"
        insert-string &spr "    %s" @y
        find-buffer "*ehf-tmp*"
        !force regex-forward "^!.[23] "
    !done
    ml-write "[Processing Modes]"
    find-buffer "*ehf-result*"
    insert-string "\nUndocumented Modes\n\n"
    find-buffer "*ehf-tmp*"
    set-variable $mode-names ".*"
    !while &not &seq &set #l4 $mode-names ""
        beginning-of-buffer
        !force regex-forward &spr "^!.2m%s$" #l4
        !if $status
            beginning-of-line
            kill-line
        !else
            find-buffer "*ehf-result*"
            insert-string &spr "    %s\n" #l4
            find-buffer "*ehf-tmp*"
        !endif
    !done
    find-buffer "*ehf-result*"
    insert-string "\nDead Modes\n\n"
    find-buffer "*ehf-tmp*"
    beginning-of-buffer
    !force regex-forward "^!.2m"
    !while $status
        beginning-of-line
        4 forward-delete-char
        -1 yank
        kill-line
        find-buffer "*ehf-result*"
        insert-string &spr "    %s" @y
        find-buffer "*ehf-tmp*"
        !force regex-forward "^!.2m"
    !done
    ml-write "[Processing Variables]"
    find-buffer "*ehf-result*"
    insert-string "\nUndocumented Variables\n\n"
    find-buffer "*ehf-tmp*"
    set-variable $variable-names ".*"
    !while &not &seq &set #l4 $variable-names ""
        beginning-of-buffer
        !force regex-forward &spr "^!.5 \\%s$" #l4
        !if $status
            beginning-of-line
            kill-line
        !else
            find-buffer "*ehf-result*"
            insert-string &spr "    %s\n" #l4
            find-buffer "*ehf-tmp*"
        !endif
    !done
    find-buffer "*ehf-result*"
    insert-string "\nDead Variables\n\n"
    find-buffer "*ehf-tmp*"
    beginning-of-buffer
    !force regex-forward "^!.5 "
    !while $status
        beginning-of-line
        4 forward-delete-char
        -1 yank
        kill-line
        find-buffer "*ehf-result*"
        insert-string &spr "    %s" @y
        find-buffer "*ehf-tmp*"
        !force regex-forward "^!.5 "
    !done
    ;DEFFUN (UFXSEQ,    "xse", DYNAMIC)
    ml-write "[Processing Functions]"
    find-buffer "*ehf-result*"
    insert-string "\nUndocumented Functions\n\n"
    find-buffer #l3
    beginning-of-buffer
    !force regex-forward "DEFFUN"
    !while $status
        !force regex-forward "\""
        set-variable #l4 $window-col
        !force regex-forward "\""
        backward-char
        set-variable #l4 &mid @wl #l4 &sub $window-col #l4
        find-buffer "*ehf-tmp*"
        beginning-of-buffer
        !force regex-forward &spr "^!.4 &%s" #l4
        !if $status
            beginning-of-line
            kill-line
        !else
            find-buffer "*ehf-result*"
            insert-string &spr "    &%s\n" #l4
        !endif
        find-buffer #l3
        !force regex-forward "DEFFUN"
    !done
    find-buffer "*ehf-result*"
    insert-string "\nDead Functions\n\n"
    find-buffer "*ehf-tmp*"
    beginning-of-buffer
    !force regex-forward "^!.4 &"
    !while $status
        beginning-of-line
        4 forward-delete-char
        -1 yank
        kill-line
        find-buffer "*ehf-result*"
        insert-string &spr "    %s" @y
        find-buffer "*ehf-tmp*"
        !force regex-forward "^!.4 &"
    !done
    ;DEFDER (DRABORT,   "abo", 0x00)
    ml-write "[Processing Directives]"
    find-buffer "*ehf-result*"
    insert-string "\nUndocumented Functions\n\n"
    find-buffer #l3
    beginning-of-buffer
    !force regex-forward "DEFDER"
    !while $status
        !force regex-forward "\""
        set-variable #l4 $window-col
        !force regex-forward "\""
        backward-char
        set-variable #l4 &mid @wl #l4 &sub $window-col #l4
        find-buffer "*ehf-tmp*"
        beginning-of-buffer
        !force regex-forward &spr "^!.4 !%s" #l4
        !if $status
            beginning-of-line
            kill-line
        !else
            find-buffer "*ehf-result*"
            insert-string &spr "    !%s\n" #l4
        !endif
        find-buffer #l3
        !force regex-forward "DEFDER"
    !done
    find-buffer "*ehf-result*"
    insert-string "\nDead Directives\n\n"
    find-buffer "*ehf-tmp*"
    beginning-of-buffer
    !force regex-forward "^!.4 !"
    !while $status
        beginning-of-line
        4 forward-delete-char
        -1 yank
        kill-line
        find-buffer "*ehf-result*"
        insert-string &spr "    %s" @y
        find-buffer "*ehf-tmp*"
        !force regex-forward "^!.4 !"
    !done
    ml-write "[Processing Interactive Variables]"
    find-buffer "*ehf-result*"
    insert-string "\nInteractive Variable List\n\n"
    find-buffer "*ehf-tmp*"
    beginning-of-buffer
    !force regex-forward "^!.4 @"
    !while $status
        beginning-of-line
        4 forward-delete-char
        -1 yank
        kill-line
        find-buffer "*ehf-result*"
        insert-string &spr "    %s" @y
        find-buffer "*ehf-tmp*"
        !force regex-forward "^!.4 @"
    !done
    ml-write "[Processing Unknown]"
    find-buffer "*ehf-result*"
    insert-string "\nUnknown List\n\n"
    find-buffer "*ehf-tmp*"
    beginning-of-buffer
    !force regex-forward "^!"
    !while $status
        beginning-of-line
        2 forward-delete-char
        -1 yank
        kill-line
        find-buffer "*ehf-result*"
        insert-string &spr "    %s" @y
        find-buffer "*ehf-tmp*"
        !force regex-forward "^!"
    !done
    delete-buffer "*ehf-tmp*"
    find-buffer "*ehf-result*"
    beginning-of-buffer
!emacro
; Forward reference the fhook-doc as we are not strictly hooking
define-macro-file hkdoc fhook-doc
; Hook for the JASSPA faq list.
define-macro fhook-jasspa
    !force -1 search-forward "jasspa:"
    ; ZZZZZ
    !if &band .hilight.flags 0x02
        set-variable $buffer-hilight .hilight.jbug
    !endif
    beginning-of-line
    ; Call for the document bindings - we have only set up the 
    ; hilighting here.
    fhook-doc
    ; execute user extensions if enabled
    !if &exist my-fhook-jasspa
        my-fhook-jasspa
    !endif
!emacro

ml-write "[Jasspa file hook loaded]"

; load in user extensions if found
!force execute-file "myjasspa"

