; -!- emf -!-
; This is part of the JASSPA MicroEmacs macro files
; Copyright (C) 1998-2009 JASSPA (www.jasspa.com)
; See the file me.emf for copying and conditions.
;
; Created:     Thu May 7 1998
; Synopsis:    Spelling dictionary creation and maintenance routines.
; Authors:     Steven Phillips
;
; Get a list of charsets
0 execute-file "charset"

define-macro insert-word-list
  set-variable $find-words ".*"
  set-variable #l2 $window-line
  beginning-of-line
  set-mark
  !while &not &seq &set #l1 $find-words ""
    insert-string #l1
    insert-newline
  !done
  !if @#
    sort-lines
    uniq
  !endif
  set-variable #l0 &sub $window-line #l2
  goto-line #l2
  ml-write &spr "[All done - %d %swords inserted]" #l0 &con @# "unique " ""
!emacro

define-macro spell-add-word
  !if @?
    ; add the spell extended chars
    set-variable $buffer-mask &cat $buffer-mask "s"
    !force backward-char
    !while &pdec @# 1
      !force forward-word
      !if &not $status
        set-variable $buffer-mask &rep $buffer-mask "s" ""
        !abort
      !endif
      !force backward-word
      set-variable #l0 $window-col
      forward-word
      set-variable #l1 &mid @wl #l0 &sub $window-col #l0
      !if &seq @wc ">"
        forward-char
        set-variable #l2 &rig @wl $window-col
        end-of-line
        0x15 spell #l1 #l2
      !else
        !if &seq @wc "/"
          forward-char
          set-variable #l2 &trb &rig @wl $window-col
          end-of-line
        !else
          set-variable #l2 ""
        !endif
        0x05 spell #l1 #l2
      !endif
    !done
    set-variable $buffer-mask &rep $buffer-mask "s" ""
  !else
    !nma 0x05 spell
  !endif
!emacro

define-macro spell-conv-word-buffer
  spell-conv-buffer-chars
  1000000 spell-add-word
!emacro

define-macro edit-dictionary
  set-variable #l0 @ml04 "Dictionary to edit"
  set-variable #l1 &spr "*%s*" &rig #l0 &rsin "/" #l0
  !force 0 find-buffer #l1
  !if $status
    !return
  !endif
  find-buffer #l1
  -1 add-dictionary #l0
  beginning-of-buffer
  buffer-bind-create "b" "C-c C-c" "" restore-dictionary
  ml-write "Use C-c C-c to restore the dictionary"
!emacro

define-macro restore-dictionary
  beginning-of-buffer
  !if &seq &lef @wl 12 "Dictionary: "
    set-variable #l3 &rig @wl 12
  !else
    2 ml-write "Dictionary ID string lost, Aborting!"
    !abort
  !endif
  !force 0 delete-dictionary #l3
  0 add-dictionary #l3
  end-of-buffer
  set-variable #l0 $window-line
  beginning-of-buffer
  forward-line
  !force #l0 spell-add-word
  beginning-of-buffer
  ml-write "All Done!!"
!emacro

; Run through a list of words checking ME spell returns (O)kay
; if n&2 then check all words are incorrect (E)
define-macro spell-check-list
  set-variable #l1 0
  set-variable #l2 0
  set-variable #l3 0
  !while &not &seq @wl ""
    spell @wl
    !if &not &seq &rig &set #l4 $result 1 @wl
      !if &band 2 @#
        ml-write "[Wrong word returned]"
        !abort
      !endif
      !iif &not #l1  set-variable #l1 $window-line
      set-variable #l3 &add #l3 1
    !endif
    !if &seq &lef $result 1 "O"
      !if &band @# 2
        !if &band 1 @#
          ml-write "[Word evaluated as correct]"
          !abort
        !endif
        !iif &not #l1  set-variable #l1 $window-line
        set-variable #l2 &add #l2 1
      !endif
    !elif &not &band @# 2
      !if &band 1 @#
        ml-write "[Word evaluated as wrong]"
        !abort
      !endif
      !iif &not #l1  set-variable #l1 $window-line
      set-variable #l2 &add #l2 1
    !endif
    forward-line
  !done
  !iif #l1  set-variable $window-line #l1
  ml-write &spr "[Check complete - %d false-%s, %d bad word returns]" #l2 &con &band @# 1 "wrong" "good" #l3
!emacro

; run through a list of correct words checking the guess list includes the word
; if n&2 then also check all words in guess list are correct
define-macro spell-check-guess
  set-variable #l0 0
  !while &not &seq &set #l2 &trb @wl ""
    33 spell #l2
    set-variable #l3 $result
    !if &lfin #l3 #l2
      !if &band @# 2
        set-variable #l4 0
        !while &len &set #l5 &lget #l3 &inc #l4 1
          1 spell #l5
          !if &seq "O" &lef $result 1
          !elif &sin " " #l5
          !elif &not &sin "-" #l5
            set-variable #g0 #l3
            ml-write &spr "[Bad word returned in guess list: %s]" #l5
            !abort
          !endif
        !done
      !endif
    !elif &band @# 1
      set-variable #g0 #l3
      ml-write &spr "[Word missing, best guess: %s]" &lget #l3 1
      !abort
    !elif &not &pinc #l0 1
      set-variable #g0 #l3
      set-variable #l1 $window-line
    !endif
    forward-line
  !done
  !if #l0
    goto-line #l1
    ml-write &spr "[%d missing words, first best guess: %s]" #l0 &lget #g0 1
  !else
    ml-write "[No missing guess words]"
  !endif
!emacro

define-macro ispell-convert
  !force set-variable .sl @1
  !iif &not $status  set-variable .sl @ml09 "Language" .spell.lang-name
  !force set-variable #l0 @2
  !iif &not $status  set-variable #l0 @ml01 "ispell file"
  !if &not &seq "R" &stat t &set #l0 &stat a #l0 
    ml-write &spr "[Error: Unexpected file type - %s]" #l0
    !abort
  !elif &seq &rig #l0 -4 ".dic"
    set-variable #l0 &cat &lef &set #l1 #l0 -3 "aff"
  !elif &seq &rig #l0 -4 ".aff"
    set-variable #l1 &cat &lef #l0 -3 "dic"
  !else
    ml-write &spr "[Error: Unexpected file extension - %s]" #l0
    !abort
  !endif
  set-variable #l8 &lef #l0 &rsin "/" #l0
  delete-other-windows
  set-variable .uc &reg &spr "/history/%s/char-set" %platform "iso8859-1"
  set-variable .ul &reg "/history/language" ""
  !if &seq .sl "test"
    set-variable .mc "test"
    set-variable #l9 &slo &rep &rep &mid #l0 &len #l8 -4 "-" "" "_" ""
  !else
    !if &not &seq .ul .sl
      set-registry "/history/language" .sl
      execute-file "language"
    !endif
    ; get the best code page for the language
    set-variable .mc &lget .change-font.cs-id &sin &lef .change-font.ln-type 1 .change-font.cs-type
    set-variable #l9 .spell.language
    set-registry "/history/language" .ul
    execute-file "language"
  !endif
  !if &band 2 @#
    !force 0 delete-buffer "*isp-aff"
    !force 0 delete-buffer "*isp-dic"
  !endif
  find-buffer "*isp-aff"
  !if &not &seq $buffer-fname #l0
    !force 0 delete-buffer "*isp-aff"
    find-buffer "*isp-aff"
    insert-file #l0
    set-variable $buffer-fname #l0
  !endif
  beginning-of-buffer
  -1 buffer-mode "edit"
  !force search-buffer "me" "[\x01\x02]"
  !if $status
    ml-write "[ERROR: aff file contains control chars \x01 or \x02 which are required for convertion]"
    !abort
  !endif
  !force search-buffer "me" "^ *SET +\\([-\\m]+\\)"
  !if &not $status
    ml-write "[Warning: Failed to find SET line - character encoding may be wrong]"
    set-variable .sc .mc
  !elif &seq &set .sc &slo @s1 "utf-8"
    set-variable .sc "utf8"
  !elif &not &lfin .change-font.cs-id .sc
    ml-write &spr "[ERROR: aff uses unknown/unsupported character set - %s]" .sc
    !abort
  !elif &seq .sl "test"
    set-variable .mc .sc
  !endif
  beginning-of-buffer
  !if &not &seq &lef @wl 3 "\xef\xbb\xbf"
  !elif &seq .sc "utf8"
    3 forward-delete-char
  !else
    ml-write "[ERROR: AFF charset not SET as utf-8 but aff has utf-8 signature - check encoding]"
    !abort
  !endif
  !if &not &seq .sc .mc
    !if &seq .mc "test"
      ml-write &spr "[ERROR: Must convert test files to correct charset first - %s %s]" .sc .mc
      !abort
    !endif
    4 change-buffer-charset .sc .mc
    !if &lget .change-buffer-charset.result 1
      beginning-of-buffer
      !force search-buffer "me" &spr "^[ \\t]*[PS]FX[ \\t].*\CG"
      !if $status
        !if &bmo "edit"
          set-variable #l6 $window-line
          undo
          set-variable $window-line #l6
        !endif
        beginning-of-line
        ml-write "[Error: Unconvertable unicode characters in rules must be fixed]"
        !abort
      !endif
    !endif
  !endif
  find-buffer "*isp-dic"
  !if &not &seq $buffer-fname #l1
    !force 0 delete-buffer "*isp-dic"
    find-buffer "*isp-dic"
    insert-file #l1
    set-variable $buffer-fname #l1
  !endif
  beginning-of-buffer
  !force search-buffer "me" "[\x01\x02]"
  !if $status
    ml-write "[ERROR: dic file contains control chars \x01 or \x02 which are required for convertion]"
    !abort
  !endif
  !if &not &seq &lef @wl 3 "\xef\xbb\xbf"
  !elif &seq .sc "utf8"
    3 forward-delete-char
  !else
    ml-write "[ERROR: Charset not SET as utf-8 but dic has utf-8 signature - check encoding]"
    !abort
  !endif
  ; First of all remove all Morphological analysis as these can contain unconvertable chars
  replace-string "[ \t].*" ""
  beginning-of-buffer
  !if &not &seq .sc .mc
    -1 buffer-mode "edit"
    4 change-buffer-charset .sc .mc
    !if &lget .change-buffer-charset.result 1
      beginning-of-buffer
      !force search-buffer "Me" "\CG"
      !if $status
        recenter
        !force !force set-variable #l2 @mc5 "Dic file contains unconvertable unicode chars - remove words (?/y/n) ? " "nNyY" "(Y)es, (N)o ? "
        !if &not &iseq #l2 "y"
          set-variable #l6 $window-line
          undo
          set-variable $window-line #l6
          ml-write "[Abort - words containing unconvertable chars must be fixed first]"
          !abort
        !endif
        !repeat
          beginning-of-line
          set-mark
          forward-line
          -1 kill-region
          backward-char
          !force search-buffer "Me" "\CG"
        !until &not $status
      !endif
    !endif
  !endif
  beginning-of-buffer
  !force 0 delete-buffer "*isp-tmp"
  find-buffer "*isp-aff"
  beginning-of-buffer
  !force search-buffer "me" "^[ \\t]*\\(PFX\\|SFX\\|CIRCUMFIX\\|COMPOUNDBEGIN\\|COMPOUNDEND\\|COMPOUNDMIDDLE\\|COMPOUNDPERMITFLAG\\|FORBIDDENWORD\\|KEEPCASE\\|LEMMA_PRESENT\\|NEEDAFFIX\\|NOSUGGEST\\|ONLYINCOMPOUND\\|PSEUDOROOT\\)[ \\t]+\\(\\S+\\)\\s"
  !if &not $status
    ml-write "[Abort - no SFX or PFX rules found in aff file]"
    !abort
  !elif &equ &len @s2 1
    !force search-buffer "me" "^[ \\t]*\\(PFX\\|SFX\\|CIRCUMFIX\\|COMPOUNDBEGIN\\|COMPOUNDEND\\|COMPOUNDMIDDLE\\|COMPOUNDPERMITFLAG\\|FORBIDDENWORD\\|KEEPCASE\\|LEMMA_PRESENT\\|NEEDAFFIX\\|NOSUGGEST\\|ONLYINCOMPOUND\\|PSEUDOROOT\\)[ \\t]+\\S\\S"
    !if $status
      ml-write "[Abort - affix rule flag length inconsistent - 1 to many]"
      !abort
    !endif
  !elif &equ &len @s2 2
    !force search-buffer "me" "^[ \\t]*\\(PFX\\|SFX\\|CIRCUMFIX\\|COMPOUNDBEGIN\\|COMPOUNDEND\\|COMPOUNDMIDDLE\\|COMPOUNDPERMITFLAG\\|FORBIDDENWORD\\|KEEPCASE\\|LEMMA_PRESENT\\|NEEDAFFIX\\|NOSUGGEST\\|ONLYINCOMPOUND\\|PSEUDOROOT\\)[ \\t]+\\S\\s"
    !if $status
      ml-write "[Abort - affix rule flag length inconsistent - 2 to 1]"
      !abort
    !endif
    !force search-buffer "me" "^[ \\t]*\\(PFX\\|SFX\\|CIRCUMFIX\\|COMPOUNDBEGIN\\|COMPOUNDEND\\|COMPOUNDMIDDLE\\|COMPOUNDPERMITFLAG\\|FORBIDDENWORD\\|KEEPCASE\\|LEMMA_PRESENT\\|NEEDAFFIX\\|NOSUGGEST\\|ONLYINCOMPOUND\\|PSEUDOROOT\\)[ \\t]+\\S\\S\\S"
    !if $status
      ml-write "[Abort - affix rule flag length inconsistent - 2 to many]"
      !abort
    !endif
    set-variable #l3 32
    beginning-of-buffer
    !repeat
      !force search-buffer "me" "^[ \\t]*\\(PFX\\|SFX\\|CIRCUMFIX\\|COMPOUNDBEGIN\\|COMPOUNDEND\\|COMPOUNDMIDDLE\\|COMPOUNDPERMITFLAG\\|FORBIDDENWORD\\|KEEPCASE\\|LEMMA_PRESENT\\|NEEDAFFIX\\|NOSUGGEST\\|ONLYINCOMPOUND\\|PSEUDOROOT\\)[ \\t]+\\(\\S[^ \t\n\x01]\\)\\s"
      !iif &not $status  !break
      set-variable #l1 @s2
      set-variable #l1 &xrep #l1 "[\\\\[*+.?^$]" "\\\\\\0"
      backward-char
      set-variable #l2 $window-line
      !if &gre &inc #l3 1 255
        ml-write "[Abort - Too many affix rule flags used - max is 235]"
        !abort
      !endif
      !if &equ #l3 92
        set-variable #l4 "\\\\\x01"
      !else
        set-variable #l4 &cat &itoa #l3 "\x01"
      !endif
      backward-line
      replace-string &cat "^\\([ \t]*\\(PFX\\|SFX\\|CIRCUMFIX\\|COMPOUNDBEGIN\\|COMPOUNDEND\\|COMPOUNDMIDDLE\\|COMPOUNDPERMITFLAG\\|FORBIDDENWORD\\|KEEPCASE\\|LEMMA_PRESENT\\|NEEDAFFIX\\|NOSUGGEST\\|ONLYINCOMPOUND\\|PSEUDOROOT\\)[ \t]+\\)" #l1 &cat "\\1" #l4
      beginning-of-buffer
      replace-string &cat "^\\([ \t]*[PS]FX[ \t]+.*/\\([^ \t\n][^ \t\n]\\)*\\)" #l1 &cat "\\1" #l4
      find-buffer "*isp-dic"
      beginning-of-buffer
      replace-string &cat "\\(/\\([^ \t\n][^ \t\n]\\)*\\)" #l1 &cat "\\1" #l4
      find-buffer "*isp-aff"
      goto-line #l2
      end-of-line
    !done
    beginning-of-buffer
    replace-string "\x01" ""
    find-buffer "*isp-dic"
    beginning-of-buffer
    replace-string "\x01" ""
    find-buffer "*isp-aff"
  !else
    ml-write "[Abort - affix rule flags of length greater than 2 are not supported]"
    !abort
  !endif
  set-variable #l6 ""
  beginning-of-buffer
  set-variable .ns "\CH"
  !force search-buffer "me" "^[ \\t]*NOSUGGEST[ \\t]+\\(\\S+\\)"
  !if &not $status
  !elif &gre &len &set .ns @s1 1 
    ml-write "[Abort - NOSUGGEST has more than one flag letter]"
    !abort
  !endif
  beginning-of-buffer
  set-variable .fw "\CH"
  !force search-buffer "me" "^[ \\t]*FORBIDDENWORD[ \\t]+\\(\\S+\\)"
  !if &not $status
  !elif &gre &len &set .fw @s1 1 
    ml-write "[Abort - FORBIDDENWORD has more than one flag letter]"
    !abort
  !endif
  beginning-of-buffer
  !repeat
    !force search-buffer "me" "^[ \\t]*\\([PS]\\)FX[ \\t]+\\(\\S+\\)[ \\t]+\\([YN]\\)[ \\t]+\\(\\d+\\)[ \\t]*$"
    !iif &not $status  !break
    set-variable #l1 @s1
    set-variable #l2 @s2
    set-variable #l3 @s4
    set-variable #l4 &mul &con &seq @s3 "N" "1" "2" &con &seq #l1 "P" -1 1
    !if &sub &len #l2 1
      ml-write &spr "[Error: Invalid rule flag %s]" #l2
      !abort
    !elif &sle #l2 "!"
      ml-write &spr "[Error: Invalid rule flag %s]" #l2
      !abort
    !elif &sin #l2 #l6
      ml-write &spr "[Error: Rule flag %s is reused]" #l2
      !abort
    !endif
    set-variable #l6 &cat #l6 &cat #l2 "\n"
    set-variable #l5 &spr "[ \\t]*%sFX[ \\t]+%s%s[ \\t]+\\(\\S+\\)[ \\t]+\\([^\\s/]+\\)\\(/\\S+\\)?\\([ \\t]+\\(\\S+\\)\\([ \\t]+.*\\)?\\)?[ \\t]*$" #l1 &con &sin #l2 "-^+*.$?\\" "\\" "" #l2
    !while &pdec #l3 1
      forward-line
      !if &seq &trl @wl ""
        set-variable #l3 &add #l3 1
      !elif &not &xse @wl #l5
        set-variable #g1 #l5
        ml-write &spr "[Error: Unexpected %sFX line]" #l1
        !abort
      !else
        find-buffer "*isp-tmp"
        insert-string &spr "%s add-spell-rule \"%s%s\" \"%s\" \"%s\" \"%s\" \"%s\"\n" #l4 &con &sin #l2 "\\\"" "\\" "" #l2 &con &seq @s5 "." "" @s5 &con &seq @s1 "0" "" @s1 &con &seq @s2 "0" "" @s2 &rig @s3 1
        find-buffer "*isp-aff"
      !endif
    !done
    end-of-line
  !done
  find-buffer "*isp-tmp"
  beginning-of-buffer
  !if &seq #l6 ""
    insert-newline
    beginning-of-buffer
  !else
    set-mark
    insert-string #l6
    !if &gre &set #l3 $window-line 2
      sort-lines
      beginning-of-buffer
      &sub #l3 2 replace-string "\n" ""
    !else
      backward-line
    !endif
    beginning-of-line
    -1 replace-string "\\\\" "\\\\\\\\"
    beginning-of-line
    -1 replace-string "\"" "\\\\\""
    beginning-of-line
  !endif
  insert-string "; Rules used - list used by spell-edit-word\nset-variable .spell.rules \""
  end-of-line
  insert-string "\"\n\n; Reset the spell rules\n0 add-spell-rule\n\n; Add prefix & suffix spell rules"
  &band @# 1 write-buffer &spr "%slsr%s.emf" #l8 #l9
  !if &band @# 2
    !force 0 delete-buffer "*isp-aff.emf"
    set-variable $buffer-bname "*isp-aff.emf"
  !else
    !force 0 delete-buffer $buffer-bname
  !endif
  !force 0 delete-dictionary &set #l7 &spr "%slsm%s.edf" #l8 #l9
  ; above change-buffer-charset gets the dic file into the ME internal charset so must clear the internal-display mapping table to avoid the spell function messing with the chars
  set-char-mask "M" ""
  0 add-dictionary #l7
  find-buffer "*isp-dic"
  beginning-of-buffer
  forward-line
  !while &not &seq @wc ""
    !if &xse @wl "^\\([^\\t /]+\\)\\(/\\([^\\t ]+\\)\\)?\\([\\t ].*\\)?"
      !if &sin ":" &set #l1 @s1
        ml-write &spr "[Error: Unexpected word - %s]" #l1
        !abort
      !endif
      !if &sin .fw &set #l2 @s3
        0x15 spell #l1 &rep &rep #l2 .fw "" .ns ""
      !elif &sin .ns #l2
        0x405 spell #l1 &rep #l2 .ns ""
      !else
        0x05 spell #l1 #l2
      !endif
    !elif &not &seq &trr @wl ""
      ml-write &spr "[Error: Unexpected word line - %s]" #l1
      !abort
    !endif
    forward-line
  !done
  !if &not &band @# 2
    &band @# 1 save-dictionary #l7
    ; this forces the reload of the dictionary with will rehash to a reasonable hash table size
    !force 0 delete-dictionary #l7
    add-dictionary #l7
    !force spell "foobar"
    0 save-dictionary #l7
  !endif
  ; reset the charset
  !force !force execute-file "charset"
  ml-write "All Done!!"
!emacro

define-macro ispell-test
  !force 0 delete-buffer "*isp-aff.emf"
  2 delete-dictionary
  4 delete-dictionary
  3 ispell-convert "test"
  execute-buffer "*isp-aff.emf"
  !force 0 delete-buffer "*isp-test"
  find-buffer "*isp-test"
  insert-word-list
  beginning-of-buffer
  set-variable #l1 0
  set-variable #l2 0
  set-variable #l3 0
  !while &not &seq @wl ""
    spell @wl
    !if &not &seq $result &cat "O" @wl
      !iif &not #l1  set-variable #l1 $window-line
      !if &seq &lef $result 1 "O"
        set-variable #l3 &add #l3 1
      !else
        set-variable #l2 &add #l2 1
      !endif
    !endif
    forward-line
  !done
  !iif #l1  set-variable $window-line #l1
  ml-write &spr "[Test complete - %d missing, %d bad returns]" #l2 #l3
!emacro
