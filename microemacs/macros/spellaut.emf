; -!- emf -!-
; This is part of the JASSPA MicroEmacs macro files
; Copyright (C) 1999-2009 JASSPA (www.jasspa.com)
; See the file me.emf for copying and conditions.
;
; Created:     Sat Feb 27 1999
; Synopsis:    Auto-spelling checker routines.
; Authors:     Steven Phillips
;
!if &not &exi .hilight.spell
    set-variable .hilight.spell &pinc .hilight.next 1
    set-variable .osd.spell-auto &pinc .osd.next 1
!endif

0 hilight .hilight.spell 0 $global-scheme

; note - a lot of !forces around to ensure the macro does not exit
; prematurely
; n = bitmask - 0x01 Do hilighting & auto corrections, 0x02 currently inserting a white char
0 define-macro auto-spell-test
    set-variable #l0 $window-col
    !if &not &inw @wc
        ; we are not dividing a word into 2!
        !if &not #l0
            !return
        !endif
        backward-char
        !if &not &inw @wc
            forward-char
            !return
        !endif
        set-variable @# &band @# 1
        forward-char
        set-variable #l1 $window-col
        backward-word
    !elif &band @# 2
        backward-char
        !if &not &inw @wc
            forward-char
            !return
        !endif
        forward-char
        !force insert-string " " @mna
        !if &not $status
            !return
        !endif
        forward-word
        set-variable #l1 $window-col
        2 backward-word
    !else
        forward-word
        set-variable #l1 $window-col
        backward-word
    !endif
    set-variable $buffer-mask "luh"
    !repeat
        !force !force 0 spell
        !if $status
            ;ml-write $result
            2 show-region
            !if &sin &lef $result 1 "AE"
                !if &exi &set #l2 &cat &rig $buffer-fhook 6 "-spell-word"
                    set-variable .spell.check-word &rig $result 1
                    !force 0 execute-named-command #l2
                    !if &not $status
                        !goto add-word
                    !elif &seq .spell.check-word ""
                    !else
                        !force !force 1 spell .spell.check-word
                        !if &sin &lef $result 1 "AE"
                            !goto add-word
                        !endif
                    !endif
                !else
*add-word
                    !if &not &band @# 1
                    !elif &seq &lef $result 1 "A"
                        ; auto-correction - do it
                        set-variable #l2 $window-col
                        -2 show-region
                        &sub #l2 $window-col forward-delete-char
                        -1 yank
                        !if &gre #l0 $window-col
                            set-variable #l0 &sub #l0 &sub #l2 $window-col
                            !if &les #l0 $window-col
                                set-variable #l0 $window-col
                            !endif
                            set-variable #l0 &add #l0 &len &rig $result 1
                        !endif
                        insert-string &rig $result 1
                        set-variable #l1 &add #l1 &sub $window-col #l2
                    !else
                        ; hilight the bad word - must protect . as regex any
                        set-variable #l2 &rep $result "." "\\."
                        !if &inw &rig #l2 &sub &len #l2 1
                            set-variable #l2 &cat &rig #l2 1 "\\}[^[:sword:]]"
                        !else
                            set-variable #l2 &cat &rig #l2 1 "\\}[^[:alnum:]]"
                        !endif
                        !if &inw #l2
                            !force hilight $buffer-hilight 0 &cat "[^[:word:]]\\{" #l2  .scheme.spell-error
                        !else
                            !force hilight $buffer-hilight 0 &cat "[^[:alnum:]]\\{" #l2  .scheme.spell-error
                        !endif
                        ; force this line to be redrawn
                        set-variable $line-scheme $line-scheme
                    !endif
                !endif
            !endif
        !endif
        !if &not &les $window-col #l1
            !jump 7
        !endif
        forward-char
        !if &not &inw @wc
            !jump -5
        !endif
    !until 0
    !force set-variable $window-col #l0
    !if &band @# 2
        !force forward-delete-char
    !endif
!emacro

0 define-macro auto-spell-input
    !if &seq @cck "redraw"
        ; abort to tell ME to handle the actual input
        !abort
    !elif &seq @cck "callback"
        !abort
    !elif &seq @cck "idle-pick"
        !abort
    !endif
    ; set the word group for spelling
    set-variable #l0 $buffer-mask
    set-variable $buffer-mask "luhs"
    !if &les &len @cc 2
        !if &inw @cc
            ; we're typing in a char - flag the last as a word letter insertion
            set-variable .last 1
        !else
            ; inserting a white space char, test (give 0 arg to indicate we may be dividing 2 chars
            3 auto-spell-test
            set-variable .last 0
        !endif
    !elif &sin "delete-char" @cc
        ; if deleting a char put off the test till next time
        set-variable .last 1
    !elif .last
        auto-spell-test
        set-variable .last 0
    !endif
    ; restore the buffer word group
    set-variable $buffer-mask #l0
    ; reset the last command to ensure continuity is preserved
    set-variable @cl @cl
    !abort
!emacro

set-variable .auto-spell-input.status "0"

; n=1 ignore word, n=2 add word to dictionary
define-macro auto-spell-ignore
    set-variable #l0 $buffer-mask
    set-variable $buffer-mask "luh"
    !force !force 0 spell
    set-variable $buffer-mask #l0
    set-variable #l1 &rig $result 1
    !if &seq &lef $result 1 "E"
        !if &equ @# 2
            ; add word to personal dictionary
            5 spell #l1 ""
        !else
            ; ignore the word
            13 spell #l1 ""
        !endif
    !endif
    ; else this could be just a hilighting problem so always 'unhilight
    ; re-hilight the word in global scheme - i.e. unhilight
    str-to-regex #l1
    !if &inw &rig #l1 &sub &len #l1 1
        set-variable #l2 &cat #l1 "\\}[^[:sword:]]"
    !else
        set-variable #l2 &cat #l1 "\\}[^[:alnum:]]"
    !endif
    !if &inw #l2
        !force hilight $buffer-hilight 0 &cat "[^[:word:]]\\{" #l2  $global-scheme
    !else
        !force hilight $buffer-hilight 0 &cat "[^[:alnum:]]\\{" #l2  $global-scheme
    !endif
    ; force this line to be redrawn
    set-variable $line-scheme $line-scheme
!emacro

define-macro auto-spell-buffer
    ml-write "[auto-spelling buffer..."
    set-variable #l0 $buffer-mask
    set-variable $buffer-mask "luhs"
    set-alpha-mark "t"
    beginning-of-buffer
    !force forward-word
    !while $status
        !force auto-spell-test
        !force forward-word
    !done
    set-variable $buffer-mask #l0
    goto-alpha-mark "t"
    screen-update
    ml-write "[auto-spelling buffer...done]"
!emacro

define-macro auto-spell-reset
    !if &equ $buffer-hilight .hilight.spell
        ; if using the auto-spell hilight this is a simple re-init process
        0 hilight .hilight.spell 0 $global-scheme
    !else
        !if &not &seq :auto-spell-reset "ERROR"
            !force execute-file :auto-spell-reset
            set-variable #l0 $status
        !elif &not &seq $buffer-fhook ""
            ; else the only thing we can do is try to execute the hk macro
            !force execute-file &cat "hk" &rig $buffer-fhook 6
            set-variable #l0 $status
        !else
            set-variable #l0 0
        !endif
        !if &not #l0
            ml-write "[Failed to reset auto-spell]"
            !abort
        !endif
    !endif
    screen-update
    ml-write "[Auto-spell reset]"
!emacro

define-macro auto-spell
    !if &not &and @? @#
        ; toggle auto-spell
        set-variable @# &cond &seq $buffer-input "auto-spell-input" -1 1
        ml-write &spr "[%s auto spell check]" &cond &les @# 0 "Disabling" "Enabling"
    !endif
    !if &les @# 0
        ; remove auto-spell
        set-variable $buffer-input ""
        !if &equ $buffer-hilight .hilight.spell
            set-variable $buffer-hilight 0
        !endif
    !elif &seq $buffer-input ""
        ; Invoke the rules to setup spell, but don't invoke to check as this 
        ; will typically slow down start-up time 
        0 spell-rules-init
        ; install auto-spell
        set-variable $buffer-input auto-spell-input
        !if &not $buffer-hilight
            set-variable $buffer-hilight .hilight.spell
        !endif
    !elif &not &seq $buffer-input "auto-spell-input"
        ml-write "[Cannot install auto-spell, $buffer-input conflict]"
        !abort
    !endif
!emacro

0 define-macro auto-spell-osdrp
    set-variable #l1 &rig $result 2
    set-variable #l2 &rig .auto-spell-osd.word 1
    set-variable #l0 &len #l2
    goto-position "\x83"
    !while &not &seq &mid @wl $window-col #l0 #l2
        !if &not $window-col
            !abort
        !endif
        backward-char
    !done
    #l0 forward-delete-char
    -1 yank
    insert-string #l1
    goto-position "\x82"
!emacro

0 define-macro auto-spell-osdcmd
    goto-position "\x83"
    !if &equ @# 1
        1 auto-spell-ignore
    !elif &equ @# 2
        2 auto-spell-ignore
    !elif &equ @# 3
        1 spell-word
    !elif &equ @# 4
        set-variable #l0 &rig .auto-spell-osd.word 1
        set-variable #l1 &rig $result 2
        0x201 spell #l0
        0x209 spell #l0
        0x015 spell #l0 #l1
        auto-spell-test
    !endif
    goto-position "\x82"
!emacro

0 define-macro auto-spell-osdac
    -1 osd @#
    osd @# 0 b
    set-variable #l0 0
    !while &not &seq "" &set #l1 &lget .auto-spell-osd.list &inc #l0 1
        osd @# #l0 "" &spr "\H%d %s" #l0 #l1 4 auto-spell-osdcmd
    !done
!emacro
    
0 define-macro auto-spell-osd
    !if &not &seq .lword .word
        -1 osd @#
        osd @# 0 b
        osd @# 130 "" "Auto Correct"
        !force !force 33 spell &rig .word 1
        !if $status
            set-variable .list &lset $result 10 ""
            set-variable #l0 0
            !while &not &seq "" &set #l1 &lget .list &inc #l0 1
                osd @# #l0 "" &spr "\H%d %s" #l0 #l1 f auto-spell-osdrp
            !done
            !if &equ #l0 1
                osd @# 1 "" "<no suggestions>"
                set-variable #l0 2
            !else
                osd @# 130 "M" "Auto \HCorrect " .osd.tmp auto-spell-osdac 
            !endif
        !else
            set-variable .list "|"
            osd @# 1 "<interrupted>" .lword
            set-variable #l0 2
        !endif
        osd @# 100 "-"
        !if &sin &lef .word 1 "AE"
            osd @# 110 "" "\HIgnore All" 1 auto-spell-osdcmd
            osd @# 120 "" "\HAdd"        2 auto-spell-osdcmd
        !endif
        osd @# 140 "" "\HSpell Word"     3 auto-spell-osdcmd
        osd @# 150 "-"
        osd @# 160 "" "Spell \HBuffer"   f spell-buffer
        osd @# 170 "" "A\Huto Spell Buffer" f auto-spell-buffer 
        osd @# 180 "" "Auto Spell \HReset"  f auto-spell-reset 
        set-variable .lword .word
    !endif
    osd @# 190 "" &cat &cond &seq $buffer-input "auto-spell-input" "\HDisable" "\HEnable" " Auto Spell"  0 auto-spell 
!emacro
set-variable .auto-spell-osd.lword ""

define-macro auto-spell-menu
    !if @#
        set-variable $mouse-x $cursor-x
        set-variable $mouse-y $cursor-y
    !endif
    0 auto-spell-test
    set-position "\x82"
    set-position "\x83"
    set-variable .auto-spell-osd.word $result
    .osd.spell-auto auto-spell-osd
    osd .osd.spell-auto 0 "bBo" -1 1
    .osd.spell-auto osd
!emacro
