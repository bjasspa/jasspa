 "" "</FOLD><FOLD+> \ecCControl Flow:\ecA"
main "#!/usr/bin/env python3\r# -*- coding: ISO-8859-15 -*-\r\"\"\"\pModulename\r\rUsage: {0} ?-h,-?,--help?\r\rArguments:\r\"\"\"\r__author__ = \"first last\"\r__version__ = \"0.1\"\rimport sys, os, re\r\rdef help(argv):\r\Tprint(__doc__.format(argv[1]))\r\rdef usage(argv):\r\Tprint(f\"Usage: {argv[0]} args\")\r\rdef main(argv):\r\Tif (len(argv)) == 1:\r\Tusage(argv)\r\r\Telif \"-h\" in argv or \"--help\" in argv:\r\Thelp(argv)\r\rif __name__ == \"__main__\":\r\Tmain(sys.argv)\r\r\P" "  main"
enc  "# -*- coding: ISO-8859-\p -*-\r\P" "  enc"
enc15  "# -*- coding: ISO-8859-15 -*-\r" "  enc15"
enc1252  "# -*- coding: cp1252 -*-\r" "  enc1252"
def "def \p:\r\T\"\"\"\"this is a docstring for a method\"\"\"\rpass\r\P" "  def"
class "class \p:\r    \"\"\"Docstring for the class\"\"\"\rdef __init__(self):\r\Tpass\r\P" "  class"
classi "class \p (BaseClass):\r    \"Docstring\"\rdef __init__(self,arg):\r    super().__init__(arg)\r\P" "  classi"
defm "def \p (self):\r\T"\"\"\"this is a docstring for a method\"\"\"\rpass\r\P" "  classdef public"
defmp "def __\p__():\P" "  classdef private"
doc "\"\"\"this is a docstring for a method\"\"\" "  doc(string)"
if "if \p:\P" "  if"
eli "elif \p:\P" "  eli(f)"
els "else:\r\T" "  els(e)"
whi "while (\p):\r\P" "  whi(le)"
for "for \p in range(10):\P" "  for"
l2d "dct=dict({})\rfor i in range(1,len(\plst),2):\r\Tkey = lst[i]\rval = lst[i+1]\rdct[key]=val\r\P" "  l2d"
iffile "if not os.path.isfile(\p):\P" "  iffile"
openr "file = open(\p,'r')\rfor line in file:\r    print(line)\rfile.close()\r\P" "  openr"
openw "out  = open(\p,'w')\rout.write('')\rout.close()\r\P" "  openw"
tryex "try:\r    # try code\r    \p\rexcept ...Error:\r     # except code\P" "  try except"
tryfi "try:\r    # try code\r    \p\rfinally:\r     # finally code\P" "  try finally"
 "" ""
 "" "</FOLD><FOLD+> \ecCArgparse:\ecA "
argpn "parser = argparse.ArgumentParser(prog = '\p',\r\Tdescription=__doc__,\rformatter_class=argparse.RawTextHelpFormatter)\rargs=parser.parse_args(sys.argv[1:])\rprint(args)\r\P" "  parser"
argpm "parser.add_argument('\pmandatory',help='a mandatory argument')\P" "  argmand"
argpo "parser.add_argument('--\pinteger','-i',help='an optional argument')\P"  "  argopt"
argpf "parser.add_argument('--flag','-f',help=\"an flag\",action=\"store_true\")"  "  argflag"
 "" "</FOLD><FOLD+> \ecCTkinter:\ecA "
tkimport "import tkinter as tk\rimport tkinter.ttk as ttk\r"  "  tkimport"
tkfdimport "from tkinter import filedialog" "  tkfdimport"
tkmbimport "from tkinter import messagebox" "  tkmbimport"
tkroot "root = tk.Tk()\rroot.title(\"Appname\")\r\pttk.Button(root,text=\"Exit\",command=sys.exit).pack()\rroot.mainloop()\r\P" "  tkroot"
tkmenui  "mnu.insert_command(index=0,label='\p ...', command=self.cmd, underline=0)", "  tkmenui"
tkfopen  "filename=filedialog.askopenfilename(\r    title='Select filename',\rfiletypes=(\r('Text files', '*.txt'),\r('All Files', '*.*')),\rinitialdir=os.path.dirname(self.lastfile))\r" "  tkfopen"
tkmboxyn "answer = tk.messagebox.askquestion('title', 'Are sure ...?', icon='warning')" "  tkmboxyn"
tkmboxync "answer = tk.messagebox.askyesnocancel('\ptitle', 'Are sure ...?', icon='warning')\rif answer is None:\r    return\rif (answer):\r    print('yes')\r\P" "  tkmboxync"
tkmboxin "tk.messagebox.showinfo('\p', 'Text ...!'), icon='warning')\P" "  tkmboxin"
test "def test():\r\Tehello\r\rdef (test2):\r\Tpass\r\r" " test"
 "" "</FOLD>"
