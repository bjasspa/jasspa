;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;  Created By    : Detlef Groth, University of Potsdam, Germany
;  Created       : Mon Mar 24 11:14:06 2025
;  Last Modified : <250325.0747>
;
;  Description   : Support for editing Tcl files with
;                  macros tcl-exec, tcl-format and tcl-lint
;  Notes         : should we use pytools macros - %python-com -m tclint ??
;                  for tcl-lint and tcl-format   
;
;  History
;
;  Copyright (c) 2025 Detlef Groth.
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
define-macro fhook-tcl-lint
  buffer-init-hooks
!emacro

define-macro tcl-lint
  !if &and &not &exi %tcl-lint-opts &seq &which "tclint" "ERROR"
    -8 ml-write "Python package tclint not installed but required!"
  !endif
  !if &not &seq $buffer-fhook "fhook-tcl"
    ml-write &spr "Error: '%s' is not a Tcl file!" $buffer-bname
    !abort
  !endif
  &band @# 1 save-some-buffers @mna
  !force set-variable #l0 %tcl-lint-opts
  !if &seq #l0 "ERROR"
    set-variable #l0 "tclint %s"
    set-variable %tcl-lint-opts #l0
  !endif
  2 pipe-shell-command &spr #l0 $buffer-fname "*tcl-lint*"
  set-variable .buffer $buffer-bname
  next-window-find-buffer "*tcl-lint*"
  buffer-init "tcl-lint"
  set-variable :mouse-word-select tcl-lint-find-line
  buffer-bind-create "bio" "return" "0" tcl-lint-find-line
!emacro

0 define-macro tcl-lint-find-line
  set-variable #l0 @wl
  !if &xse #l0 "\\(.+\\):\\([0-9]+\\):\\([0-9]+\\):.+"
    next-window-find-buffer .tcl-lint.buffer
    goto-line @s2
    beginning-of-line
    @s3 forward-char
  !else
    ml-write "Not a error line!"
  !endif
!emacro

set-variable .fhook-tcl-lint.name "Tcl Lint"
set-variable .fhook-tcl-lint.setup &reg "/history/fhook/tcl-lint" "acfhmw"
set-variable .fhook-tcl-lint.setup-mask "acfhmw"

!if &and &sin "h" .fhook-tcl-lint.setup &band .hilight.flags 0x02
  !iif &not &exi .hilight.tcl-lint  set-variable .hilight.tcl-lint &pinc  .hilight.next 1
  0 hilight .hilight.tcl-lint 2 200                                     $global-scheme
  hilight .hilight.tcl-lint   0  "[/\\.A-Za-z0-9]+:[0-9]+:[0-9]+:"      .scheme.link  
!endif

add-file-hook "*tcl-lint*" fhook-tcl-lint

define-macro tcl-format
  ; on Windows the syntax for tcl-format-opts might be
  ; C:/Program Files/Python/../python.exe -m tclfmt
  !if &and &not &exi %tcl-format-opts &seq &which "tclfmt" "ERROR"
      -8 ml-write "Python package tclint for tclfmt not installed but required!"
  !endif
  &band @# 1 save-some-buffers @mna    
  !force set-variable #l1 %tcl-format-opts
  !if &seq #l1 "ERROR"
    set-variable #l1 "tclfmt --in-place %s"
    set-variable %tcl-format-opts #l1
  !endif
  !if &not &seq $buffer-fhook "fhook-tcl"
      ml-write &spr "Error: '%s' is not a Tcl file!" $buffer-bname
      !abort
  !endif
  2 pipe-shell-command &spr %tcl-format-opts $buffer-fname "*command*"
  0 reread-file
!emacro

define-macro fhook-tcl-exec
  buffer-init-hooks
!emacro

define-macro tcl-exec
  !iif &not &exi %tclsh-com  tcl-tclsh-setup
  !if &not &seq $buffer-fhook "fhook-tcl"
      ml-write &spr "Error: '%s' is not a Tcl file!" $buffer-bname
      !abort
  !endif
  &band @# 1 save-some-buffers @mna
  ; command line arguments
  !iif &not &exi :tcl-exec-args  set-variable :tcl-exec-args ""
  !iif &not &band @# 2  set-variable :tcl-exec-args @ml2 "Additional command-line arguments" :tcl-exec-args 
  2 pipe-shell-command &spr "%s %s %s" %tclsh-com $buffer-fname :tcl-exec-args "*tcl-exec*"
  set-variable .buffer $buffer-bname
  next-window-find-buffer "*tcl-exec*"
  buffer-init "tcl-exec"
  set-variable :mouse-word-select tcl-exec-find-line
  buffer-bind-create "bio" "return" "0" tcl-exec-find-line
!emacro

0 define-macro tcl-exec-find-line
    set-variable #l0 @wl
  !if &xse #l0 ".+file .+line \\([0-9]+\\)).*"
      next-window-find-buffer .tcl-exec.buffer
      goto-line @s1
  !elif &xse #l0 ".+procedure \"\\(.+\\)\" line \\([0-9]+\\)).*"
      set-variable #l1 @s1
      set-variable #l2 @s2
      next-window-find-buffer .tcl-exec.buffer
      beginning-of-buffer
      !force search-forward &spr "proc %s" #l1
      !if $status
          backward-line
          #l2 forward-line
      !else
          ml-write &spr "Error: proc '%s' not found!"
      !endif
  !else
      ml-write "Not a error line!"
  !endif
!emacro

0 define-macro tcl-tclsh-setup
  !iif &exi %tclsh-com !return
  set-variable #l0 0
  !while &not &seq "" &set #l1 &lget "|tclsh|tclsh9.0|" &inc #l0 1
    !if &not &seq "ERROR" &which #l1
      set-variable %tclsh-com #l1
      ml-write &spr "Tcl %s executable found in path" #l1
      !return
    !endif
  !done
  !if &seq $platform "windows"
    ; Add code to look for the tclsh on windows
  !endif
  -24 ml-write "Error: Tcl's tclsh executable not found, please install Tcl or set %tclsh-com"
!emacro

set-variable .fhook-tcl-exec.name "Tcl Exec"
set-variable .fhook-tcl-exec.setup &reg "/history/fhook/tcl-exec" "acfhmw"
set-variable .fhook-tcl-exec.setup-mask "acfhmw"

!if &and &sin "h" .fhook-tcl-exec.setup &band .hilight.flags 0x02
  !iif &not &exi .hilight.tcl-exec  set-variable .hilight.tcl-exec &pinc  .hilight.next 1
  0 hilight .hilight.tcl-exec 2 200                                     $global-scheme
  hilight .hilight.tcl-exec   1  "(procedure.*line.*"      .scheme.link  
  hilight .hilight.tcl-exec   1  "(file.*line.*"      .scheme.link
!endif

add-file-hook "*tcl-exec*" fhook-tcl-exec

