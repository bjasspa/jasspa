; -!- emf -!-
; This is part of the JASSPA MicroEmacs macro files
; Copyright (C) 1999-2009 JASSPA (www.jasspa.com)
; See the file me.emf for copying and conditions.
;
; Synopsis:    ehf hook - invoked when a MicroEmacs on-line help is loaded.
; Authors:     Steven Phillips
;
set-char-mask "2" "-$&#!%:@."

define-macro fhook-ehf
  set-variable $buffer-mask "luh12"
  @# buffer-init "ehf"
  ; Hyperlink with the mouse.
  set-variable :mouse-word-select ehf-process-link
  !if &seq $buffer-bname "*help*"
    -1 buffer-mode "view"
    set-variable #l0 &cond &bmod "magic" 1 -1
    1 buffer-mode "magic"
    6 goto-line
    set-variable #l4 ""
    !if &xse @wl "\\(<!---? *\\(.*?\\) *-->\\|#+ \\w\\)\\(.*\\)"
      set-variable #l4 @s2
      !if &seq @wc "#"
        set-variable #l4 "md nowrap"
      !elif &seq &trr @s3 ""
        set-mark
        forward-line
        -1 kill-region
      !else
        &len @s1 forward-delete-char
        -1 yank
      !endif
      !if &seq "md" &lef #l4 2
        ; find and narrow out all ``` code blocks
        !repeat
          !force search-buffer "me" "^```"
          !iif &not $status  !break
          beginning-of-line
          set-variable #l1 &seq &lef @wl 8 "```{emf}"
          set-variable #l2 $window-line
          set-mark
          forward-line
          -1 kill-region
          !force search-buffer "me" "^```"
          !if &not $status
            100 ml-write &spr "[Error: failed to find close to ``` on around line %d]" $window-line 
            !break
          !endif
          beginning-of-line
          set-mark
          forward-line
          -1 kill-region
          backward-char
          insert-string &con #l1 "sA" "cA"
          #l2 goto-line
          4 narrow-buffer
          backward-char
          insert-string &con #l1 "sB" "cG"
        !done
        6 goto-line
        replace-string "\\([^\\\\\n]\\|^\\)\\\\\\*" "\\1cZ"
        6 goto-line
        replace-string "^#+ +\\(.*\\)" "cE\\1cA"
        6 goto-line
        replace-string "\\*\\*\\(\\([^*\\\\]\\|\\\\.\\|\\*\\\\.\\)+\\)\\*\\*" "cD\\1cA"
        6 goto-line
        replace-string "\\*\\(\\([^*\\\\]\\|\\\\.\\)+\\)\\*" "cC\\1cA"
        6 goto-line
        replace-string "\\(^\\|[ \\t]\\)__\\(\\([^_\\\\]\\|\\\\.\\|_\\\\.\\)+\\)__\\($\\|\\W\\)" "\\1cD\\2cA\\4"
        6 goto-line
        replace-string "\\(^\\|[ \\t]\\)_\\(\\([^_\\\\]\\|\\\\.\\)+\\)_\\($\\|\\W\\)" "\\1cC\\2cA\\4"
        6 goto-line
        replace-string "\\[\\(\\([^]\\\\]\\|\\\\.\\)+\\)](\\(\\([^)\\\\]\\|\\\\.\\)+\\))" "ls\\3lm\\1le"
        6 goto-line
        replace-string "\\(^\\|[ \\t]\\)\\(\\(ht\\|f\\)tps?://[-@~_a-zA-Z#%?&=\\.:\\/0-9]+\\|mailto:[-_a-zA-Z.0-9]+@[-_a-zA-Z.0-9]+\\)" "\\1lslm\\2le"
        6 goto-line
        replace-string "\\(^\\|[ \\t]\\)`\\([^\n`]\\([^\\\\`]\\|\\\\.\\)*\\)`" "\\1cG\\2cA"
        6 goto-line
        replace-string "cZ" "\\\\*"
        6 goto-line
        replace-string "\\\\\\(.\\)" "\\1"
        6 goto-line
        &sub $window-eline 9 replace-string "^" "    "
        6 goto-line
        replace-string "^    cE" "cE"
        ; Get all the code block back
        1 narrow-buffer
        6 goto-line
      !endif
    !endif
    !if &not &sin "nowrap" #l4
      set-variable #l3 &con &les 140 &set #l3 &con &gre 70 &set #l3 &sub $window-width 4 70 #l3 140 #l3
      ; found largest indent in ehf was ~26 chars, this must be removed from the \{#\} long-line regex len 
      set-variable #l1 &spr "\es[B-Z]\\|^\\( *\\(\\* \\)?\\).\\{%d\\}.*" &sub #l3 26
      !repeat
        !force search-buffer "me" #l1
        !iif &not $status  !break
        !if &equ &set #l5 &len @s0 3
          !force search-buffer "Me" "\esA"
        !elif &gre #l5 #l3
          set-variable #l5 &len @s1
          !repeat
            !force set-variable $window-acol &add #l3 1
            !iif &not $status  !break
            set-variable #l6 $window-col
            !force -1 search-buffer "bme" "[^ ] "
            !if $status
              forward-char
              !while &seq @wc " "
                forward-delete-char
              !done
              insert-newline
            !elif &seq "" &rep @wl "\x12" ""
              !break
            !else
              set-variable $window-col &sub #l6 2
              insert-string "-\n"
            !endif
            #l5 insert-space
          !done
          end-of-line
        !endif
      !done
    !endif
    beginning-of-buffer
    !force replace-string "\\(\ecB[^\e]*\\)\n\\( *\\)" "\\1\ecA\n\\2\ecB"
    beginning-of-buffer
    !force replace-string "\\(\elm[^\e]*\\)\n\\( *\\)" "\\1\eln\n\\2\eln"
    beginning-of-buffer
    #l0 buffer-mode "magic"
    -1 buffer-mode "edit"
    1 buffer-mode "view"
    ; Hyperlink with the <RETURN> key
    buffer-bind-create "bio" "return" "0" ehf-process-link
    ; Move between links with the <TAB> key
    buffer-bind-create "bio" "tab"   "" ehf-forward-link
    buffer-bind-create "bio" "S-tab" "" ehf-backward-link
  !endif
  buffer-init-hooks
!emacro

; buffer-init variables
set-variable .fhook-ehf.name "ME Help"
set-variable .fhook-ehf.setup &reg "/history/fhook/ehf" "ghijmopwx"
set-variable .fhook-ehf.setup-mask "aeghijkopstuwx1"
set-variable .fhook-ehf.command-flag  "|th|th|th|"
set-variable .fhook-ehf.command-name  "|ehf-process-link|ehf-backward-link|ehf-forward-link|"
set-variable .fhook-ehf.command-nbind "|0|||"
set-variable .fhook-ehf.command-kbind "||||"
set-variable .fhook-ehf.command-desc  "|\HGoto Link|Move to \HPrevious Link|Move to \HNext Link|"

!if &and &sin "h" .fhook-ehf.setup &band .hilight.flags 0x01
  !if &not &exist .hilight.ehf
    set-variable .hilight.ehf  &pinc .hilight.next 1
    set-variable .hilight.ehfB &pinc .hilight.next 1
    set-variable .hilight.ehfL &pinc .hilight.next 1
  !endif
  
  0 hilight  .hilight.ehf 2 50                      $global-scheme
  hilight .hilight.ehf 0x44 "\ecA" "" "\\}\e" "" "" $global-scheme
  hilight .hilight.ehf 0x44 "\ecB" "" "\\}\e" "" "" .scheme.under   ; underline
  hilight .hilight.ehf 0x44 "\ecC" "" "\\}\e" "" "" .scheme.italic  ; italic
  hilight .hilight.ehf 0x44 "\ecD" "" "\\}\e" "" "" .scheme.bold    ; bold
  hilight .hilight.ehf 0x44 "\ecE" "" "\\}\e" "" "" .scheme.header  ; Header
  hilight .hilight.ehf 0x44 "\ecF" "" "\\}\e" "" "" .scheme.comment ; image
  hilight .hilight.ehf 0x44 "\ecG" "" "\\}\e" "" "" .scheme.type    ; TT (curior)
  hilight .hilight.ehf 0xc0 "\els" "" .hilight.ehfL $global-scheme  ; link start
  hilight .hilight.ehf 0x44 "\elm" "" "\el." "" ""  .scheme.link    ; link name - use '.' as n is used for links split across lines
  hilight .hilight.ehf 0x44 "\eln" "" "\ele" "" ""  .scheme.link    ; link name
  hilight .hilight.ehf 0xc0 "\esB" "" .hilight.ehfB $global-scheme
  hilight .hilight.ehf 0x40 "\esA" ""               $global-scheme
  
  0 hilight  .hilight.ehfB 2 50                     $global-scheme
  hilight .hilight.ehfB 1  "define-help"            .scheme.keyword
  hilight .hilight.ehfB 1  "define-macro"           .scheme.keyword
  hilight .hilight.ehfB 1  "define-macro-file"      .scheme.keyword
  hilight .hilight.ehfB 4  "\"" "\"" "\\"           .scheme.string
  hilight .hilight.ehfB 2  ";"                      .scheme.comment
  hilight .hilight.ehfB 4  "!"   "\\}\\W" ""        .scheme.keyword
  hilight .hilight.ehfB 4  "&"   "\\}\\W" ""        .scheme.operator
  hilight .hilight.ehfB 4  "\\." "\\}\\W" ""        .scheme.variable
  hilight .hilight.ehfB 4  "%"   "\\}\\W" ""        .scheme.variable
  hilight .hilight.ehfB 4  ":"   "\\}\\W" ""        .scheme.variable
  hilight .hilight.ehfB 4  "\\$" "\\}\\W" ""        .scheme.variable
  hilight .hilight.ehfB 4  "@"   "\\}\\W" ""        .scheme.variable
  hilight .hilight.ehfB 1  "#[gpl][[:digit:]]"      .scheme.variable
  hilight .hilight.ehfB 0x22 "*"                    .scheme.link
  hilight .hilight.ehfB 0xc0 "\esA" "" .hilight.ehf $global-scheme
  hilight .hilight.ehfB 0x40 "\esB" ""              $global-scheme
  
  0 hilight  .hilight.ehfL 2 50                     $global-scheme
  hilight .hilight.ehfL 0x80 "\\}\elm" .hilight.ehf $global-scheme
  hilight .hilight.ehfL 0x40 "." ""                 $global-scheme
!endif

; Advance to the next link in the forward direction
0 define-macro ehf-forward-link
  !if &les @# 0
    set-variable #l0 &sub 0 @#
    #l0 ehf-backward-link
  !endif
  !force @# search-forward "\elm"
  !if &not $status
    ; Not found, force wrap, search and finish
    beginning-of-buffer
    search-forward "\elm"
  !endif
!emacro

; Advance to the next link in the backward direction
0 define-macro ehf-backward-link
  !if &les @# 0
    set-variable #l0 &sub 0 @#
    #l0 ehf-forward-link
  !endif
  ; move back 3 chars so if we are currently on a link we do move
  !force 3 backward-char
  !force @# search-backward "\elm"
  !if &not $status
    ; Not found, force wrap, search and finish
    end-of-buffer
    search-backward "\elm"
  !endif
  ; move to the end of the \elm so the user can sensibly move forward
  ; and so that subsequent forw/back-link moves work as expected.
  2 show-region
!emacro

0 define-macro ehf-find-help
  set-variable #l0 @1
  !if &set #l4 &sin "|" #l0
    set-variable #l0 &lef #l0 &sub #l4 1
  !endif
  !if &seq $buffer-bname "*help*"
    ; get the current page item so we can add it to the prev/next history
    beginning-of-buffer
    set-variable #l1 &mid @wl 3 &sub &len @wl 6
    2 forward-line
    !force -1 search-forward "\elm\\[Prev]"
    !if $status
      ; this is the prev history
      9 backward-char
      set-mark
      search-backward "\els"
      3 forward-char
      copy-region
      set-variable #l2 @y
      -1 yank
    !else
      set-variable #l2 ""
    !endif
    !force -1 search-forward "\elm\\[Next]"
    !if $status
      ; this is the next history
      9 backward-char
      set-mark
      search-backward "\els"
      3 forward-char
      copy-region
      set-variable #l3 @y
      -1 yank
    !else
      set-variable #l3 ""
    !endif
  !else
    set-variable #l1 ""
    set-variable #l2 ""
    set-variable #l3 ""
  !endif
  !force help-item #l0
  !if $status
    !if &seq &lef #l2 &len #l0 #l0
      ; same as prev, remove from prev, add current to next
      set-variable #l2 &rig #l2 &add &len #l0 1
      set-variable #l3 &cat &cat #l1 "|" #l3
    !else
      set-variable #l2 &cat &cat #l1 "|" #l2
      !if &seq &lef #l3 &len #l0 #l0
        ; same as next, remove from next
        set-variable #l3 &rig #l3 &add &len #l0 1
      !else
        ; not the same so going in different direction so del next
        set-variable #l3 ""
      !endif
    !endif
    popup-window  "*help*"
    ; move past the [Home] line
    2 forward-line
    end-of-line
    -1 buffer-mode "view"
    !if &gre &len #l2 1
      insert-string &spr " \els%s\elm[Prev]\ele" #l2
    !endif
    !if &gre &len #l3 1
      insert-string &spr " \els%s\elm[Next]\ele" #l3
    !endif
    -1 buffer-mode "edit"
    1 buffer-mode "view"
    beginning-of-buffer
  !else
    set-variable $window-line #p1
    set-variable $window-col #p0
  !endif
!emacro

0 define-macro ehf-process-link
  set-variable #l0 $window-col
  set-variable #l1 $window-line
  ; end of link must be found within 5 lines
  !force -5 search-forward "\ele"
  !if $status
    !force -5 search-backward "\els"
    !if &and $status &or &les $window-line #l1 &and &equ $window-line #l1 &not &gre $window-col #l0
      3 forward-char
      set-mark
      -1 search-forward "\elm"
      3 backward-char
      copy-region
      set-variable #l2 @y
      -1 yank
      !if &seq #l2 ""
        3 forward-char
        set-mark
        -1 search-forward "\ele"
        3 backward-char
        copy-region
        set-variable #l2 @y
        -1 yank
      !endif
      ehf-find-help #l2
      !return
    !endif
  !endif
  set-variable $window-line #l1
  set-variable $window-col #l0
  !if &inw @wc
    ; Goto beginning of word and place mark
    forward-char
    backward-word
    !if &seq @wc "c"
      backward-char
      !if &seq @wc "\e"
        3 forward-char
      !else
        forward-char
      !endif
    !endif
    set-mark
    ; Goto end of word and copy region
    forward-word
    copy-region
    set-cursor-to-mouse
    set-variable #l2 @y
    -1 yank
    ehf-find-help #l2
    !return
  !endif
  ml-write "Error! Not in a link"
  !abort
!emacro

0 define-macro ehf-spell-word
  set-variable #l0 $window-col
  set-variable #l1 0
  -2 show-region
  set-variable #l2 $window-col
  !if $window-col
    set-variable #l1 &sub #l0 $window-col
    backward-char
    !if &and &seq @wc "\e" &gre #l1 1
      forward-char
      !if &sin @wc "s"
        forward-char
        !if &seq @wc "A"
          ; miss-matched scheme change - problems
          set-variable $window-col #l0
          !abort
        !endif
        ; skip the emf sections
        search-forward "\esA"
        set-variable .spell.check-word ""
        !return
      !elif &sin @wc "cl"
        ; ehf color link or scheme change
        2 forward-char
        set-variable #l2 $window-col
        set-variable #l1 1
      !endif
    !else
      forward-char
    !endif
    !if &seq &mid @wl $window-col 2 "C-"
      2 forward-char
      set-variable #l2 $window-col
      set-variable #l1 1
    !endif
  !endif
  2 show-region
  backward-char
  !if &sin @wc "!-:"
    !repeat
      backward-char
    !until &not &sin @wc "!-:"
    set-variable #p9 &sub #l0 &add $window-col 1
    set-variable #l0 &add $window-col 1
    set-variable #l1 1
  !endif
  forward-char
  !if #l1
    set-variable $window-col #l2
    set-variable .spell.check-word &mid @wl $window-col &sub #l0 $window-col
    -3 show-region
    set-variable $window-col #l0
    3 show-region
    !if &and &equ &len #l1 1 &sin .spell.check-word "abcdefghijklmnopqrstuvwxyz-.0123456789"
      set-variable .spell.check-word ""
    !endif
    !return
  !endif
  !abort
!emacro

buffer-init-fhook "ehf"
