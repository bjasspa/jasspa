; -!- emf -!-
;
; Copyright (C) 1999-2024 JASSPA (www.jasspa.com)
;
; This is part of JASSPA's MicroEmacs, see the LICENSE file for licensing and
; copying information.
;
; Synopsis:    ehf hook - invoked when a MicroEmacs on-line help is loaded.
; Authors:     Steven Phillips
;
set-char-mask "2" "-$&#!%:@."

define-macro fhook-ehf
  set-variable $buffer-mask "luh12"
  @# buffer-init "ehf"
  ; Hyperlink with the mouse.
  set-variable :mouse-word-select ehf-process-link
  !if &seq $buffer-bname "*help*"
    -1 buffer-mode "view"
    set-variable #l0 &cond &bmod "magic" 1 -1
    1 buffer-mode "magic"
    6 goto-line
    set-variable #l4 ""
    !if &xse @wl "\\(<!---? *\\(.*?\\) *-->\\|#+ \\w\\)\\(.*\\)"
      set-variable #l4 @s2
      !if &seq @wc "#"
        set-variable #l4 "md nowrap"
      !elif &seq &trr @s3 ""
        set-mark
        forward-line
        -1 kill-region
      !else
        &len @s1 forward-delete-char
        -1 yank
      !endif
      !if &seq "md" &lef #l4 2
        ; find and narrow out all ``` code blocks
        !repeat
          !force search-buffer "me" "^```"
          !iif &not $status  !break
          beginning-of-line
          set-variable #l1 &seq &lef @wl 8 "```{emf}"
          set-variable #l2 $window-line
          set-mark
          forward-line
          -1 kill-region
          !force search-buffer "me" "^```"
          !if &not $status
            100 ml-write &spr "[Error: failed to find close to ``` on around line %d]" $window-line
            !break
          !endif
          beginning-of-line
          set-mark
          forward-line
          -1 kill-region
          backward-char
          insert-string &con #l1 "\CDA" "\CCA"
          #l2 goto-line
          4 narrow-buffer
          backward-char
          insert-string &con #l1 "\CDB" "\CCK"
        !done
        6 goto-line
        replace-string "\\([^\\\\\n]\\|^\\)\\\\\\*" "\\1\CE!"
        6 goto-line
        replace-string "^#+ +\\(.*\\)" "\CCB\\1\CCA"
        6 goto-line
        replace-string "\\*\\*\\(\\([^*\\\\]\\|\\\\.\\|\\*\\\\.\\)+\\)\\*\\*" "\CCD\\1\CCA"
        6 goto-line
        replace-string "\\*\\(\\([^*\\\\]\\|\\\\.\\)+\\)\\*" "\CCE\\1\CCA"
        6 goto-line
        replace-string "\\(^\\|[ \\t]\\)__\\(\\([^_\\\\]\\|\\\\.\\|_\\\\.\\)+\\)__\\($\\|\\W\\)" "\\1\CCD\\2\CCA\\4"
        6 goto-line
        replace-string "\\(^\\|[ \\t]\\)_\\(\\([^_\\\\]\\|\\\\.\\)+\\)_\\($\\|\\W\\)" "\\1\CCE\\2\CCA\\4"
        6 goto-line
        replace-string "\\[\\(\\([^]\\\\]\\|\\\\.\\)+\\)](\\(\\([^)\\\\]\\|\\\\.\\)+\\))" "\CDs\\3\CDm\\1\CDe"
        6 goto-line
        replace-string "\\(^\\|[ \\t]\\)\\(\\(ht\\|f\\)tps?://[-@~_a-zA-Z#%?&=\\.:\\/0-9]+\\|mailto:[-_a-zA-Z.0-9]+@[-_a-zA-Z.0-9]+\\)" "\\1\CDs\CDm\\2\CDe"
        6 goto-line
        replace-string "\\(^\\|[ \\t]\\)`\\([^\n`]\\([^\\\\`]\\|\\\\.\\)*\\)`" "\\1\CCK\\2\CCA"
        6 goto-line
        replace-string "\CE!" "\\\\*"
        6 goto-line
        replace-string "\\\\\\(.\\)" "\\1"
        6 goto-line
        &sub $window-eline 9 replace-string "^" "    "
        6 goto-line
        replace-string "^    \CCB" "\CCB"
        ; Get all the code block back
        1 narrow-buffer
        6 goto-line
      !endif
    !endif
    !if &not &sin "nowrap" #l4
      set-variable #l3 &con &les 140 &set #l3 &con &gre 70 &set #l3 &sub $window-width 4 70 #l3 140 #l3
      ; found largest indent in ehf was ~26 chars, this must be removed from the \{#\} long-line regex len
      set-variable #l1 &spr "\CD[B-Z]\\|^\\( *\\(\\* \\)?\\).\\{%d\\}.*" &sub #l3 26
      !repeat
        !force search-buffer "me" #l1
        !iif &not $status  !break
        !if &equ &set #l5 &len @s0 3
          !force search-buffer "Me" "\CDA"
        !elif &gre #l5 #l3
          set-variable #l5 &len @s1
          !repeat
            !force set-variable $window-acol &add #l3 1
            !iif &not $status  !break
            set-variable #l6 $window-col
            !force -1 search-buffer "bme" "[^ ] "
            !if $status
              forward-char
              !while &seq @wc " "
                forward-delete-char
              !done
              insert-newline
            !elif &seq "" &rep @wl &rig $box-chars -1 ""
              !break
            !else
              set-variable $window-col &sub #l6 2
              insert-string "-\n"
            !endif
            #l5 insert-space
          !done
          end-of-line
        !endif
      !done
    !endif
    beginning-of-buffer
    !force replace-string "\\(\CC\\(\\m\\)[^\CC\n]*\\)\n\\( *\\)" "\\1\CCA\n\\3\CC\\2"
    beginning-of-buffer
    !force replace-string "\\(\CDm[^\CD\n]*\\)\n\\( *\\)" "\\1\CDn\n\\2\CDn"
    beginning-of-buffer
    #l0 buffer-mode "magic"
    -1 buffer-mode "edit"
    1 buffer-mode "view"
    ; Hyperlink with the <RETURN> key
    buffer-bind-create "bio" "return" "0" ehf-process-link
    ; Move between links with the <TAB> key
    buffer-bind-create "bio" "tab"   "" ehf-forward-link
    buffer-bind-create "bio" "S-tab" "" ehf-backward-link
  !endif
  buffer-init-hooks
!emacro

; buffer-init variables
set-variable .fhook-ehf.name "ME Help"
set-variable .fhook-ehf.setup &reg "/history/fhook/ehf" "ghijmopwx"
set-variable .fhook-ehf.setup-mask "aeghijkopstuwx1"
set-variable .fhook-ehf.command-flag  "|th|th|th|"
set-variable .fhook-ehf.command-name  "|ehf-process-link|ehf-backward-link|ehf-forward-link|"
set-variable .fhook-ehf.command-nbind "|0|||"
set-variable .fhook-ehf.command-kbind "||||"
set-variable .fhook-ehf.command-desc  "|\HGoto Link|Move to \HPrevious Link|Move to \HNext Link|"

!if &and &sin "h" .fhook-ehf.setup &band .hilight.flags 0x01
  !iif &not &exi meth-add-format  execute-file "meth"
  !iif &not &exi .hilight.ehf  set-variable .hilight.ehf .hilight.meth
  meth-add-format "emf"
!endif

; Advance to the next link in the forward direction
0 define-macro ehf-forward-link
  !if &les @# 0
    set-variable #l0 &sub 0 @#
    #l0 ehf-backward-link
  !endif
  !force @# search-forward "\CEm"
  !if &not $status
    ; Not found, force wrap, search and finish
    beginning-of-buffer
    search-forward "\CEm"
  !endif
!emacro

; Advance to the next link in the backward direction
0 define-macro ehf-backward-link
  !if &les @# 0
    set-variable #l0 &sub 0 @#
    #l0 ehf-forward-link
  !endif
  ; move back 3 chars so if we are currently on a link we do move
  !force 2 backward-char
  !force @# search-backward "\CEm"
  !if &not $status
    ; Not found, force wrap, search and finish
    end-of-buffer
    search-backward "\CEm"
  !endif
  ; move to the end of the \CEm so the user can sensibly move forward
  ; and so that subsequent forw/back-link moves work as expected.
  2 show-region
!emacro

0 define-macro ehf-find-help
  set-variable #l0 @1
  !iif &set #l4 &sin "|" #l0  set-variable #l0 &lef #l0 &sub #l4 1
  !if &seq $buffer-bname "*help*"
    ; get the current page item so we can add it to the prev/next history
    beginning-of-buffer
    set-variable #l1 &mid @wl 2 &sub &len @wl 4
    2 forward-line
    !force -1 search-forward "\CEm\\[Prev]"
    !if $status
      ; this is the prev history
      8 backward-char
      set-mark
      search-backward "\CEs"
      2 forward-char
      copy-region
      set-variable #l2 @y
      -1 yank
    !else
      set-variable #l2 ""
    !endif
    !force -1 search-forward "\CEm\\[Next]"
    !if $status
      ; this is the next history
      8 backward-char
      set-mark
      search-backward "\CEs"
      2 forward-char
      copy-region
      set-variable #l3 @y
      -1 yank
    !else
      set-variable #l3 ""
    !endif
  !else
    set-variable #l1 ""
    set-variable #l2 ""
    set-variable #l3 ""
  !endif
  !force help-item #l0
  !if $status
    !if &seq &lef #l2 &len #l0 #l0
      ; same as prev, remove from prev, add current to next
      set-variable #l2 &rig #l2 &add &len #l0 1
      set-variable #l3 &cat &cat #l1 "|" #l3
    !else
      set-variable #l2 &cat &cat #l1 "|" #l2
      !if &seq &lef #l3 &len #l0 #l0
        ; same as next, remove from next
        set-variable #l3 &rig #l3 &add &len #l0 1
      !else
        ; not the same so going in different direction so del next
        set-variable #l3 ""
      !endif
    !endif
    popup-window  "*help*"
    ; move past the [Home] line
    2 forward-line
    end-of-line
    -1 buffer-mode "view"
    !iif &gre &len #l2 1  insert-string &spr " \CEs%s\CEm[Prev]\CEe" #l2
    !iif &gre &len #l3 1  insert-string &spr " \CEs%s\CEm[Next]\CEe" #l3
    -1 buffer-mode "edit"
    1 buffer-mode "view"
    beginning-of-buffer
  !else
    set-variable $window-line #p1
    set-variable $window-col #p0
  !endif
!emacro

0 define-macro ehf-process-link
  set-variable #l0 $window-col
  set-variable #l1 $window-line
  ; end of link must be found within 5 lines
  !force -5 search-forward "\CEe"
  !if $status
    !force -5 search-backward "\CEs"
    !if &and $status &or &les $window-line #l1 &and &equ $window-line #l1 &not &gre $window-col #l0
      2 forward-char
      set-mark
      -1 search-forward "\CEm"
      2 backward-char
      copy-region
      set-variable #l2 @y
      -1 yank
      !if &seq #l2 ""
        2 forward-char
        set-mark
        -1 search-forward "\CEe"
        2 backward-char
        copy-region
        set-variable #l2 @y
        -1 yank
      !endif
      ehf-find-help #l2
      !return
    !endif
  !endif
  set-variable $window-line #l1
  set-variable $window-col #l0
  !iif &not &inw @wc  -8 ml-write "Error: Not in a link!"
  ; Goto beginning of word and place mark
  forward-char
  backward-word
  !if $window-col
    backward-char
    &con &seq @wc "\CC" 2 1 forward-char
  !endif
  set-mark
  ; Goto end of word and copy region
  forward-word
  copy-region
  set-cursor-to-mouse
  set-variable #l2 @y
  -1 yank
  ehf-find-help #l2
!emacro

0 define-macro ehf-spell-word
  set-variable #l0 $window-col
  set-variable #l1 0
  -2 show-region
  set-variable #l2 $window-col
  !if $window-col
    set-variable #l1 &sub #l0 $window-col
    backward-char
    !if &seq @wc "\CD"
      forward-char
      !if &seq @wc "A"
        ; End of scheme change
        forward-char
      !else
        ; skip the emf sections
        search-forward "\CDA"
      !endif
      set-variable .spell.check-word ""
      !return
    !elif &sin @wc "\CC\CE"
      ; meth link or colour scheme change
      2 forward-char
      set-variable #l2 $window-col
      set-variable #l1 1
    !endif
    !if &seq &mid @wl $window-col 2 "C-"
      2 forward-char
      set-variable #l2 $window-col
      set-variable #l1 1
    !endif
  !endif
  2 show-region
  backward-char
  !if &sin @wc "!-:"
    !repeat
      backward-char
    !until &not &sin @wc "!-:"
    set-variable #p9 &sub #l0 &add $window-col 1
    set-variable #l0 &add $window-col 1
    set-variable #l1 1
  !endif
  forward-char
  !iif &not #l1  !abort
  set-variable $window-col #l2
  set-variable .spell.check-word &mid @wl $window-col &sub #l0 $window-col
  -3 show-region
  set-variable $window-col #l0
  3 show-region
  !iif &and &equ &len #l1 1 &sin .spell.check-word "abcdefghijklmnopqrstuvwxyz-.0123456789"  set-variable .spell.check-word ""
!emacro

buffer-init-fhook "ehf"
