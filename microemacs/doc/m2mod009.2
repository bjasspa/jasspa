.\" -*- nroff -*-
.Id $Id: m2mod009.2,v 2.1 2001-05-14 19:54:01 jon Exp $
.Im MicroEmacs modes
.so me.tni
.TH magic 2m
.XI magic - "Regular expression search"
.SH NAME
magic \- Regular expression search
.SH SYNOPSIS
.B "magic Mode"
.sp
\fBM\fR \- mode line letter.
.SH DESCRIPTION
.B magic
mode enables the regular  expression  search capability used in the search and
the replace commands such as
.Ht search-forward 2 
and
.Ht query-replace-string 2 .
.PP
In the magic mode of \*(mE, certain characters gain special meanings when used
in a search pattern.  Collectively they are know as regular expressions, and a
limited number of them are supported in \*(mE. They grant greater  flexibility
when using the search commands (note that they also affect
.Ht isearch-forward 2
commands).
.PP
The  symbols  that have  special  meaning in magic mode are \fC^\fR,  \fC$\fR,
\fC.\fR, \fC\\|\fR, \fC*\fR, \fC[\fR \fC]\fR, \fC\\(\fR  \fC\\)\fR,  \fC\\{\fR
\fC\\}\fR and \fC\\\fR.
.PP
The characters \fC^\fR and \fC$\fR fix the search pattern to the beginning and
end of line,  respectively. The \fC^\fR character must appear at the beginning
of the search  string, and the \fC$\fR must appear at the end, otherwise  they
loose  their  meaning  and are  treated  just  like any other  character.  For
example, in magic mode,  searching  for the pattern  "\fCt$\fR"  would put the
cursor at the end of any line that ended with the letter  '\fCt\fR'. Note that
this is  different  than  searching  for  "\fCt<NL>\fR",  that  is,  '\fCt\fR'
followed by a newline  character. The character \fC$\fR (and \fC^\fR, for that
matter)  matches a position, not a character, so the cursor remains at the end
of the line. But a newline is a character  that must be matched, just like any
other  character, which means that the cursor is placed just after it - on the
beginning of the next line.
.PP
The  character  '\fC.\fR'  has a very  simple  meaning - it matches any single
character,  except the newline. Thus a search for  "\fCbad.er\fR"  could match
"\fCbadger\fR",  "\fCbadder\fR"  (slang),  or up to the  '\fCr\fR'  of
"\fCbad error\fR".
.PP
The character  \fC*\fR is known as closure, and means that zero or more of the
preceding  character will match. If there is no character  preceding,  \fC*\fR
has no special  meaning,  and since it will not match with a newline,  \fC*\fR
will have no special  meaning if  preceded  by the  beginning  of line  symbol
\fC^\fR or the literal  newline  character  \fC<NL>\fR.  The notion of zero or
more characters is important. If, for example, your cursor was on the line
.CS
This line is missing two vowels.
.CE
and a search was made for "\fCa*\fR", the cursor would not move, because it is
guaranteed  to  match  no  letter   '\fCa\fR',   which  satisfies  the  search
conditions.  If you  wanted to search  for one or more of the  letter 'a', you
would search for "\fCaa*\fR",  which would match the letter \fCa\fR, then zero
or more of them, note that this pattern is better searched using "\fCa+\fR".
.PP
The character  "\fC+\fR" is the same as "\fC*\fR"  except that it searches for
one or more occurrences of the preceding character.
.PP
The  character  \fC[\fR  indicates  the beginning of a character  class. It is
similar to the  \fIany\fR  (\fC.\fR)  character,  but you get to choose  which
characters you want to match. The character  class is ended with the character
\fC]\fR.  So,  while  a  search  for  "\fCba.e\fR"  will  match  "\fCbane\fR",
"\fCbade\fR",  "\fCbale\fR",  "\fCbate\fR",  et  cetera,  you can  limit it to
matching  "\fCbabe\fR" and "\fCbake\fR" by searching for "\fCba[bk]e\fR". Only
one of the  characters  inside the \fC[\fR and \fC]\fR will match a character.
If in fact  you want to match  any  character  except  those in the  character
class,  you can put a \fC^\fR  as the  first  character.  It must be the first
character  of the class, or else it has no special  meaning.  So, a search for
\fC[^aeiou]\fR  will  match any  character  except a vowel,  but a search  for
\fC[aeiou^]\fR  will  match  any  vowel  or a  \fC^\fR.  If you  have a lot of
characters in order that you want to put in the character class, you may use a
dash (\fC-\fR) as a range character. So, \fC[a-z]\fR will match any letter (or
any lower case letter if exact mode is on), and \fC[0-9a-f]\fR  will match any
digit or any  letter  '\fCa\fR'  through  '\fCf\fR',  which  happen  to be the
characters for hexadecimal  numbers. If the dash is at the beginning or end of
a character class, it is taken to be just a dash.
.PP
The \fC?\fR  character  provides a simple zero or one  occurrence  test of the
previous  character e.g. "\fCca?r\fR"  matches  "\fCcr\fR" and "\fCcar\fR", it
will not match "\fCcaar\fR".
.PP
Where a  previous  item has a range of  repetitions  then the  \fC\\{N,M\\}\fR
syntax  may be used to  denote  the  minimum  and  maximum  iterations  of the
previous  item. Where a set quantity of repetitions is required then the simpler
syntax  of  \fC\\{N\\}\fR  may  be  used.  i.e.   "\fCca\\{2\\}r\fR"   matches
"\fCcaar\fR", "\fCca\\{2,3\\}r\fR" matches "\fCcaar\fR" and "\fCcaaar\fR".
.PP
The escape character  \fC\\\fR is for those times when you want to be in magic
mode,  but  also  want  to use a  regular  expression  character  to be just a
character. It turns off the special  meaning of the character. So a search for
"\fCit\\.\fR"  will  search for a line with  "\fCit.\fR",  and not  "\fCit\fR"
followed by any other  character. The escape  character  will also let you put
\fC^\fR,  \fC-\fR, or \fC]\fR  inside a character  class with no special  side
effects.
.PP
In
.Hl search-replace query-replace-string 2
strings the \fC\\(\fR  \fC\\)\fR pair may be used to group  characters  for in
the  search  string  for  recall  in the  replacement  string.  The  \fC\\(\fR
\fC\\)\fR  bracket pair is recalled using  \fC\\1\fR-\fC\\9\fR  in the replace
string,  \fC\\1\fR is the first pair, \fC\\1\fR the second and so on. Hence to
replace  \fC%dgdg%name%dhdh%\fR with \fC%dgdg%names%dhdh%\fR then we could use
the           following            search            replace            string
\fC\\(%[a-z]+%\\)\\([a-z]*\\)\\(%[a-z]+%\\)\fR          replacing         with
\fC\\1\\2s\\3\fR.
.PP
\fC\\0\fR in the replace string implies the whole string.
.PP
A summary of magic mode special characters are defined as follows:-
.RS
.IP \fB^\fR
Anchor search at beginning of line
.IP \fB$\fR
Anchor search at end of line
.IP \fB.\fR
Match any character except \fC<NL>\fR
.IP \fB*\fR
Match zero or more occurrences of the preceding item.
.IP \fB\\\\|\fR
Match either/or i.e.  \fCcar\\|bike\fR  matches the work \fCcar\fR and matches
the word \fCbike\fR.
.IP \fB+\fR
Match one or more occurrences of the preceding item.
.IP \fB?\fR
Match zero or one occurrences of the preceeding item.
.IP \fB[]\fR
Match a class of characters (\fC[a-z]\fR would be all alphabetics)
.IP \fB\\\\\fR
Take next literally
.IP "\fB\\\\{\|\fIN\fR\|\fB,\fR\|\fIM\fR\fB\|\\\\}\fR"
Match a minimum of \fIN\fR occurrences and maximum of \fIM\fR occurrences of the
preceeding item.
.IP "\fB\\\\{\|\fIN\fR\|\fB\\\\}\fR"
Match a \fIN\fR occurrences of the preceeding item.
.IP \fB\\\\(...\\\\)\fR
Delimit  pattern to replicate in replace  string. Max of 9 allowed.  Called in
replace  string with  \fC\\1\fR,..,\fC\\9\fR.  1 being 1st etc.  \fC\\0\fR  or
\fC\\&\fR in the replace string is the whole string. i.e.
.sp
Search: \fB\\(ab\\)\\(dc\\)\fR
.br
Replace: \fB\\1\\2 \\1\\2\fR
.br
on "\fBabdc\fR" => "\fBabdc abdc\fR"
.RE
.SH "SEE ALSO"
.na
.Ht buffer-mode 2 ,
.Ht global-mode 2 ,
.Ht query-replace-string 2 ,
.Ht search-forward 2 .
.br
.Hl "Regular Expressions" RegularExpressions 2
.ad
.FH
