.\" -*- nroff -*-
.\" Copyright (C) 1988-2009 JASSPA (www.jasspa.com)
.\"
.\" This is part of JASSPA's MicroEmacs, see the LICENSE file for licensing and
.\" copying information.
.\"
.Id $Id: m2cmd024.2,v 2.7 2025/09/09 10:38:33 jon Exp $
.Im MicroEmacs command|macrodevelop
.so me.tni
.TH create-callback 2
.XI create-callback - "Create a timer callback"
.SH NAME
create-callback \- Create a timer callback
.Me $a
.SH SYNOPSIS
.na
.I n
.B create-callback
"\fIcommand\fR"
.ad
.SH DESCRIPTION
.B create-callback
creates a timer based callback  command. The given  \fIcommand\fR  is called
back in  \fIn\fR  milliseconds  time. This can be used by the user to  monitor
system  events (such as incoming  mail). The command is called only once, but
if the command creates a callback of itself a loop is created.
.PP
If a negative argument \fIn\fR is given any pending callback for \fIcommand\fR
is cancelled.
.SH EXAMPLE
The following example creates a callback that is invoked every 10 minutes.
.Me $emf-scheme
.CS
define-macro Example-callback
    ml-write "It was 10 minutes since you last saw me!"
    600000 create-callback Example-callback
!emacro
Example-callback
.CE
.Me $ehf-scheme
The following example reimplements the test given in help page for
.Ht command-wait 2 ,
using \fBcreate-callback\fR in place of \fBcommand-wait\fR:
.Me $emf-scheme
.CS
; change the following variable to change the target delay (in ms)
set-variable #g9 100
set-variable #g8 0
set-variable #g7 $unix-time
set-variable #g1 -1
set-variable #g2 0
define-macro Callback-test
  set-variable #g0 $unix-time
  set-variable #g8 &add #g8 #g2
  !if &equ &inc #g1 1 100
    ml-write &spr "Result: %d iterations took %.3fsec, average time %.2fms, average value for command-wait %.2f" #g1 &fsub #g0 #g7 &fmul 1000 &fdiv &fsub #g0 #g7 #g1 &fdiv #g8 #g1
  !else
    ; Do work here...
    ml-write &spr "Loop: %4d %s" #g1 &mid #g0 7 6
    ; This gets the current time and removes the time at the start of our work, this is then removed from our target frame-rate
    !iif &les &set #g2 &sub #g9 &fmu 1000 &fsub $unix-time #g0 1  set-variable #g2 1
    #g2 create-callback Callback-test
  !endif
!emacro

Callback-test
.CE
.Me $ehf-scheme
Global register variables are being used for ease but should not be for any 
code needing to be reliable!
.SH NOTES
A call-back  cannot  interrupt while \*(mS is active, instead the call-back is
delayed until \*(mS becomes  inactive. \*(mS is considered to be inactive when
it is waiting  for user input, this could be during the  execution  of another
macro. If a command or macro  requires no user input then once  execution  has
started, it cannot be interrupted by a call-back macro.
.PP
The resolution of the clock is platform  dependent,  some platforms  limit the
minimum timer period to 10 milliseconds.
.PP
\*(mS  does  not  guarantee  to  service  the  callbacks  within  any set time
constraints, the resultant  callback  intervals may be of a slightly different
duration than requested.
.PP
When a callback macro is executed, the key given by
.Ht @cck 4
is "\fCcallback\fR. If the current buffer has a
.Ht $buffer-input 5
command set, this command will be called instead of the callback  command with
\fB@cc\fR and \fB@cck\fR set  appropriately. It is the  responsibility  of the
input macro to deal with the callback.
.SH "SEE ALSO"
.na
.Ht $auto-time 5 ,
.Ht define-macro 2 .
.ad
.FH
