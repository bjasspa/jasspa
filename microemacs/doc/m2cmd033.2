.\" -*- nroff -*-
.\" This is part of the JASSPA MicroEmacs documentation files.
.\" Copyright (c) 1998-2009 JASSPA (www.jasspa.com)
.\" See the file "me.nrs" for copying and conditions.
.\"
.\"  Created By    : Jon Green
.\"  Created       : Sat Jul 25 00:00:27 1998
.\"
.Id $Id: m2cmd033.2,v 2.16 2009-08-29 17:13:09 jon Exp $
.Im MicroEmacs command|indent|scuts
.so me.tni
.TH indent 2
.XI indent - "Manage the auto-indentation methods"
.SH NAME
indent \- Manage the auto-indentation methods
.Me $a
.SH SYNOPSIS
.na
.I 0
.B indent
"\|\fIind-no\fR\|"
"\|\fIflags\fR\|"
[ "\|\fIlook-back\fR\|" ]
[ "\|\fIindent-scheme\fR\|" ]
.sp
.B indent
"\|\fIind-no\fR\|"
"\|\fItype\fR\|"
"\|\fItoken\fR\|"
[ "\|\fIclose\fR\|" "\|\fIignore\fR\|" ]
[ "\|\fIindent\fR\|" ]
.br
.B indent
"\|\fIind-no\fR\|"
"\fBt\fR"
"\|\fItoken\fR\|"
[ "\|\fItoken\fR\|" ]
"\|\fIindent-scheme\fR\|"
.br
.B indent
"\|\fIind-no\fR\|"
"\fBx\fR" | "\fBw\fR"
"\|\fItoken\fR\|"
"\|\fIindent\fR\|"
"\|\fIindent-scheme\fR\|"
.ad
.SH DESCRIPTION
The \fBindent\fR  command creates and manages the auto-indenting  methods, the
process of creating a new indentation method is best described in
.Hl "File Language Templates" languageTemplates 2 .
The  command  takes  various  forms as defined by the  arguments.  Each of the
argument configurations is defined as follows:-
.SS "Indentation Method Creation"
.na
.I 0
.B indent
"\|\fIind-no\fR\|"
"\|\fIflags\fR\|"
"\|\fIlook-back\fR\|"
[ "\|\fIindent-scheme\fR\|" ]
.ad
.PP
With an argument of \fC0\fR,  \fBindent\fR  creates a new  indentation  method
with the integer handle  \fIind-no\fR. The indentation method is assigned to a
buffer by setting
.Ht $buffer-indent 5
to \fIind-no\fR. \fIind-no\fR cannot be 0 as setting
.B $buffer-indent
to zero disables indentation.
If the indentation method with the same \fIind-no\fR already exists, then the
existing method is deleted and a new method may be created.
.PP
.I flags
Sets the indent bit flags where:-
.IP \fC0x01\fR
Indent  method is case  insensitive.  Note that  \fBindent\fR  tokens  must be
specified in lower case.
.IP \fC0x02\fR
Defines a \fBfast  look-back\fR  indentation  scheme to be used in conjunction
with the  current  indentation  scheme. The fast  look-back  scheme is used to
identify a change in the  current  buffer's  indent  scheme, for  example  the
starting  of  embedded  script in html. The  \fIindent-scheme\fR  argument  is
required  when  this  flag bit is set and  identifies  the  handle  of the fast
look-back  indentation  scheme to be used.
.IP
This feature is only used when indent is required to support  multiple complex
indentation  schemes within a single file, for example  indentation of scripts
within html, asp or php pages etc. When defined the given  \fIindent-scheme\fR
must also be defined using \fBindent\fR, the scheme's \fIlook-back\fR argument
is  typically  set to look  back a long way to  ensure  correctness,  i.e. 500
lines, but it should therefore contain few tokens to maintain performance.
.IP \fC0x04\fR
Defines C mode of  indentation.  C styling  is built  into the  editor  and is
enabled  through the  \fBindent\fR  command. The C form is  discussed  in more
detail in the next section.
.IP \fC0x08\fR
Ring the bell if
.Ht goto-matching-fence 2
fails.
.IP \fC0x10\fR
Comment  continuation  mode. This is only valid when C mode is defined  and is
defined further in the next section.
.LP
.I look-back
specifies the maximum  number of lines, prior to the current line,  considered
when calculating the indentation of a line, i.e. if there are  \fIlook-back\fR
number of lines  between the line to be indented  and the  previous  non-blank
line then the current indentation is lost.
.PP
If \fIlook-back\fR is set to 0 then the indentation is effectively disabled as
the  current  indentation  can  never be found.  The  maximum  value  has been
increase as of January 2004 from 255 to an integer (large  number), a value of
10 is  typically  sufficient  for a normal  indent  scheme  and 500 for a fast
look-back scheme.
.SS "C Indentation"
.na
.I 0
.B indent
"\|\fIind-no\fR\|"
"\|\fIflags\fR\|"
.br
.B indent
"\|\fIind-no\fR\|"
.C s
"\|\fIstatement\fR\|"
.br
.B indent
"\|\fIind-no\fR\|"
.C c
"\|\fIcontinue\fR\|"
.br
.B indent
"\|\fIind-no\fR\|"
.C x 
"\|\fImax\fR\|"
.br
.B indent
"\|\fIind-no\fR\|"
.C b
"\|\fIbrace\fR\|"
.br
.B indent
"\|\fIind-no\fR\|"
.C e
"\|\fIbraceStatement\fR\|"
.br
.B indent
"\|\fIind-no\fR\|"
.C w
"\|\fIswitch\fR\|"
.br
.B indent
"\|\fIind-no\fR\|"
.C a
"\|\fIcase\fR\|"
.br
.B indent
"\|\fIind-no\fR\|"
.C m
"\|\fImargin\fR\|"
.br
.B indent
"\|\fIind-no\fR\|"
.C u
"\|\fIcomcont\fR"
.ad
.PP
C mode is built  into the  editor by  default  and is  enabled by setting  the
indent  intialization  flag bit  \fC0x04\fR.  With this bit  enabled  then the
indentation  for  'C'  mode  is  defined  through  the  additional  arguments.
\fIind-no\fR  and \fIflags\fR have the same meaning as defined in the previous
section. C mode is typically  initialized  with the value 12. The  remaining C
arguments are defined as follows:
.TP
\fBindent\fR "\|\fIind-no\fR\|" "\|\fCs\fR" "\|\fIstatement\fR" (=t)
.\"
The indent of the current  line is derived  from  \fIstatement\fR value plus the
indent of the last c token  (\fIif\fR,  \fIelse\fR,  \fIwhile\fR  etc.) or the
last  '\fC{\fR'  (which ever was found first). i.e. if the last  '\fC{\fR' was
found at column 16 then the current line will be indented to 20:-
.ne 4
.RS
.CS
        {
            xxxxxxxxxx
            xxxxxxxxxx
.CE 0
.RE
.IP
or
.ne 3
.RS
.CS
        if(xxxxx)
            xxxxxxxxxx
.CE 0
.RE
.IP
C tokens are only used to indent the next line, whereas  '\fC{\fR' are used in
indenting every line to it's partnering '\fC}\fR'.
.TP 
\fBindent\fR "\|\fIind-no\fR\|" "\|\fCc\fR" "\fIcontinue\fR" (=3/2t)
.\"
.I continue
sets the  indent  to be added to a split  line,  i.e. for an  indent  of 20, a
continued statement would be indented to 30. A continued statement is a single
c  statement  which is spread over 2 or more lines, the 2nd and any  following
lines would be indented to 30. For example
.ne 4
.RS
.CS
        thisIsAVeryLongVariableWhichMeansAssignmentsAreSplit =
                  ThisIsTheFirstContinuedStatementLine +
                  ThisIsTheSecondContinuedStatementLine + etc ;
.CE 0
.RE
.IP
The indent is changed if there is an open bracket,  continued  statements  are
indented to the depth of the open bracket plus one, e.g.
.ne 6
.RS
.CS
        func(firstFuncArg,
             secondFuncArg,
             anotherBracketForFun(firstAnotherBracketForFunArg,
                                  secondAnotherBracketForFunArg),
             thirdFuncArg) ;
.CE 0
.RE
.TP
\fBindent\fR "\|\fIind-no\fR\|" "\|\fCx\fR" "\|\fImax\fR\|"
.\"
\fImax\fR  sets an upper  limit of the  indentation  where an open  bracket is
encountered,  in the case where the leading  indent of the  function  name and
open  bracket  exceeds  \fImax\fR,  then the  continuation  is  reduced to the
continuation indent.
.IP
The effect of  \fImax\fR  is  described  as follows; if  \fImax\fR is set to a
large value then the default open brace offset appearence is:-
.ne 3
.RS
.CS
longVariable = LongFunctionNameWhichMeans(isSoFar,
                                          OverAndYouRunOutOfRoom) ;
.CE 0
.RE
.IP
Setting \fImax\fR to 16 gives:
.ne 3
.RS
.CS
longVariable = LongFunctionNameWhichMeans(isSoFar,
                overAndYouRunOutOfRoom) ;
.CE 0
.RE
.IP
Where by the second argument indent has been  artificially  reduced because of
it's length.
.TP
\fBindent\fR "\|\fIind-no\fR\|" "\|\fCb\fR" "\|\fIbrace\fR" (=0)
.\"
Sets the indent of a '\fC{\fR'  and a '\fC}\fR' on a new line from the current
statement indent. For example, a value of 0 results in the following 
.ne 6
.RS
.CS
                if(xxxxxx)
                {
                    xxxxxxxxxx
                    xxxxxxxxxx
                }
.CE 0
.RE
.IP
With a setting of 2, this would become:-
.ne 6
.RS
.CS
                if(xxxxxx)
                  {
                    xxxxxxxxxx
                    xxxxxxxxxx
                  }
.CE 0
.RE
.IP
This works in conjunction  with  \fIstatement\fR  and  \fIbraceStatement\fR  a
change to \fIstatement\fR will change the position of '\fC{\fR's. In summary:
.ne 7
.RS
.CS
if (condition)      if (condition)     if (condition)
{                       {                {
    statement;          statement;         statement;
}                       }                }

brace = 0             brace = 4         brace = 2 
.CE 0
.RE
.TP
\fBindent\fR "\|\fIind-no\fR\|" "\|\fCe\fR" "\|\fIbraceStatement\fR" (t)
.\"
The  \fIbraceStatement\fR  defines  the  indentation  following  a curly brace
\'\fC{\fR' which follows a statement.
.TP 
\fBindent\fR "\|\fIind-no\fR\|" "\|\fCw\fR" "\|\fIswitch\fR" (=0)
.\"
The  additional  indent to be  applied  after a  \fBswitch\fR  statement,  the
\fIstatement\fR  indent is applied in addition to the \fIswitch\fR indent. See
the \fIcase\fR argument.
.TP
\fBindent\fR "\|\fIind-no\fR\|" "\|\fCa\fR" "\|\fIcase\fR" (=-t)
\fIswitch\fR value sets the offset of a "\fCcase\fR"  entry  statement  from the
opening brace left margin position. The default value is zero. e.g.
.ne 9
.RS
.CS
                switch(xxxxxxxxx)
                {
                case 1:
                    xxxxxxxxxx
                    xxxxxxxxxx
                case 2:
                    xxxxxxxxxx
                }
.CE 0
.RE
.IP
Setting  the  value to 4,  increases  the  leading  space on the  "\fCcase\fR"
statement, e.g.
.ne 9
.RS
.CS
                switch(xxxxxxxxx)
                {
                    case 1:
                        xxxxxxxxxx
                        xxxxxxxxxx
                    case 2:
                        xxxxxxxxxx
                }
.CE 0
.RE
.IP
\fIcase\fR sets the offset of the lines following a "\fCcase\fR" statement,
from the  current  indent. For  example,  using the default  settings,  if the
current  indent  was 20 then a line  starting  with a  "\fCcase\fR"  would  be
indented to 16, i.e.
.ne 4
.RS
.CS
                    xxxxxxxxxx
                case xxxxxxxxxx
                    xxxxxxxxxx
.CE 0
.RE
.IP
This is used inside  "\fCswitch\fR" statements, the default setting give the following
lay-out:-
.ne 7
.RS
.CS
                switch(xxxxxxxxxx)
                {
                case 1:
                    xxxxxxxxxx
                    xxxxxxxxxx
                case 2:
.CE 0
.RE
.IP
This works in  conjunction with the \fIstatement\fR variable,
a change  to \fIstatement\fR will change the position of '\fC{\fR's.
.IP
In summary:
.ne 11
.RS
.CS
switch (variable)   switch (variable)
{                   {
case 1:                 case 1:
    break;                  break;
default:                default:
    break;                  break;
}                    }

  switch = 0           switch = t
  case = -t            case = -t
.CE 0
.RE
.TP
\fBindent\fR "\|\fIind-no\fR\|" "\|\fCm\fR" "\|\fImargin\fR" (=-1)
.\"
If  inserting a comment at the end of a C line, it is tedious  typing  \fIx\fR
number of spaces to the  comment  column (by default tab does not insert a tab
when
.Ht indent 2
is enabled, it reformats the  indentation of the line regardless of the cursor
position). This variable sets the indent column of these comments. So with the
default settings and the following line,
.ne 2
.RS
.CS
        xxxxxx ;/
.CE 0
.RE
.IP
when a '*' is entered the line becomes
.ne 2
.RS
.CS
        xxxxxx ;                /*
.CE 0
.RE
.IP
The  indenting  of the  "\fC/*\fR"  occurs  only if  there is text on the line
before  it,  and  none  after  it. If  the  current  column  is  already  past
\fImargin\fR then it is indented to the next tab stop.
.IP
A value of -1 disables this feature.
.IP
In summary:
.RS
.ne 4
.CS
    statement;        /* Comment */      statement; /* Comment */

    margin = 40                          margin = -1
.CE 0
.RE
.TP
\fBindent\fR "\|\fIind-no\fR\|" "\|\fCu\fR" "\|\fIcomcont\fR" ("\fC * \fR")
.\"
This argument is only  specified if  \fIflags\fR  bit  \fC0x10\fR is set.
This defines the string which is inserted  when a new line is started while in
a comment. The string is only inserted if the cursor is at the end of the line
when the
.Ht newline 2
command is given. For  example, for the default  settings, if a  \fBnewline\fR
was  entered at the end of the first  line, the second  line would  initialize
to:-
.ne 3
.RS
.CS
                /* xxxxxxxxxx
                   @
.CE 0
.RE
.IP
where '\fC@\fR' is the current cursor position. With a setting of "\fC * \fR",
then:-
.ne 3
.RS
.CS
                /* xxxxxxxxxx
                 * @
.CE 0
.RE
.IP
In summary:
.RS
.CS
/*                  /*               /* Comment
 * Comment          ** Comment          Comment */
 * Comment          ** Comment
 */                 */
 comcont = " * "    comcont = "** "   comcont = "   "
.CE 0
.RE
.LP
.ne 12
The standard indent rule for setting up C and Java is defined as:-
.Me $emf-scheme
.CS
    0 indent .hilight.c 12
    indent .hilight.c "s" t     ; Default may be omitted
    indent .hilight.c "e" t     ; Default may be omitted
    indent .hilight.c "c" 3/2t  ; Default may be omitted
    indent .hilight.c "x" 0     ; Default may be omitted
    indent .hilight.c "b" 0     ; Default may be omitted
    indent .hilight.c "w" 0     ; Default may be omitted
    indent .hilight.c "a" -t    ; Default may be omitted
    indent .hilight.c "m" -1    ; Default may be omitted
    indent .hilight.c "u" " * "
.CE
.Me $ehf-scheme
.ne 4
This is typically written with the defaults omitted.
.Me $emf-scheme
.CS
    0 indent .hilight.c 12
    indent .hilight.c "u" " * "
.CE
.Me $ehf-scheme
.ne 7
If GNU Emacs  indentation  is required  then the following  definition  may be
used:- 
.Me $emf-scheme
.CS
    0 indent .hilight.c 12            ; if (a == b)
    indent .hilight.c "e" t           ;   {
    indent .hilight.c "b" t           ;     c = d;
    indent .hilight.c "s" t           ;   }
    indent .hilight.c "u" " * "
.CE
.Me $ehf-scheme
.ne 6
The default configuration scheme is defined as:-
.Me $emf-scheme
.CS
    0 indent .hilight.c 12            ; if (a == b)
    indent .hilight.c "e" t           ; {
    indent .hilight.c "b" 0           ;   c = d;
    indent .hilight.c "s" t           ; }
    indent .hilight.c "u" " * "
.CE
.Me $ehf-scheme
Where  comments  are to be aligned at the end of a  statement  then the margin
parameter may be defined in \fC<user>.emf\fR.
.Me $emf-scheme
.CS
    indent .hilight.c "m" 40
.CE 0
.Me $ehf-scheme
.SS "Indentation Rule Creation"
.na
.B indent
"\|\fIind-no\fR\|"
"\|\fItype\fR\|"
"\|\fItoken\fR\|"
[ "\|\fIclose\fR\|"
[ "\|\fIignore\fR\|" ]]
[ "\|\fIindent\fR\|" ]
[ "\|\fIindent2\fR\|" ]
[ "\|\fIindent-scheme\fR\|" ]
.ad
.PP
With the default argument of \fC1\fR,  \fBindent\fR creates a new rule for the
indentation  method  \fIind-no\fR  which must have previously been defined and
initialized.
.PP
The  indentation of a line in a buffer, which is using an indentation  method,
is  affected  by the token  types  matched  on the line  (\fItype\fR  \fCf\fR,
\fCo\fR,  \fCs\fR)  and  the  current  indentation  (if  line  is not of  type
\fCf\fR).
.PP
The  current  indentation  is  determined  by  searching  the  previous  lines
(look-back) for the indentation of the last indented line. This may not simply
be the  indentation  of the last  non-blank  line, the  exact  indentation  is
determined  by searching for tokens in the line and assessing  their effect on
the indentation of the current line.
.PP
The format of the regex valid in the "\fItoken\fR" and "\fIclose\fR" arguments
are the same as at used by hilight token creation, see
.Ht hilight 2
for more information.
.PP
The  \fIindent\fR  argument  specifies the indent to apply in characters.  The
indent may be specified as a literal integer value, a positive value increases
the indent a negative  value  reduces  the  indent.  The  \fIindent\fR  may be
specified in terms of buffer specific generic value
.Ht $buffer-indent-width 5
using the value  \fBt\fR,  indicating a tab width. The value of \fBt\fR may be
prefixed with a signed  integer or vulgar  fraction  which adjusts the size of
the indentation width by the appropriate amount. Modifying the value of
.Hl $buffer-indent-width $buffer-indent-width 5
modifies the indent width that is applied  allowing the indentation  method to
be specified independently of the indentation width.
.PP
The  indent  tokens  may be  assigned  one of the  following  types,  using the
\fItype\fR  argument.  If the type is  specified  in upper case then the token
must be surrounded by non-alpha-numeric characters:
.TP
\fBFixed\fR (\fI\|type\fR = '\fCf\fR' or '\fCF\fR')
.\"
A line  containing  a  fixed  indent  token  will  be  indented  to the  given
\fIindent\fR column from the left-hand edge. \fIindent\fR is the only argument
specified. e.g. \*(mS macro \fC!goto\fR labels:-
.RS
.Me $emf-scheme
.CS
indent .hilight.emf f "*" 0
.CE
.Me $ehf-scheme
producing
.CS
.ne 3
    \.....
*label
    \.....
.CE
The fixed token must be the first non-white character on the line, the rest of
the line is ignored. The indentation of the previous line has no effect.
.RE
.TP
\fBIndent-from-next-line-onward\fR (\|\fItype\fR = '\fCn\fR' or '\fCN\fR')
.\"
The  indentation  changes by \fIindent\fR  from the next line onwards from the
current line.  \fIindent\fR  is the only argument  specified. e.g. \*(mS macro
\fC!if\fR:-
.RS
.Me $emf-scheme
.CS
indent .hilight.emf n "!if" t
.CE
.Me $ehf-scheme
Keeps  the  indentation  of  the  \fC!if\fR  line  the  same  as the  previous
indentation,  change  the  indentation  on the  following  lines by an extra
.Hl $buffer-indent-width $buffer-indent-width 5
characters, to produce:
.CS
.ne 3
\....
!if
    \....
.CE 0
.RE
.TP
\fBIndent-from-current-line-onward\fR (\|\fItype\fR = '\fCo\fR' or '\fCO\fR')
.\"
Increment  the  current  and  following  lines  indentation  by  \fIindent\fR.
\fIindent\fR is the only argument specified. e.g. \*(mS macro \fC!endif\fR
.RS
.Me $emf-scheme
.CS
indent .hilight.emf o "!endif" -t
.CE
.Me $ehf-scheme
decrement the indent of the \fC!endif\fR  line and following lines by
.Hl $buffer-indent-width $buffer-indent-width 5
spaces producing:
.CS
.ne 3
    \....
!endif
\....
.CE 0
.RE
.TP
\fBUniversal-indent\fR (\|\fItype\fR = '\fCu\fR' or '\fCU\fR')
.\"
Independent  control of the current line and next line indent.  Increment  the
current line indentation by \fIindent\fR and the following line indentation by
\fIindent2\fR.  Where  \fIindent\fR  represents indent with the \fCo\fR option
and \fIindent2\fR  represents  indent with the \fCn\fR option. This command is
useful  where the  indentation  of both the  current  and next line need to be
controlled independently given a single token. 
.RS
.Me $emf-scheme
.CS
indent .hilight.emf u "<cfelse" -t 3/2t
.CE
.Me $ehf-scheme
This  has  been  used  in the  \fIColdFusion\fR  indentation  to  control  the
\fC<cfelse>\fR  condition which requires  control of both the current line and
next  line  with   different   values   from  the  same  token.  Note  that  a
\fBIndent-single\fR  could be implemented  with this command using an argument
of \fC-t t\fR.
.RE
.TP
\fBIndent-single\fR (\fI\|type\|\fR = '\fCs\fR' or '\fCS\fR')
.\"
Changes the  indentation  of the current  line  \s-1ONLY\s0  by  \fIindent\fR.
\fIindent\fR is the only argument specified. e.g. \*(mS macro \fC!elif\fR:-
.RS
.Me $emf-scheme
.CS
indent .hilight.emf o "!elif" -t
.CE
.Me $ehf-scheme
decrements  the  indentation  of the  \fC!elif\fR  line by
.Hl $buffer-indent-width $buffer-indent-width 5
characters,  but  restores the previous  indentation  after the current  line,
producing:
.CS
.ne 3
    \....
!elif
    \....
.CE 0
.RE
.TP
\fBBracket\fR (\fI\|type\|\fR = '\fCb\fR' or '\fCB\fR')
.\"
A bracket  should be used when a  starting  token  pairs with a closing  token
which may span  multiple  lines.  i.e. the  opening  and  closing  braces of a
programming  language.  Note  that the  opening  and  closing  tokens  must be
different  otherwise  they  cannot be  differentiated.  A bracket has two main
effects:
.RS
.IP "When the previous line has an unmatched open bracket"
In this  situation the current line is indented to the right of the mismatched
bracket.
.IP "When the previous line has an unmatched close bracket"
In this  situation  the matching open bracket is hunted for in previous  lines
until either the \fIlook-back\fR limit (See \fBIndentation Method Creation\fR)
is  exhausted or the bracket is matched, in which case the indent of that line
is used.
.LP
For a bracket the only other  argument  given is the  \fIclose\fR.  e.g. tcl's
\'\fC(\fR' and '\fC)\fR' brackets
.Me $emf-scheme
.CS
indent .hilight.tcl b "(" ")"
.CE
.Me $ehf-scheme
Which produces:
.CS
.ne 5
\....
\.... (....
      \....
      \....)
\....
.CE 0
.RE
.TP
\fBContinue\fR (\|\fItype\fR\| = '\fCc\fR' or '\fCC\fR')
.\"
Indicates that when \fItoken\fR is found on the current line, the next line is
a  continuation  of the current line. The  indentation of the next line is the
indentation  of the  first  continuation  line  plus the  given  \fIindent\fR.
\fIindent\fR is the only argument specified. e.g. tcl's '\\'
.RS
.Me $emf-scheme
.CS
indent .hilight.tcl c "\\\\" 3/2t
.CE
.Me $ehf-scheme
A simple example is
.CS
.ne 4
\....
12345678901234567890      \\
         \....
\....
.CE
When used in conjunction with brackets, the following effect is observed:
.CS
.ne 7
\....
12345678901234567890      \\
          \....(....       \\
               \....)      \\
          \....            \\
          \....
\....
.CE
This shows why the first continuation line (the \fC123456...\fR  line) must be
located and used as the base line from which the indentation is derived; again
the \fIlook-back\fR limits the search for this line.
.RE
.TP
\fBExclusion\fR (\fI\|type\|\fR = '\fCe\fR' or '\fCE\fR')
.\"
Used to exclude text between start  \fItoken\fR and \fIclose\fR token from the
indentation  calculation, typically used for quotes. The \fIignore\fR argument
is also specified (see
.Ht hilight 2
\fCtype 0x004\fR type bracket)
e.g. \*(mS macro quotes:-
.RS
.Me $emf-scheme
.CS
indent .hilight.emf e "\\"" "\\"" "\\\\"
.CE
.Me $ehf-scheme
e.g. tcl's quotes
.Me $emf-scheme
.CS
indent .hilight.tcl e "\\"" "\\"" "\\\\"
.CE
.Me $ehf-scheme
producing:-
.CS
\....
".... ignore { ... \\" ... ignore another { token ... "
\....
.CE 0
.RE
.TP
\fBIgnore\fR (\fI\|type\|\fR = '\fCi\fR' or '\fCI\fR')
.\"
Text to the right of a line containing \fItoken\fR is to be ignored; typically
used for comments. e.g. \*(mS macro '\fC;\fR' comment:-
.RS
.Me $emf-scheme
.CS
indent .hilight.emf i ";"
.CE
.Me $ehf-scheme
Or tcl's '\fC#\fR' comment
.Me $emf-scheme
.CS
indent .hilight.tcl i "#"
.CE
.Me $ehf-scheme
producing
.CS
.ne 3
\....
# ... ignore this { indent token
\....
.CE 0
.RE
.TP
\fBType\fR (\fI\|type\|\fR =  '\fCt\fR' or '\fCT\fR')
.\"
Used in a \fBfast look-back\fR  indentation scheme (see bit \fC0x02\fR of
\fB0 indent\fR  above) to define the scheme change tokens. The fast look-back token
typically shadows the \fCx\fR and \fCw\fR types and identifies the indentation
scheme. The token itself does not change the indentation, it simply identifies
the  indentation  scheme. The '\fCx\fR' or '\fCw\fR' types are used to perform
the actual indentation of the line if required.
.IP
If the  \fIindent-scheme\fR  is defined as zero (\fC0\fR) then the indentation
scheme is set to the same value as the
.Ht $buffer-indent 5
variable.
.IP
The following example is taken from the XML language  definition . A fast-look
back  scheme  is  used  (\fChilight.xmlT\fR)  to  search  for the  alternative
indentation  schemes  for  \fIjavascript\fR  and  \fIvbscript\fR.  The \fCt\fR
indent type defines the start of script  tokens and to switch the  indentation
to the new indent type.
.RS
.Me $emf-scheme
.CS
; Fast look-back indentation scheme
0 indent .hilight.xmlT 1 500
; Indentation scheme
0 indent .hilight.xml 3 20 .hilight.xmlT

!if &exist .indent.javascript
    indent .hilight.xmlT t "<script ... javascript>"   .indent.javascript
    indent .hilight.xml  x "<script ... javascript>" 2 .indent.javascript
    indent .indent.javascript w "</script>" -2 0
!endif
!if &exist .indent.vbscript
    indent .hilight.xmlT t "<script ... vbscript>"   .indent.vbscript
    indent .hilight.xml  x "<script ... vbscript>" 2 .indent.vbscript
    indent .indent.vbscript w "</script>" -2 0
!endif
indent .hilight.xmlT t "</script>" 0
indent .hilight.xml  o "</script>" -2
; Define the indentation tokens. XML is well defined so there are
; always opening and closing brackets.
indent .hilight.xml e "\\"" "\\"" "\\\\"
indent .hilight.xml b "<!--" "-->"
indent .hilight.xml b "<\\\\?" "\\\\?>"
indent .hilight.xml n "<[^/!]" 2
indent .hilight.xml o "</"    -2
indent .hilight.xml o "/>"    -2
.CE 0
.Me $ehf-scheme
.RE
.TP
\fBChange\fR (\fI\|type\|\fR = [\fCx\fR|\fCX\fR|\fCw\fR|\fCW\fR|\fCv\fR|\fCV\fR])
.\"
Change the indentation scheme from the current scheme to the new
.IR indent-scheme .
If the
.I indent-scheme
is specified as zero  (\fC0\fR) then the indentation scheme is set to the same
handle value as the
.Ht $buffer-indent 5
variable.
.I indent
specifies  the indent  value, when the  \fItype\fR is \fCw\fR then the current
line onwards is indented (similar to \fCo\fR), a \fItype\fR of \fCx\fR indents
the next line onwards (similar to \fCn\fR), a \fItype\fR of \fCv\fR indents
both the current line and next time onwards (similar to \fCu\fR).
.IP
Refer the the \fItype\fR\|=\fCt\fR for an example of indentation switching.
.SH EXAMPLE
Examples  of  indentation  method  creations  can  be  found  in  macro  files
\fChkemf.emf\fR,  \fChktcl.emf\fR and  \fChkvrml.emf\fR. The following example
is taken from \fChkemf.emf\fR:-
.Me $emf-scheme
.CS
!if &not &exist .hilight.emf
    set-variable .hilight.emf &pinc .hilight.next 1
!endif

\...

0 indent  .hilight.emf 0 10
indent .hilight.emf N "define-macro" t
indent .hilight.emf n "!if" t
indent .hilight.emf s "!eli" -t
indent .hilight.emf s "!els" -t
indent .hilight.emf o "!end" -t
indent .hilight.emf n "!whi" t
indent .hilight.emf o "!don" -t
indent .hilight.emf n "!rep" t
indent .hilight.emf o "!until" -t
indent .hilight.emf o "!ema" -t
indent .hilight.emf e "\\"" "\\"" "\\\\"
indent .hilight.emf i ";"
indent .hilight.emf f "*" 0
.CE 0
.Me $ehf-scheme
.PP
Note that a \fB.hilight\fR command variable is typically used as a buffer with
indentation  rules will almost certainly have hilighting and the same variable
is used to define the hilighting scheme.
.SH NOTES
The variables
.Ht $indent-width 5 ,
.Ht $buffer-indent-width 5
and the \fBt\fP indent  notation were  introduced in the November 2004 version
of \*(mS.
.PP
The electric C mode
.Hr cmode 2m
was removed in December 2004, as were the variables
.Hr $c-brace 5 ,
.Hr $c-case 5 ,
.Hr $c-contcomm 5 ,
.Hr $c-continue 5 ,
.Hr $c-margin 5
and
.Hr $c-statement 5 .
All replaced by the C Indent initialisation method.
.PP
The Universal indent (\fCu\fR) was introduced in the 2006 release.
.SH "SEE ALSO"
.na
.Hl "File Language Templates" languageTemplates 2 ,
.Ht $buffer-indent 5 ,
.Ht $buffer-indent-width 5 ,
.Ht $indent-width 5 ,
.Ht add-file-hook 2 ,
.Ht hilight 2 .
.ad
.FH
