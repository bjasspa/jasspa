.\" -*- nroff -*-
.\" Copyright (C) 1999-2009 JASSPA (www.jasspa.com)
.\"
.\" This is part of JASSPA's MicroEmacs, see the LICENSE file for licensing and
.\" copying information.
.\"
.\"  Created By    : Jon Green
.\"  Created       : Thu Jun 17 22:26:42 1999
.\"
.Id $Id: m2nar007.2,v 2.17 2025/08/28 01:55:36 jon Exp $
.Im MicroEmacs
.so me.tni
.TH "Build" 2
.XI "Build" - "Build"
.SH "BUILD"
\*(mE may be  compiled  from the source  files  using the command  shell build
scripts  \fIbuild.sh\fR (UNIX Bourne Shell) or  \fIbuild.bat\fR  (DOS/Windows). A
default compile sequence may be achieved with a simple:
.CS
build.sh
.CE
from the command line. The build script attempts to detect the host system and
available compiler and build the editor.
.PP
The build script recognizes the following options:-
.IP \fB\-32\fR
Build 32 bit based program.
.IP \fB\-64\fR
Build 64 bit based program.
.IP "\fB\-a\fR \fIarchitecture\fR"
Specifics the target CPU chip or architecture, typically one of \fCintel\fR, \fCarm\fR, \fCaarch\fR or \fCapple\fR.
.IP \fB\-C\fR
Build clean. Delete all of the object files.
.IP "\fB-D\fR \fI<define>[=<value>]\fR"
Sets build define \fB<define>\fR with value "\fC<value>\fR" or empty string if value not given.
.IP \fB-d\fR
Build a debugging  version, the output is to a platform specific \fCdebug\fR build directory rather than a 
\fCrelease\fR one.
.IP \fB\-h\fR
Display a simple help page.
.IP "\fB-l\fR \fIlogfile\fR"
Redirect all compilation output to the \fIlogfile\fR, this may not work on DOS or Windows systems. 
.IP "\fB-la\fR \fIlogfile\fR"
Append all compilation output to the end of \fIlogfile\fR, this may not work on DOS or Windows systems.
.IP "\fB-m\fR \fImakefile\fR"
Build using the specified makefile. over-riding the auto system detect. The supplied makefiles include:-
.RS
.BS
\fClinuxgcc.mak\fR Linux using GNU tools
.BU
\fCmacoscc.mak\fR macOS using Xcode command-line tools
.BU
\fCwinmsvc.mak\fR Windows using MS Visual C++
.BU
\fCwinmingw.mak\fR Windows using MinGW and GNU tools
.BU
\fCcygwingcc.mak\fR Cygwin (on Windows) using GNU tools
.BU
\fCmsyswingcc.mak\fR MSYS (on Windows) using GNU tools
.BU
\fCdosdj2.mak\fR Microsoft DOS using djgpp version 2.
.BE
The following makefiles are also included for historical record, but will likely need significant updating to make 
them work with the current release: 
.BS
\fCaix4cc.mak\fR IBM AIX 4.x native
.BU
\fCaix4gcc.mak\fR IBM AIX 4.x using GNU tools
.BU
\fCaix5cc.mak\fR IBM AIX 5.x native
.BU
\fCaix5gcc.mak\fR IBM AIX 5.x using GNU tools
.BU
\fCdarwingcc.mak\fR Apple Darwin (console and X-Windows)
.BU
\fCdosdj1.mak\fR Microsoft DOS build using djgpp version 1
.BU
\fCfreebsdcc.mak\fR Free BSD native
.BU
\fCfreebsdgcc.mak\fR Free BSD using GNU tools
.BU
\fChpux9cc.mak\fR  HP-UX 9.x native
.BU
\fChpux9gcc.mak\fR  HP-UX 9.x using GNU tools
.BU
\fChpux10cc.mak\fR HP-UX 10.x native
.BU
\fChpux10gcc.mak\fR HP-UX 10.x using GNU tools
.BU
\fChpux11cc.mak\fR HP-UX 11.x native
.BU
\fChpux11gcc.mak\fR HP-UX 11.x using GNU tools
.BU
\fCirix5cc.mak\fR Silicon Graphics IRIX 5.x native
.BU
\fCirix5gcc.mak\fR Silicon Graphics IRIX 5.x using GNU tools
.BU
\fCirix6cc.mak\fR Silicon Graphics IRIX 6.x native
.BU
\fCirix6gcc.mak\fR  Silicon Graphics IRIX 6.x using GNU tools
.BU
\fCopenbsdgcc.mak\fR OpenBSD using GNU tools
.BU
\fCopenstepcc.mak\fR Openstep 4.2 on NeXTstep (BSD 4.3)
.BU
\fCosf1gcc.mak\fR OSF1 using GNU tools
.BU
\fCsunos5cc.mak\fR Sun Solaris 5.6/7/8/9/10 native
.BU
\fCsunos5gcc.mak\fR Sun Solaris 5.5/6/7/8/9/10 using GNU tools
.BU
\fCsunosx86gcc.mak\fR Sun Solarais 2.6/7/8/9/10 (Intel) using GNU tools.
.BU
\fCzaurusgcc.mak\fR Zauras palm using GNU tools
.BE 0
.RE
.IP \fB\-ne\fR
Build NanoEmacs (a cut down version aimed as a vi replacement),  the output is
\fCne\fR.
.IP \fB-S\fR
Build  spotless.  Deletes  all of the object  files and any backup  files, tag
files etc.
.IP "\fB-t\fR \fItype\fR"
Set the build type, where \fItype\fR can be one of the following:
.IP "\fB-v\fR \fI<variable>=<value>\fR"
Build with the given makefile \fB<variable>\fR override, e.g. \fC-v OPENSSLPATH=<path-to-openssl-install>\fR
.RS
.BS
\fCc\fR  Build a console only version (i.e. no window  support), the output is
\fCmec\fR.
.BU
\fCw\fR  Build a windows only version (i.e. no console  support), the output is
\fCmew\fR.
.BU
\fCcw\fR  Build a version which  supports both console and windows, the output
is \fCmecw\fR.
.BE 0
.RE
.SS Makefiles
The supplied makefiles are provided in two forms:-
.BS
\fB*gcc.mak\fR - GNU make, using gcc.
.BU
\fB*cc.mak\fR - Native make,  consistent  with the compiler and  platform.
.BE
The makefiles are supplied with the following targets:-
.BS
\fBall\fR \- Default build.
.BU
\fBclean\fR \- Removes intermediate files.
.BU
\fBspotless\fR \- Removes intermediate files and any backup files.
.BU
\fBme\fR \- Builds the default \*(mS executable.
.BU
\fBmed\fR \- Builds a debugging version.
.BU
\fBmec\fR \- Builds a console only version.
.BU
\fBmew\fR \- Builds a windows only version.
.BU
\fBmecw\fR \- Builds a version which supports both console and windows.
.BU
\fBne\fR \- Builds NanoEmacs executable.
.BE 0
.SH "WINDOWS ENVIRONMENT"
The Windows environment is a little more difficult than \s-1UNIX\s0 because it
does not have a good native command line environment.  There are two Microsoft
Developer  options for building. If you have not purchased MS-DEV then use the
FREE Borland compiler which runs on the command line.
.SS "MinGW Build"
A collection of freely  available and freely  distributable  Windows  specific
header files and import libraries combined with GNU toolsets that allow one to
produce  native  Windows  programs that do not rely on any 3rd-party C runtime
DLLs.  Available  from  http://www.mingw.org,  \fBmingw\fR  allows a Microsoft
Windows version \*(mS to bu built and maintained.
.SS "MS-Dev GUI Build"
\*(mS is supplied  with a MS-Dev 6.x project for building.  This has only been
set up for  debugging  and has limited  build  options, it will also produce a
large  executable  image. The MS-Windows  images shipped by \s-1JASSPA\s0  are
built using the command  line build  environment  which is detailed in a later
section.
.SS "MS-Dev Command Line Build"
The  command  line  build  with  MS-Dev  is a  little  messy to set up, in the
following  sections we discuss  MS-Dev 6.x under  Windows  2000. There will be
differences with different operating systems versions, different install paths
and different versions of the MS-Dev toolkit. Use the following information as
an outline ONLY, JASSPA will not take  responsibility for the configuration of
the command line environment, if in doubt then use the GUI builder.
.PP
To run
.Hr nmake 1
from a DOS box then the MS-Dev compiler tools must be available in the command
path. The MS-Dev kit V6.x is supplied  with the  necessary  file to set up the
path which is called \fCVCVARS32.BAT\fR and is typically located in directory:
.CS
C:\\Program\ Files\\Microsoft\ Visual\ Studio\\VC98\\Bin
.CE
This should be run first and then the command line make files may be run using
nmake i.e. to build ME:-
.CS
nmake -f win32v6.mak me
.CE
To build NE:-
.CS
nmake -f win32v6.mak ne
.CE
To clean up after:-
.CS
nmake -f spotless
.CE
If you are going to perform a lot of command line  building  then it is easier
to set up the  environment and not have to run  \fCVCVARS32.BAT\fR  every time
you compile.
.PP
You can add the variables to your environment, you will need to expand the 
\fCVCVARS32.BAT\fR script and then add the results. The following example is 
for  MS-Dev 6.0 under W2K, the  settings  will  differ  depending  on what O/S
variant you are running and where you have installed software. The following 
ONLY serves as an example, you need to tailor for your installation.
.BS
To set up the variables then  \fBStart\fR ->  \fBSettings\fR  -> \fBControl\fR
\fBPanel\fR which displays the Control Panel items.
.BU
Select \fBSystem\fR -> \fBAdvanced\fR -> \fBEnvironment variables\fR
.BU
In \fBUser  Variables for\fR  \fI<User>\fR  then \fBNew...\fR or \fBEdit...\fR
the  \fCPATH\fR  variable. Add the command line tools  execution  paths to the
environment  variable, this will be something  like the following (but without
newlines):-
.RS
.CS
Variable Name:  PATH
Variable Value: %PATH%;
                C:\\PROGRA~1\\MICROS~3\\Common\\msdev98\\BIN;
                C:\\PROGRA~1\\MICROS~3\\VC98\\BIN;
                C:\\PROGRA~1\\MICROS~3\\Common\\TOOLS\\WINNT;
                C:\\PROGRA~1\\MICROS~3\\Common\\TOOLS;
.CE 
.RE
.BU
Similarly add the \fCINCLUDE\fR variable:-
.RS
.CS
Variable Name:  INCLUDE
Variable Value: C:\\PROGRA~1\\MICROS~3\\VC98\\ATL\\INCLUDE;
                C:\\PROGRA~1\\MICROS~3\\VC98\\INCLUDE;
                C:\\PROGRA~1\\MICROS~3\\VC98\\MFC\\INCLUDE;
                %INCLUDE%
.CE 
.RE
.BU
Similarly add the \fCLIB\fR variable:-
.RS
.CS
Variable Name:  LIB
Variable Value: C:\\PROGRA~1\\MICROS~3\\VC98\\LIB;
                C:\\PROGRA~1\\MICROS~3\\VC98\\MFC\\LIB;
                %LIB%
.CE
.RE
.BU
Accept the entries and close down the dialog. Start a new DOS command line and
the variables should be set up ready for the build.
.BE 0
.SH NOTES
Other  \s-1UNIX\s0  ports  should  be fairly  easy from the base set of ported
platforms. If any new platform ports are performed by individuals  then please
submit the makefiles and any source changes back to JASSPA \- see
.Hl "Contact Information" Contact - .
.FH
