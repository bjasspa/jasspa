.\" -*- nroff -*-
.\" Copyright (C) 1998-2009 JASSPA (www.jasspa.com)
.\"
.\" This is part of JASSPA's MicroEmacs, see the LICENSE file for licensing and
.\" copying information.
.\"
.Id $Id: m4fil038.4,v 2.6 2024/05/09 17:14:02 jon Exp $
.Im MicroEmacs macro;function;miscellaneous
.so me.tni
.TH &uni 4
.XI &uni - "Unicode character information"
.XI &uci - "Charater-set character Unicode info"
.XI &ufi - "UTF-8 character Unicode info"
.SH NAME
&uni, &uci, &ufi \- Miscellaneous functions
.SH SYNOPSIS
.na
.B &uni
.I int
.br
.B &uci
.I char
.sp
.B &ufi
.I string
.ad
.SH DESCRIPTION
These three functions provide information about Unicode charater support within the current \*(mS character-set. 
.IP "\fB&uni\fR \fIint\fR"
Returns information regarding the Unicode character \fIint\fR.
.IP "\fB&uci\fR \fIchar\fR"
Returns information regarding the \*(mS character-set character \fIchar\fR.
.IP "\fB&ufi\fR \fIstring\fR"
Returns information regarding the UTF-8 encoded Unicode character \fIstring\fR.
.PP
All three functions return a \*(mS formatted list of information of the follow form:
.IP
"|\fIflags\fR|\fIUnicode\fR|\fIchar\fR|\fIutf8-len\fR|\fIutf8\fR|"
.PP
\fIflags\fR  is a bitwise flag where bit 1 indicates  which the given input was a valid Unicode  character,  see notes
below and bit 2 indicates whether the input is supported in the current \*(mS display character-set.
.PP
\fIUnicode\fR is the hexadecimal value representing the input or zero if the input cannot be mapped to a valid Unicode
character  (bit 1 of  \fIflags\fR  is clear).  The value is always 6 digits  long with a \fC0x\fP  hexadecimal  number
prefix.
.PP
\fIchar\fR  is the \*(mS  display  character-set  equivalent  of the input or the  character  0x07 if the input is not
supported (bit 2 of \fIflags\fR is clear).
.PP
In the case of \fB&ufi\fR, \fIutf8-len\fR is set to the length of \fIstring\fR parsed, this may be less than the total
length of \fIstring\fP, otherwise  \fIutf8-len\fR is the string length of \fIutf8\fP. Note that if the input character
is 0x00 (the Nul character) the \fIutf8\fP  string is "" (the empty string and 0 in length) but the  \fIutf8-len\fR is
.PP
\fIutf8\fR is the UTF-8  equivalent  of the input or the  character string 0xEF 0xBF 0xBD (U+FFFD - replacement  char)
if the input to \fB&uni\fP or \fB&uci\fP cannot be mapped to a valid Unicode character.
.SH EXAMPLE
The  following  macro code can be used to convert the UTF-8  encode  character  string at the current  location to the
current display character set equivalent:
.Me $emf-scheme
.CS
set-variable #l0 &ufi &mid @wl $window-col 4
!if &not &band 1 &lget #l0 1
  ml-write "Error: String at current location is not a valid UTF-8 char"
!elif &not &band 2 &lget #l0 1
  ml-write "Error: UTF-8 character not supported in current dsplay charset"
!else
  &lget #l0 4 forward-delete-char
  insert-string &lget #l0 3
!endif
.CE 0
.Me $ehf-scheme
.SH NOTES
In 2003 the Unicode character range was officially  restricted to 0x0000-0x10ffff  (see RFC 3629) which means that a 6
digit  hexadecimal  number can be used to represent all possible Unicode  characters and the longest UTF-8 string is 4
bytes (0xF4 0x8F 0xBF 0xBD is the highest  assigned  char which is for private use).  Currently  the highest  assigned
non-private character is U+E01EF so 5 digits will cover all publicly used characters.
.PP
The mapping to and from the current \*(mS display character-set is configured by flag \fBc\fP of command
.Ht set-char-mask 2 .
.PP
In \*(mS  character 0x07 is used to represent an unmappable  character, this is better than using a character like '?'
which is in common use. If extended character rendering is being used (see bit \fB0x10000\fP of
.Ht $system 5 )
the character is drawn as a crossed diamond, an attempt to represent the Unicode replacement character.
.SH "SEE ALSO"
.na
.Hl "Variable Functions" Functions - ,
.Ht set-char-mask 2 ,
.Ht change-buffer-charset 3 ,
.Ht &lget 4 ,
.Ht &equal 4 .
.ad
.FH
