.\" -*- nroff -*-
.\" Copyright (C) 1998-2009 JASSPA (www.jasspa.com)
.\"
.\" This is part of JASSPA's MicroEmacs, see the LICENSE file for licensing and
.\" copying information.
.\"
.Id $Id: m5var060.5,v 2.6 2025/09/06 17:07:06 jon Exp $
.Im MicroEmacs variable
.so me.tni
.TH $time 5
.XI $time - "The current system time"
.XI $unix-time - "The current UNIX epoch time"
.SH NAME
$time \- The current system time
.Me $a
.SH SYNOPSIS
.Me "|$time"
\fB$time\fR "\fIstring\fR" 
.br
.Me "|$MEPATH"
\fB$unix-time\fR \fIinteger\fR" 
.Me $a
.SH DESCRIPTION
.B $time
is a  constantly  changing  variable  which  is  set  to the  current  system  time.  The  format  of  \fB$time\fR  is
"\fCYYYYCCCMMDDWhhmmssSSS\fR", where:-
.IP \fBYYYY\fR
The current year (full 4 digits so should be millennium bug free).
.IP \fBCCC\fR
Day of the year (0-366).
.IP \fBMM\fR
The month of the year (1-12).
.IP \fBDD\fR
The day of the month (1-31).
.IP \fBW\fR
The day of the week (0-6 Sunday=0).
.IP \fBhh\fR
The hour (0-23).
.IP \fBmm\fR
The minute (0-59).
.IP \fBss\fR
The second (0-59).
.IP \fBSSS\fR
The millisecond (0-999).
.PP
\fB$time\fR  can be set to an integer  value  which is a time  offset in seconds,  for  example if the  following  was
executed;-
.Me $emf-scheme
.CS
set-variable $time "3600"
ml-write &cat "$time is " $time
set-variable $time "0"
.CE
.Me $ehf-scheme
The written time would one hour ahead of the system time.
.PP
.B $unix-time
is also a constantly  changing  variable, however this variable cannot be set. Its value is a count of the number of seconds since 1970-01-01  00:00:00 UTC,
otherwise known as the \s-1UNIX\s0 epoch time, presented as a floating point number with a guaranteed 9 decimal places 
so its length is 20 characters. The focus of the fraction part is more on providing a sub-second timer at the highest 
resolution the system can realistically provide, however, the actual resolution is platform specific and should only 
be considered accurate to 10ms at best, see example section below.
.SH EXAMPLE
The following macro uses \fB$time\fR to calculate the time taken to execute a user command:-
.Me $emf-scheme
.CS
define-macro time
    !force set-variable #l2 @1
    !iif &not $status  set-variable #l2 @ml00 "Time command"
    set-variable #l0 $time
    !force execute-line #l2
    set-variable #l1 $time
    set-variable #l2 &add &mid #l0 16 2 &mul 60 &add &mid #l0 14 2 &mul 60 &mid #l0 12 2 
    set-variable #l3 &add &mid #l1 16 2 &mul 60 &add &mid #l1 14 2 &mul 60 &mid #l1 12 2 
    !if &les &set #l4 &sub &rig #l1 18 &rig #l0 18 0
        set-variable #l2 &add #l2 1
        set-variable #l4 &add 1000 #l4
    !endif
    ml-write &spr "Command took %d.%03d sec" &sub #l3 #l2 #l4
!emacro
.CE
.Me $ehf-scheme
The following implementation uses \fB$unix-time\fR and
.Ht &fsub 4 :
.Me $emf-scheme
.CS
define-macro time
  !force set-variable #l2 @1
  !iif &not $status  set-variable #l2 @ml00 "Time command"
  set-variable #l0 $unix-time
  !force execute-line #l2
  set-variable #l1 $unix-time
  ml-write &spr "Command took %.6f sec" &fsub #l1 #l0
!emacro
.CE
.Me $ehf-scheme
This implementation of \fB$unix-time\fR suggests a nanosecond accuracy, however this is unrealistic due to the
granularity/limitations of the system clock, a more realistic level would be around 1 microsecond. However, at this 
level the variability of the CPU task scheduler, the time taken to get the time and the algorithms used can all 
degrade the actual accuracy of the measure. For example, the above macro code use floating-point maths
(\fC&fsub\fR), Double precision floats, as used by \*(mS, only provide around 15 to 16 significant figures of
accuracy. Consider the following:
.Me $emf-scheme
.CS
set-variable #g1 &fsub "1234567890.000010000" "1234567890.000000000" 
set-variable #g2 &fsub "1234567890.000001000" "1234567890.000000000" 
set-variable #g3 &fsub "1234567890.000000100" "1234567890.000000000" 
.CE
.Me $ehf-scheme
The answer given for \fC#g1\fR typically has an error of around 0.1%, an error of 5% for \fC#g2\fR and an answer of 0
for \fC#g3\fR. This means if simple floating point maths is used the maximum accuracy is 1 microsecond +/- 5%.
Attempting to measure performance down to this level is generally a waste of time, it would be far better to increase
the length of the task (i.e. run 1000 times and divide the total time by 1000). 
.SH "SEE ALSO"
.na
.Ht time 3 , 
.Ht &fsub 4 .
.ad
.FH
