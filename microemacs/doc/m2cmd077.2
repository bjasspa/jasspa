.\" -*- nroff -*-
.\" This is part of the JASSPA MicroEmacs documentation files.
.\" Copyright (c) 1998-2009 JASSPA (www.jasspa.com)
.\" See the file "me.nrs" for copying and conditions.
.\"
.Id $Id: m2cmd077.2,v 2.12 2025/03/08 20:23:14 jon Exp $
.Im MicroEmacs command|shell
.ds C0 "(\fB\*e backslash\fR)\ \&
.so me.tni
.TH ipipe-shell-command 2
.XI ipipe-shell-command \- "\*(C0Incremental pipe (non-suspending system call)"
.XI ipipe-kill \- "Kill a incremental pipe"
.XI ipipe-write \- "Write a string to an incremental pipe"
.SH NAME
.Me "|ipipe-shell-command"
ipipe-shell-command \- Incremental pipe (non-suspending system call)
.br
.Me "|ipipe-kill"
ipipe-kill \- Kill a incremental pipe
.br
.Me "|ipipe-write"
ipipe-write \- Write a string to an incremental pipe
.Me $a
.SH SYNOPSIS
.na
.I n
.B ipipe-shell-command
"\fIcommand\fR"
["\fIbuffer-name\fR"]
["\|\fIbuffer-ipipe-command\fR\|"] \*(C0
.br
.I n
.B ipipe-write
"\fIstring\fR"
.br
.I n
.B ipipe-kill
.ad
.SH PLATFORM
UNIX - \fIlinux\fR, \fImacos\fR, \fIfreebsd\fR, \fIhpux\fR, \fIsunos\fR.
.PP
Windows NT - \fIwindows\fR.
.SH DESCRIPTION
.B ipipe-shell-command
executes the given system command \fIcommand\fR, opening up a \fB*icommand*\fR
buffer into which the results of the command  execution are displayed.  Unlike
the
.Ht pipe-shell-command 2 ,
the user may continue  editing  during  command  execution. The command may be
terminated by deleting the buffer or issuing a \fBipipe-kill\fR command.
.PP
The  argument  \fIn\fR  can  be  used  to  change  the  default   behavior  of
pipe-shell-command described above, \fIn\fR is a bit based flag where:-
.IP \fB0x01\fR
Enables the use of the default buffer name \fB*icommand*\fR (default). If this
bit is clear the user must supply a buffer name  \fIbuffer-name\fR. The buffer
naming  allows  another  command  to be started  without  effecting  any other
existing command buffer.
.IP \fB0x02\fR
Hides the output buffer, the default  action pops up a window and displays the
output buffer in a new window.
.IP \fB0x04\fR
Disable the use of the command-line  processor to launch the program (MS Win32
versions  only). By default the  "\fIcommand\fR"  is launched by executing the
command:
.CS
    %COMSPEC% /c command
.CE 0
.IP
Where  \fC%COMSPEC%\fR  is  typically  \fCcommand.com\fR.  If this  bit is set
"\fIcommand\fR" is launched directly.
.IP \fB0x08\fR
Detach the launched  process from \*(mS (MS Win32  versions  only). By default
the command is launched as a child  process of \*(mS with a new console.  With
this bit set the process is completely detached from \*(mS instead.
.IP \fB0x10\fR
Disable the command  name  mangling (MS Win32  versions  only). By default any
\&'\fC/\fR' characters found in the command name (the first argument only) are
converted to '\fC\\\fR' characters to make it Windows compliant.
.IP \fB0x20\fR
Displays the new process window (windows versions only), by default the window is hidden.
.IP \fB0x40\fR
Raw ipipe, disable text annotation at the start and end of the pipe output and force
.Ht wrap 2m
mode off.
.IP \fB0x80\fR
Supply  a  function  \fIbuffer-ipipe-command\fR  to be  invoked  when the pipe
receives  data and  terminates.  This is  equivalent  to  setting  the  buffer
variable
.Ht $buffer-ipipe 5
but  allows  the  pipe to be set  when  the  ipipe  is  created.  Setting  the
\fI$buffer-ipipe\fR  on  invocation  allows the pipe exit status to be trapped
properly.
.IP \fB0x100\fR
When set the command-line to be run is the first line of buffer  \fIstring\fR,
this feature can be used to overcome the default 1024  character  command-line
limit. When a multiple-line  command-line is required, a negative argument can
be given to
.Ht insert-string 2 .
.IP \fB0x200\fR
When set forces
.Ht wrap 2m
mode off minimising line wrapping.
.PP
Many other macro commands (see
.Ht compile 3 ,
.Ht grep 3 ,
etc.) use this command.
.PP
.B ipipe-write
writes a string \fIstring\fR to an open ipipe, \fIn\fR times.
.PP
.B ipipe-kill
terminates an open ipipe and is automatically invoked when the ipipe buffer is
deleted using
.Ht delete-buffer 2
or when  \*(mS is  exited.  The  numeric  argument  \fIn\fR  may be used to  change  the way in which the  process  is
terminated,  if a 0 argument is given an interrupt  signal (kill request or nice-kill) is sent, writing a \fICtrl-C\fR
to the  \fI<stdin>\fR  pipe on  \s-1UNIX\s0  or sending  \fICtrl-C\fR  key events on Windows.  This is likely to fail,
particularly on Windows which does not have a robust signal  interrupt  system, however it is still typically bound to
\fC\*cc  \*cc\fR as Windows does not offer an  alternative. On \s-1UNIX\s0  based systems \fC\*cc \*cc\fR is typically
bound to ipipe-kill with a numeric argument of 2 which sends a \fISIGINT\fR, see
.Hr signal 7 .  
.PP
On  \s-1UNIX\s0  platforms,  if a +ve  argument is given then only the top level  process is sent a kill signal of the
given value, e.g. the process would be terminated  with a core dump if a value of \fC3\fR was given. If a -ve argument
is given the process and all its children, in the same process group, will be sent a 0-n kill signal. When no argument
is given the default used is either -9, -SIGKILL, or -15, -SIGTERM, depending on the setting of bit 0x2000000 of 
.Ht $system 5 .
.PP
On Windows, if no argument or a -ve argument is given  \fBipipe-kill\fR  terminates  the process and all  non-detached
sub-processes, whereas a +ve only terminates the top level process.
.PP
.B ipipe-kill
with no argument is typically bound to \fC\*cc \*ck\fR.
.SH NOTES
On  \s-1UNIX\s0  platforms  the  \s-1TERM\s0  environment  variable of the new
process  may be set by  setting  the user  variable  \fB%ipipe-term\fR  to the
required value, e.g.:
.CS
    set-variable %ipipe-term "TERM=vt100-nam"
.CE
Ipipe  shells  support a large  sub-set of vt100  terminal  commands,  notable
exceptions are color, font support and  auto-margins.  Using the terminal type
"\fCvt100-nam\fR"  disables the use of auto-margins,  thereby providing better
support.
.PP
On  platforms  which  do  not  support   \fBipipe-shell-command\fR,   such  as
\s-1MS-DOS\s0, executing \fBipipe-shell-command\fR automatically invokes
.Hl pipe-shell-command pipe-shell-command 2 .
Therefore  macros  may  safely  use ipipes  without  explicitly  checking  the
platform   type.   \fBipipe-shell-command\fR   does   not  run   reliably   on
\fBWindows\fR  \fB3.11\fR and \fBWindows\fR  \fB95\fR;  \fBWindows\fR \fBNT\fR
does support ipipes.
.PP
While the pipe command is running, mode
.Ht pipe 2m
is enabled. Modes
.Ht lock 2m
and
.Ht wrap 2m
effect  the  output  behavior  of an  \fBipipe-shell-command\fR.  When  \fBwrap\fR  mode is  enabled  text  output  is
automatically  wrapped at the width of the current  window, when  disabled (see arg \fBn\fR bits 0x40 and 0x200) lines
will only wrap at (\fCmaximum length of a \*(mS variable - 2\fR), currently 2046, so that the ipipe command can safely
process the output. This length can be controlled by the \fB%ipipe-width\fR user variable.
.SH EXAMPLE
The following example is the
.Ht xgrep 3
command  macro which  utilizes the  \fBipipe-shell-command\fR, diverting the
output to a buffer called \fB*grep*\fR.
.Me $emf-scheme
.CS
define-macro xgrep
    !force set-variable #l0 @1
    !if &not $status
        set-variable #l0 @ml00 %xgrep-com
    !endif
    !if @?
        1 pipe-shell-command &cat %xgrep-com #l0 "*grep*" @mna
    !else
        1 ipipe-shell-command &cat %xgrep-com #l0 "*grep*" @mna
    !endif
!emacro
.CE
.Me $ehf-scheme
Note   that  if  an   argument   is   passed  to   \fBgrep\fR   then  it  uses
pipe-shell-command  instead.  This is  useful  if  another  command  is  using
\fBgrep\fR which must finish before the calling command can continue, see
.Ht replace-all-string 3
for an example.
.SH BUGS
On MicroSoft  Windows  platforms,  \fBipipe-shell-command\fR  spawns the shell
(e.g.  \fCcommand.com\fR) with the appropriate command line to make it execute
the  given  command.  If the  command  to be run  detaches  from the shell and
creates its own window, for example \fCme.exe\fR,  \fBipipe-kill\fR  will only
kill the shell, it will not kill the actual process, i.e. the \fCme.exe\fR.
.PP
On  MicroSoft  Windows platforms \fBipipe-shell-command\fR  does  not  work on
Novell's  Intranet  Client v2.2 networked  drives,  version 2.5 does appear to
work.
.SH "SEE ALSO"
.na
.Ht $buffer-ipipe 5 ,
.Ht $buffer-input 5 ,
.Ht compile 3 ,
.Ht grep 3 ,
.Ht pipe-shell-command 2 ,
.Ht replace-all-string 3 ,
.Ht shell-command 2 ,
.Ht pipe 2m ,
.Ht lock 2m ,
.Ht wrap 2m .
.ad
.rm C0
.FH
