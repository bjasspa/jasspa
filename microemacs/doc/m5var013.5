.\" -*- nroff -*-
.Id $Id: m5var013.5,v 2.3 2001-12-06 00:04:32 jon Exp $
.Im MicroEmacs variable|scuts
.so me.tni
.TH $c-brace 5
.XI $c-brace - "C-mode; brace indentation"
.SH NAME
$c-brace \- C-mode; brace indentation
.Me $a
.SH SYNOPSIS
\fB$c-brace\fR \fIinteger\fR; Default is \fC-4\fR
.sp
\fI\-n\fR <= \fIinteger\fR <= \fIn\fR
.SH DESCRIPTION
.B $c-brace
is part of the
.Ht cmode 2m
environment for C programmers.
.PP
Sets the indent of a '\fC{\fR' and a '\fC}\fR' on a new line, from the current
indent. For example, using the default  settings, if the current indent was 20
then a line starting with a '\fC{\fR' or a '\fC}\fR'  would be indented to 16,
i.e.
.CS
                    xxxxxxxxxxx
                    xxxxxxxxxxx
                { xxxxxxxxxxx
                    xxxxxxxxxxx
                } xxxxxxxxxxx
                    xxxxxxxxxxx
.CE
This may seem  strange,  but the  current  indent  is the  indent  of the last
\'\fC{\fR' (or "\fCif\fR", "\fCelse\fR" etc.) plus
.Ht $c-statement 5
which is 4, so this  brings it back into line with  '\fC{\fR''s,  "\fCif\fR"'s
and "\fCelse\fR"'s etc., e.g.
.CS
                if(xxxxxx)
                {
                    xxxxxxxxxx
                    xxxxxxxxxx
                }
.CE
With a setting of -2, this would become:-
.CS
                if(xxxxxx)
                  {
                    xxxxxxxxxx
                    xxxxxxxxxx
                  }
.CE
This works in conjunction with
.Ht $c-statement 5 ,
a change to \fB$c-statement\fR will change the position of '\fC{\fR's.
.SH "SEE ALSO"
.na
.Ht cmode 2m ,
.Ht $c-statement 5 .
.ad
.FH
