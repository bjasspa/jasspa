.\" -*- nroff -*-
.\" Copyright (C) 1999-2009 JASSPA (www.jasspa.com)
.\"
.\" This is part of JASSPA's MicroEmacs, see the LICENSE file for licensing and
.\" copying information.
.\"
.\"  Created By    : Jon Green
.\"  Created       : Sat Jan 2 00:31:47 1999
.\"
.Id $Id: m2nar005.2,v 2.7 2022/06/12 17:13:40 jon Exp $
.Im MicroEmacs
.so me.tni
.TH "Client-Server" 2
.XI "Client-Server" - "Client-Server Model"
.SH "CLIENT-SERVER"
This  sections  describes  how \*(mE may be interfaced to external  components
through the \fBClient-Server\fR interface.
.PP
The  \fBClient-Server\fR  interface of \*(mE  provides a capability  for other
applications  to inject  commands into a running  version of the editor, which
are   interpreted   and   executed.  The  interface  is  only   available  on
multi-tasking  operating systems such as \s-1UNIX\s0 and Microsoft Windows; it
is not available on \s-1MS-DOS\s0 systems.
.PP
Within the following discussions, the \fBServer\fR is a running version of the
\*(mE  editor; the  \fBclient\fR  is the  application  (or shell  script) that
communicates a new command to the \fIserver\fR.
.PP
The \fBClient-Server\fR  interface may provide a bidirectional interface such
that a  \fIclient\fR  may  submit a command to the  \fIserver\fR  and may also
retrieve a response to that command.
.SH DESCRIPTION
The  \fBClient-Server\fR  interface  operates by making an external  interface
available  which is continually  monitored by the  \fIserver\fR.  The external
interface may be provided by a file, named pipe or socket  (depending upon the
platform)  with a well know  location in the file system.  Typically two files
are  provided,  an input  file into  which the  \fIclient\fR  writes  commands
(\fI$TEMP\fR\|\fB/me\fR\|\fI$MENAME\fR\|\fB.cmd\fR);  and an output  file where
responses        to        those        commands        my       be       read
(\fI$TEMP\fR\|\fB/me\fR\|\fI$MENAME\fR\|\fB.rsp\fR).
.PP
Within MicroEmacs, the client server interface appears as a hidden
.Ht ipipe-shell-command 2
buffer, with the name  \fC*server*\fR.  Commands  are  received  through  this
buffer and responses are written back to the buffer.
.SS "Client Commands"
\fIClients\fR  may write  directly  to the  \fIcommand\fR  through  the use of
explicit embedded code, or may use a
.Ht me 1
invocation with the \fB-m\fR option. Commands to the client interface take the
form   "\fBC:\fR\|\fI<client>\fR\|\fB:\fR\|\fI<command>\fR".
.IP \fI<client>\fR
\fI<client>\fR  is an  identification  string that may be used to identify the
client, this  information may be used when the command is handled to interpret
the command if some special client specific action is required.
.IP \fI<command>\fR
The \fI<command>\fR is an editor command (or macro) of the given name with any
arguments. Standard command escape sequences must be adhered to. i.e. to write
"\fCHello World\fR" on the message line then a client may issue the command:-
.RS
.CS
me -m "C:<client>:ml-write \\"Hello world\\"
.CE 0
.RE
.IP
A new line  character may be included in the string using  \fC\\\\n\fR, if the
message is not terminated with a new line then on is automatically  added. The
\fIclient-server\fR  interface  is typically  used to load a file, this may be
performed as follows:-
.RS
.CS
me -m "C:<client>:find-file \\"/path/foo.bar\\""
.CE 0
.RE
.IP
The  absolute  path is  specified in this type of  transaction  as the current
working  directory of the active MicroEmacs  session is unknown. The \fB\-m\fR
option de-iconize's the existing editor session and bring it to the foreground.
.SS "Client Responses"
Responses  from  \fIclient\fR  commands  are  written  to the  response  file,
responses  take a  similar  form to  \fIclient\fR  commands  except  they  are
prefixed              by             an             \fBR\fR,              i.e.
"\fBR:\fR\|\fI<client>\fR\|\fB:\fR\|\fI<data>\fR".
.PP
As multiple \fIclients\fR may be utilizing the  \fIclient-server\fR  mechanism
then the \fI<client>\fR  sting passed in the command is typically  returned in
the response to allow the  \fIclient\fR to identify it's own response  (rather
than any other \fIclients\fR. It is the \fIclients\fR responsibility that this
string is unique in order that it may be differentiated.
.PP
The  returned  \fI<data>\fR  format is  undefined  and would be generated by a
macro command used to handle the \fIclient\fR  command; sufficient to say that
the data should exist on a single line.
.SS "Server Side"
On the \fIserver\fR side, the \fBClient-Server\fR interface is managed like an
.Ht ipipe-shell-command 2
using the hidden buffer \fC*server*\fR (as previously mentioned).
.PP
The \fIClient-Server\fR interface is enabled from the
.Ht user-setup 3
interface, the user setting of the interface is confirmed by checking
bit \fC0x20000\fR of the
.Ht $system 5
variable.
.PP
The client server interface is typically  initialized  within the \fCme.emf\fR
initialization  file,  whereby the  \fIipipe\fR  input  handler is bound to the
client pipe buffer and the buffer is hidden, so it is not  available  when the
buffers  are  swapped.   (Note  that  the  client  buffer  may  be  explicitly
interrogated using
.Hl find-buffer find-buffer 2
\fC*server*\fR). The client handler is installed as follows:-
.Me $emf-scheme
.CS
; Setup the Client Server
!if &band $system 0x20000
    define-macro-file meserver server-input
    find-buffer "*server*"
    set-variable :last-line 2
    set-variable :client-list ":"
    set-variable $buffer-ipipe server-input
    beginning-of-buffer
    goto-alpha-mark  "I"
    -1 find-buffer "*server*"
!endif
.CE
.Me $ehf-scheme
This binds a MicroEmacs macro called  \fIserver-input\fR  to handle the client
commands as they arrive on the input, an
.Hl alpha-mark goto-alpha-mark 2
is used to record the  processed  position  at the end of the buffer. The pipe
handler itself decodes the client request and executes it. The default handler
supplied with \*(mE is defined within the macro file \fCmeserver.emf\fR
.PP
Responses  to the  client  are  inserted  into the  response  file by  writing
directly into the ipipe buffer (\fC*server*\fR) using the
.Ht ipipe-write 2
command. It is the calling macros  responsibility  to ensure that the response
string  adheres to the format  outlined  above in the previous  sections.
.SH NOTES
It is not possible to kill the \fC*server*\fR buffer, and
.Ht ipipe-kill 2
is ignored within the context of the buffer.
.SH FILES
\fCmeserver.emf\fR \- Default Client-Server ipipe handler.
.br
\fI$TEMP\fR\|\fB/me\fR\|\fI$MENAME\fR\|\fB.cmd\fR \- Command file.
.br
\fI$TEMP\fR\|\fB/me\fR\|\fI$MENAME\fR\|\fB.rsp\fR \- Response file.
.SH BUGS
The first \*(mE session that executes  becomes the editor  server,  additional
editor sessions that are executed do not become server processes. In the event
that the  \fIserver\fR  editor is terminated,  any other  sessions do not take
over the role of server.  Subsequently  issuing a client  command may fail, or
invoke a new editor session which adopts the role of server.
.SH "SEE ALSO"
.na
.Ht me 1 ,
.Ht ipipe-shell-command 2
.ad
.FH
