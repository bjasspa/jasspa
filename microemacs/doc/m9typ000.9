.\" -*- nroff -*-
.\" Copyright (C) 1999-2009 JASSPA (www.jasspa.com)
.\"
.\" This is part of JASSPA's MicroEmacs, see the LICENSE file for licensing and
.\" copying information.
.\"
.\"  Created By    : Jon Green
.\"  Created       : Sat Feb 6 14:22:09 1999
.\"
.Id $Id: m9typ000.9,v 2.12 2025/08/28 02:05:37 jon Exp $
.Im MicroEmacs filetype
.so me.tni
.TH c 9
.XI c - "C programming language"
.XI cc - "C++ programming language"
.XI h - "C programming language header"
.XI cpp - "C++ programming language"
.XI def - "C or C++ definition file"
.XI l - "LEX programming language"
.XI y - "YACC programming language"
.XI i - "C/C++ preprocessor outpuit file"
.XI rc - "Microsoft Developer resource file"
.SH SYNOPSIS
C, C++ \- C and C++ programming language templates
.SH FILES
.na
.B hkc.emf
\- C programming language hook definition
.br
.B hkcpp.emf
\- C++ programming language hook definition
.sp 1
.B c.etf
\- C programming language template file
.br
.B h.etf
\- C programming language header template file
.br
.B cpp.etf
\- C++ programming language template file
.br
.B hpp.etf
\- C++ programming language header template file
.ad
.SH EXTENSIONS
.na
\fB.c\fR, \fB.h\fR, \fB.def\fR \- ANSI C
.br
\fB.cpp\fR, \fB.cc\fR, \fB.hpp\fR, \fB.rc\fR \fB.C\fR \fI(UNIX only)\fR \- C++
programming language
.br
\fB.l\fR \- LEX
.br
\fB.y\fR \- YACC
.br 
\fB.i\fR \- C (or C++) pre-processed file (i.e. output from pre-processor).
.br
\fB.rc\fR \- Microsoft Developer resource file.
.ad
.SH "MAGIC STRINGS"
.IP "\fB-*- c -*-\fR"
Recognized by GNU and MicroEmacs.  Denotes a 'C' programming  type file, may be
used in \fB.c\fR, \fB.def\fR and \fB.h\fR files.
.IP "\fB-*- c++ -*-\fR"
Recognized by GNU and MicroEmacs.  Denotes a C++ programming  type file, may be
used in \fB.c\fR, \fB.def\fR and \fB.h\fR files.
.SH DESCRIPTION
The \fBC\fR and \fBC++\fR  file type  templates  offer the most  sophisticated
editing features within the \*(mS environment.
.IP "\fBGeneral Editing\fR"
On creating a new file, a new header is automatically included into the file.
.Ht time 2m
is by default enabled, allowing the modification time-stamp to be maintained in
the header.
.IP \fBHilighting\fR
The  hilighting  features allow  commands,  variables,  logical,  preprocessor
definitions,   comments,   strings  and  characters  of  the  language  to  be
differentiated and rendered in different colors.
.IP "\fBAuto Layout\fR"
The C-Mode indentation mode of 
.Ht indent 2
performs automatic layout of the text.
.IP
.Ht restyle-region 3
and
.Ht restyle-buffer 3
are available to reformat  (re-layout) selected sections of the buffer, or the
whole buffer, respectively.
.IP
Comments  may be formatted  using  \fC\*eo\fR,  which  reformats  the comments
according  to  the  current  fill  paragraph.  If  a  comment  commences  with
\fC/***...\fR  then the comment is  automatically  formatted  to a box. If the
comment  commentces  with  \fC/**\fR  then  the  comment  is  assumed  to be a
\fIJava\fR \fIDoc\fR comment.
.IP "\fBTags\fR"
A C-tags file may be generated within the editor using the \fBTools\fR \->
\fBC Tools\fR \-> \fBCreate Tag File\fR.
.Ht find-tag 2
takes the user to the file using the tag information.
.IP
On invoking  the tag  generator  then the user is presented  with a dialog box
which specifies the generation  option of the tags file. The base directory of
the tags file search and tagging options may be specified to locate all of the
definitions within the code space.
.IP
The  \fBtags\fR  file is  extremely  useful  where  the user is  dealing  with
inherited  source  code  spread over  multiple  directories.  Generation  of a
recursive  tag file with all  searching  options  enabled  allows labels to be
located extremely rapidly (certainly faster than IDE environments).
.IP "\fBFolding and Information Hiding\fR"
Generic  folding is enabled  within the C and C++ files. The folds occur about
braces \fB{\fR...\fB}\fR located on the left-hand margin.
.Ht collapse-all 3
(un)folds all regions in the file,
.Ht collapse-current 3
(un)folds the current region.
Note that folding does not operate on K&R style code.
.IP
The \fBTools\fR -> \fBC Tools\fR  menu allows  \fC#define\fR's to be evaluated
within the buffer. Where the state of a \fC#if\fR is  established  to be false
(using the  \fC#define\fR  information)  then the  disabled  region of code is
grayed out indicating which regions of the code are active.
.IP "\fBWorking Environment\fR"
.Ht compile 3
may be invoked to rebuild the source, the user is prompted to save any files.
.IP
.Ht rcs-file 2
is automatically  invoked if an RCS file is detected, the normal  check-in/out
operations may be performed through the editor.
.IP "\fBShort Cuts\fR"
The short cut keys used within the buffer are:-
.IP
\fB\*cc \*cc\fR \- Comment out the current line.
.br
\fB\*cc \*cd\fR \- Uncomment the current line.
.br
\fB\*cc \*ce\fR \- Comment to the end of the line with stars (*).
.br
\fB\*a\*ci\fR \- Restyle the current region.
.br
\fB\*eq\fR \- Format a comment.
.br
\fB\*eo\fR \- Format a comment.
.br
\fBf2\fR \- (un)fold the current region
.br
\fBf3\fR \- (un)fold all regions
.BP "Additional Commands"
A number of additional commands are available as follows:-
.RS
.BS
.Ht c-slashify 3 
\- Append backslash to end of lines of region.
.BU
.Ht c-deslashify 3 
\- Remove backslash to end of lines of region.
.BU 
.Ht c-to-cpp-convert 3
\- Convert a C file to C++
.BU
.Ht c-hash-eval 3
\- Evaluate C/C++ \fC#define\fRs.
.BU
.Ht c-hash-undo 3
\- Remove C/C++ \fC#define\fR evaluation.
.BU
.Ht c-hash-define 3
\- Set a C/C++ \fC#define\fR.
.BU 
.Ht c-hash-undef 3
\- Unset a C/C++ \fC#define\fR
.BE 0
.RE
.IP "\fBExecuting, Formatting and Linting C and C++ Code\fR"
The C and the C++ file hooks supports the 
.Ht file-exec 3 ,
the 
.Ht file-format 3
and the 
.Ht file-lint 3
macros. The tools,  compilers  which are currently  supported are "gcc" and "g++"
as compilers,   "astyle"  and  "clang-format"   (formatters)  and  "clang-tidy"
(linter).  The tools can be  installed  either  using  your  standard  package
manager system wide or, for the current user, using the Python package manager
"pip". Here an example on how to install astyle and the clang tools using pip:
.RS
.CS
pip install astyle-py --user
pip install clang-format --user
pip install clang-tidy --user
.CE 0
.RE
.SH NOTES
If the  default  language  is C++, rather than 'C' the order of the file hooks
should be over-ridden in the users local setup, using:-
.Me $emf-scheme
.CS
add-file-hook ".c "                                  fhook-c
add-file-hook ".cc .cpp .hpp .rc .h .def .l .y .i"   fhook-cpp
.CE 
.Me $ehf-scheme
This defaults all \fB.h\fR and \fB.def\fR files etc. to be C++ rather than C.
.PP
The  hilighting  is  typically   extended  using  a  file   \fBmyc.emf\fR  (or
\fBmycpp.emf\fR)  i.e. to include the usual extended types of \fBint32\fR etc,
\fBmyc.emf\fR might be defined as:-
.Me $emf-scheme
.CS
hilight .hilight.c 1 "uint8"    .scheme.type
hilight .hilight.c 1 "int8"     .scheme.type
hilight .hilight.c 1 "uint16"   .scheme.type
hilight .hilight.c 1 "int16"    .scheme.type
hilight .hilight.c 1 "uint32"   .scheme.type
hilight .hilight.c 1 "int32"    .scheme.type
hilight .hilight.c 1 "float32"  .scheme.type
hilight .hilight.c 1 "float64"  .scheme.type
.CE 0
.Me $ehf-scheme
.SH BUGS
The 'C' and 'C++' templates have been throughly used, there are no known issues
with the templates.
.PP
The  \fB.rc\fR  hilighting  is a little  bogus and should not really be mapped
onto \fB.cpp\fR. Do not attept to re-style.
.SH "SEE ALSO"
.na
.Ht c-deslashify 3 ,
.Ht c-slashify 3 ,
.Ht c-to-cpp-convert 3 ,
.Ht collapse-all 3 ,
.Ht collapse-current 3 ,
.Ht compile 3 ,
.Ht ctags 3f ,
.Ht file-exec 3 ,
.Ht file-format 3 ,
.Ht file-lint 3 ,
.Ht find-tag 2 ,
.Ht rcs-file 2 ,
.Ht restyle-buffer 3 ,
.Ht restyle-region 3 ,
.Ht time 2m .
.sp 1
.Hl "Supported File Types" FileTypes -
.ad
.FH
